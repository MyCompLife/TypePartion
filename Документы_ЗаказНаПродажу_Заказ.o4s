interface

uses
  System, DispIntf, ConstNames, Интерфейс, InitColors, Расчеты, ПодключениеДопИнтерфейса;

implementation

var
  Currency : ISDictionary;
  AccsPart : ISAccs;

procedure InitSrvData; Server;
begin
  AccsPart := CreateObject('Аккумуляторы.РасчетыСПартнерами');
end;

function GetPartSumBalance(Part: Variant): Decimal; Server;
var
  Proc : Decimal;
begin
  result := 0;
  if not IsObjFocused(Part) then
    exit;
  AccsPart.CalcGroupRestDirect(RoundDate(CurrentDate, rdDay, True), Part);
  result := AccsPart.СумОбщВал
end;

procedure ChangeTbl(TblContents: ISValueTable; Percent, CourseDoc : Decimal; TypePrice, CurrencyCodeDoc: String; DateDoc: DateTime); server;
var
  Course: Decimal;
begin
  TblContents.Select;
  While TblContents.SelectNext do
    begin
      Currency := TblContents.Товар.Валюта;
      if (Currency.Код = CurrencyCodeDoc) then
        Course := CourseDoc
      else
        Course := Currency.GetTimedValue(GetConstants.UsedCurs, DateDoc); //переделать на дату документа
      TblContents.Edit;
      if TypePrice <> '' then
        TblContents.ЦенаБезСкидкиНадбавки := TblContents.Товар._Default[TypePrice]*Course;
      TblContents.Цена := TblContents.ЦенаБезСкидкиНадбавки*(1 + Percent);
      TblContents.Post;
    end;
end;

procedure GetCodeUnitname(Doc : ISDocuments);
begin
  SetCodeUnitname(Doc); //находится в модуле Расчёты
end;

function GetCalcParams : Variant; server;
begin
  Result := EntryPoint(GetCodeUnitname);
end;

procedure GetGoodCount(Store : ISDictionary; tmpCtx : ISValueTable; Date : DateTime; AccsGoods : ISAccs); server;
var
  IsStore: boolean;
begin
  if (not tmpCtx.Active) then
    exit;
  IsStore := VarAsBool(Store.IsFocused);
  tmpCtx.Select;
  while tmpCtx.SelectNext do
    begin
      if IsStore then
        AccsGoods.CalcGroupRestDirect(Date, ArrayOf(tmpCtx.@Товар, Store))
      else
        AccsGoods.CalcGroupRestDirect(Date, tmpCtx.@Товар);
      tmpCtx.Edit;
      tmpCtx.AssignFields('НаличиеТовара=КолОбщ', AccsGoods);
      tmpCtx.Post;
    end;
end;

end.
