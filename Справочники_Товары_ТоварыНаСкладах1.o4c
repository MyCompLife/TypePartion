interface

uses
  System, DispIntf, ConstNames, InitColors, –абота—ѕеременными, –абота—ќбъектами,
  –абота— омпонентамиVCL, –абота—о—правочникамиCL;

implementation

var
  LockCalc, LCalcGoodCount, LookStore, ChangeSort : Boolean;
  CursorVis : TCursor;
  UseConst : IC4VPAConst;
  MasterData, GoodReplace, S : ICDictionary;
  Stores : ICValueList;
  TblStore, TblPartGood, DocsTbl : ICValueTable;
  ChangeImage : Integer;
  UseLevels, LockPost : Boolean;
  Opt : ICOptions;
  AccsGoodRes, AccsGoodCurrent : ICAccs;
  Source, SourcePrice, Dest, DestPrice : Variant;
  SourceGood, SourceStore, DestGood, DestStore : ICDictionary;    
  FieldName : String;


procedure SetCalcField(DT : DateTime; Stores : ICValueList; Index : Integer);
var
  Cond : string;
begin
  MasterData.ClearCalcFieldInDBServer;
  if Stores.ValidIndex(Stores.CurIndex) and (Stores.CurIndex <> 0) then
    S := Stores.GetValue(Stores.CurIndex)
  else
    nil(S);
  if miFilterNoZero.Checked then
    Cond := '<>0';
  MasterData.SetCalcFieldInDBServer(' оличествоЌа—кладах', AccsGoodCurrent,
    RoundDate(DT, rdDay, True), ArrayOf('“овар', S), ' олќбщ', amtBoth, Cond);
  if miReserv.Checked then
    Cond := '<>0'
  else
    Cond := '';
  MasterData.SetCalcFieldInDBServer(' ол¬–ез', AccsGoodRes,
    RoundDate(DT, rdDay, True), ('“овар'), ' олќбщ', amtBoth, Cond);
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
begin
  LockCalc := True;
  try
    UseConst := GetConstants;
    Opt := GetOptions;
    server.InitSrvData;
    SetColors(UseConst);
    MasterData := MDS.GetMean;
    miFilterNoZero.Checked := VarAsBool(Opt.GetServerPrm(CheckZero));
    UseLevels := VarAsBool(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption));
    TblStore := CreateObject('“аблица«начений');
    TblPartGood := CreateObject('“аблица«начений');
    TblPartGood.AddColumn('“овар', vtcLink, 0);
    TblPartGood.AddColumn('—клад', lftLink, 0);
    TblPartGood.AddColumn('ѕартнер', lftLink, 0);
    TblPartGood.AddColumn('ѕарти€', lftFloat, 0);
    TblPartGood.AddColumn(' олќбщ', lftFFT, 5);
    TblPartGood.AddColumn('¬х÷енаЅезЌƒ—', lftFFT, 7);
    TblPartGood.AddColumn(' урс', lftFFT, 7);
    TblPartGood.AddColumn('¬алюта', lftLink, 0);
    TblPartGood.AddColumn('¬х÷ена¬ал', lftFFT, 7);
    TblPartGood.AddColumn('—ум¬х', lftFFT, 7);
    TblPartGood.AddColumn('—ум¬ал¬х', lftFFT, 7);
    //   TblPartGood.AddColumn(' омисси€',lftInteger,0);
    TblPartGood.AddColumn('ƒатаѕр', vtcDate, 0);
    TblPartGood.Open;
    TblPartGood.SetColumnFormat('¬х÷енаЅезЌƒ—', UseConst.‘ормат÷ены√–Ќ);
    TblPartGood.SetColumnFormat('¬х÷ена¬ал', UseConst.‘ормат÷ены¬ал);
    TblPartGood.SetColumnFormat(' олќбщ', UseConst.‘ормат ол);
    TblPartGood.SetColumnFormat(' урс', '0.00###');
    Stores := CreateObject('—писок«начений');
    S := CreateObject('—правочники.—клады');
    Stores.AddValue(Trans('¬се склады'), Null);
    S.Select;
    if S.FindByField('јктивность', True, False) then
      Stores.AddValue(S.Ќазвание, S);
    S.Select;
    while S.SelectNext do
      if not S.јктивность = True then
        Stores.AddValue(S.Ќазвание, S); // или ('',S)
    Stores.UseControl(CtrlToVar(eStores));
    Stores.CurIndex := 0;
    Stores.CopyDataToServer;
    eDate.Text := dateToStr(CurrentDate + 1);
    server.SetStoreParams(CurrentDate + 1, Stores.SrvMean, Stores.CurIndex);
    AccsGoodRes := CreateObject('јккумул€торы.“овары¬–езерве');
    AccsGoodCurrent := CreateObject('јккумул€торы.ќстатки“оваровЌа—егодн€');
    SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
    if VarAsBool(UseConst.ѕоказывать÷ены√рн) then
      MasterData.SetSrvOnCalcFields(server.SrvCalcFieldsEP);
  finally
    LockCalc := False;
  end
end;

procedure Form_Open(Sender : TObject);
begin
  if not MasterData.HasParam('CardType') then
    MasterData.Params['CardType'] := 0;
  MasterData.SetFieldFilter('“ип арточки','=',MasterData.Params['CardType'],'','',Null);
  MasterData.Params[prmInterfaceType] := itMainForm;
  MakeStandartInterface(MasterData, Form, 'tbrData;tbrCtg', 'dbgData');
  (dbgPart.PosColumns.Items[0] as TO4GridColumn).Visible := UseConst.”четƒата;
  (dbgPart.PosColumns.Items[1] as TO4GridColumn).Visible := not VarAsBool(UseConst.”четѕо—редней—тоим); 
  tsFilter.Down := GetFilterPanel(MasterData.GetSign);
  pFilter.Visible := tsFilter.Down;
end;

procedure miPrint_Click(Sender : TObject);
begin
  MasterData.PrintForm('', False, 0, Arrayof(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex))
end;    

procedure eDate_Change(Sender : TObject);
begin
  SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
  server.SetStoreParams(StrToDateDef(eDate.Text, CurrentDateTime), Stores.SrvMean, Stores.CurIndex);
  RefreshDataWithoutCtg(MDS, dbtCtg, MasterData);
end;

procedure MDS_VPATimedAfterScroll(Sender : TObject);
begin
  TblStore.UseDataSource(0);
  TblPartGood.UseDataSource(0);
  try
    TblPartGood.Clear;
    if TblStore.Active then
      TblStore.Clear;
    if MasterData.IsFocused then
      begin   
        if (VarAsStr(UseConst.ѕуть  аталогу‘ото) <> '') and FileExists(VarAsStr(UseConst.ѕуть  аталогу‘ото)+ MasterData. од + '.jpg') then
          begin
            dbImgGood.Visible := true;
            dbImgGood.LoadFromFile(VarAsStr(UseConst.ѕуть  аталогу‘ото) + MasterData. од + '.jpg');
          end
        else
          dbImgGood.Visible := False; 

        if not VarAsBool(MasterData.ѕометка”даление) then
          miCheckDel.Caption:='”становить отметку на удаление'
        else
          miCheckDel.Caption:='—н€ть отметку на удаление';

        if not VarAsBool(MasterData.”слуга) and MasterData.SetSrvToClientPos then
          begin
            TblPartGood.CopyDataToServer();
            server.GetStoreList(MasterData.SrvMean, TblStore.SrvMean, TblPartGood.SrvMean, miViewEmptyPart.Checked);
            TblStore.CopyDataFromServer;
            TblStore.SortBy('јктивность');
            TblStore.SelectFirst;
            TblStore.SetColumnFormat(' олќбщ', UseConst.‘ормат ол);
            TblPartGood.CopyDataFromServer;
            TblStore.SrvMean.Clear;
            TblPartGood.SrvMean.Clear;
            TblPartGood.UseMaster(TblStore);
            TblPartGood.SortBy('-¬х÷енаЅезЌƒ—;ѕартнер');
          end;  
      end;
  finally
    TblStore.UseDataSource(CtrlToVar(TVSStore));   
    TblPartGood.DoCalculation(' урс','¬х÷енаЅезЌƒ—/¬х÷ена¬ал');
    TblPartGood.UseDataSource(CtrlToVar(TVSPartGood));
  end;
end;

procedure miRefresh_Click(Sender : TObject);
begin
  MasterData.Refresh;
end;

{$D-}
procedure dbgData_GetRowParams(Sender : TObject; DrawFont : TFont; var BackColor : TColor; Highlight : Boolean);
begin
  if MasterData.IsFocused and (MasterData. оличествоЌа—кладах <= 0) then
    if Highlight then
      begin
        BackColor := BlZeroSel;
        DrawFont.Color := BlFZeroSel;
      end
    else
      begin
        BackColor := BlZero;
        DrawFont.Color := BlFZero;
      end;
end;
{$D+}

procedure miCopy_VPABeforeActionClick(Sender : TObject);
var
  CopyFrom : ICDictionary;
begin
  CopyFrom := CreateObject('—правочники.“овары');
  if CopyFrom.Find(MasterData) then
    MasterData.Params['CopyFrom'] := CopyFrom
  else
    MasterData.Params['CopyFrom'] := Null;
end;

procedure miAdd_VPABeforeActionClick(Sender : TObject);
begin
  MasterData.Params['CopyFrom'] := Null;
end;

procedure miViewEmptyPart_Click(Sender : TObject);
begin
  miViewEmptyPart.Checked := not miViewEmptyPart.Checked;
  MDS_VPATimedAfterScroll(MDS);
end;

procedure miViewStore_Click(Sender : TObject);
begin
  miViewStore.Checked := not miViewStore.Checked;
  LookStore := miViewStore.Checked;
  Panel3.Visible := LookStore;
  Splitter2.Visible := LookStore;
  MDS_VPATimedAfterScroll(MDS);
end;


procedure miFilterNoZero_Click(Sender : TObject);
begin
  miFilterNoZero.Checked := not miFilterNoZero.Checked;
  SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
  RefreshDataWithoutCtg(MDS, dbtCtg, MasterData);
end;



procedure Sort(Sender : TObject);
begin
  if TblPartGood.IsFocused then
    begin
      miSortByPrice.ImageIndex := -1;
      miSortByCnt.ImageIndex := -1;
      miSortByDate.ImageIndex := -1;

      if ChangeImage = (Sender as TO4MenuItem).Tag then
        begin
          if ChangeSort then
            begin
              case (Sender as TO4MenuItem).Tag of
                0 :
                  TblPartGood.SortBy('-¬х÷енаЅезЌƒ—');
                1 :
                  TblPartGood.SortBy('- олќбщ');
                2 :
                  TblPartGood.SortBy('ƒатаѕр');
              end;
              ChangeSort := False;
              (Sender as TO4MenuItem).ImageIndex := 225
            end
          else
            begin
              case (Sender as TO4MenuItem).Tag of
                0 :
                  TblPartGood.SortBy('¬х÷енаЅезЌƒ—');
                1 :
                  TblPartGood.SortBy(' олќбщ');
                2 :
                  TblPartGood.SortBy('-ƒатаѕр');
              end;
              ChangeSort := True;
              (Sender as TO4MenuItem).ImageIndex := 224
            end
        end
      else
        begin
          case (Sender as TO4MenuItem).Tag of
            0 :
              TblPartGood.SortBy('¬х÷енаЅезЌƒ—');
            1 :
              TblPartGood.SortBy(' олќбщ');
            2 :
              TblPartGood.SortBy('-ƒатаѕр');
          end;
          ChangeSort := True;
          (Sender as TO4MenuItem).ImageIndex := 224
        end;

      miSortByPrice.Checked := False;
      miSortByCnt.Checked := False;
      miSortByDate.Checked := False;
      case (Sender as TO4MenuItem).Tag of
        0 :
          miSortByPrice.Checked := True;
        1 :
          miSortByCnt.Checked := True;
        2 :
          miSortByDate.Checked := True;
      end;
      ChangeImage := (Sender as TO4MenuItem).Tag;
    end
end;

procedure MDS_VPAAfterScroll(Sender : TObject);
begin
  MasterData.InteractiveUseLevels := UseLevels;
end;

procedure pmiDontUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := False;
end;

procedure pmiUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := True;
end;

procedure Form_Close(Sender : TObject);
begin
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption, UseLevels);
end;

procedure tbSource_Click(Sender : TObject);
begin
  Source := TblPartGood.ѕарти€;
  SourceGood := TblPartGood.“овар;
  //  SourceStore := TblPartGood.—клад;
  SourcePrice := TblPartGood.¬х÷енаЅезЌƒ—;
  SourceStore := CreateObject('—правочники.—клады');
  SourceStore.Find(TblPartGood.@—клад);
end;

procedure tbMove_Click(Sender : TObject);
begin
  Dest := TblPartGood.ѕарти€;
  DestGood := TblPartGood.“овар;
  DestStore := TblPartGood.—клад;
  DestPrice := TblPartGood.¬х÷енаЅезЌƒ—;
  try
    CursorVis := WaitCursorStart;
    DocsTbl := CreateObject('ValueTable');
    DocsTbl.AddColumn('Document', vtcLink, 0);
    DocsTbl.AddColumn('Date', vtcDateTime, 0);
    DocsTbl.Open();
    DocsTbl.CopyDataToServer();
    server.GetDocs(DocsTbl.SrvMean,
      ArrayOf(SourceGood, SourceStore, Source, SourcePrice), ArrayOf(DestGood, DestStore, Dest, DestPrice));
  finally
    SetCursor(CursorVis);
  end;
end;

procedure miReserv_Click(Sender : TObject);
begin
  miReserv.Checked := not miReserv.Checked;
  SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
  RefreshDataWithoutCtg(MDS, dbtCtg, MasterData);
end;

procedure miExcel_Click(Sender : TObject);
var
  dialog : ICProcessing;
  Proc : Variant;
  Excel, WorkBook, WorkSheet, TrgRange : Variant;
  i, j : Integer;
  DataDir : string;
begin
  dialog := CreateObject('ќбработки.ЁкспортExcel');
  if dialog.Execute('ЁкспортExcel', MasterData) = mrOk then
    begin
      Proc := MasterData.Params['Excel'];
      Excel := CreateOleObject('Excel.Application');
      Excel.Visible := True;
      DataDir := ExtractFilePath(RunPath);
      Excel.WorkBooks.Open(DataDir + 'ExcelTemplates\“овары.xls').WorkSheets(1).Copy;
      TrgRange := Excel.WorkBooks(2).WorkSheets(1).Range('A1:I1');
      i := 1;
      j := 1;
      if VarAsBool(Proc[0]) then
        begin
          TrgRange.Cells(i, j) := trans(' од');
          inc(j);
        end;
      if VarAsBool(Proc[1]) then
        begin
          TrgRange.Cells(i, j) := trans('Ќазвание товара');
          inc(j);
          TrgRange.Cells(i, j) := trans('≈д.изм.');
          inc(j);
        end;
      if VarAsBool(Proc[2]) then
        begin
          TrgRange.Cells(i, j) := trans(' оличество');
          inc(j);
        end;
      if VarAsBool(Proc[3]) then
        begin
          TrgRange.Cells(i, j) := trans('¬х.цена без Ќƒ—');
          inc(j);
          TrgRange.Cells(i, j) := trans('¬х.цена');
          inc(j);
        end;
      if VarAsBool(Proc[4]) then
        begin
          TrgRange.Cells(i, j) := trans('÷ена без Ќƒ—');
          inc(j);
          TrgRange.Cells(i, j) := trans('÷ена');
          inc(j);
        end;
      if VarAsBool(Proc[5]) then
        begin
          TrgRange.Cells(i, j) := trans('ћелкооптова€ цена без Ќƒ—');
          inc(j);
          TrgRange.Cells(i, j) := trans('ћелкооптова€ цена с Ќƒ—');
          inc(j);
        end;
      if VarAsBool(Proc[6]) then
        begin
          TrgRange.Cells(i, j) := trans(' рупнооптова€ цена без Ќƒ—');
          inc(j);
          TrgRange.Cells(i, j) := trans(' рупнооптова€ цена с Ќƒ—');
          inc(j);
        end;
      if VarAsBool(Proc[7]) then
        begin
          TrgRange.Cells(i, j) := trans(' атегори€');
          inc(j);
        end;
      MasterData.Select;
      MasterData.DisableControls;
      try
        i := 2;
        while MasterData.SelectNext do
          begin
            j := 1;
            if VarAsBool(Proc[0]) then
              begin
                TrgRange.Cells(i, j).NumberFormat := '@';
                TrgRange.Cells(i, j) := MasterData. од;
                inc(j);
              end;
            if VarAsBool(Proc[1]) then
              begin
                TrgRange.Cells(i, j) := MasterData.Ќазв“овара;
                inc(j);
                if VarAsBool(MasterData.≈д»зм.IsFocused) then
                  TrgRange.Cells(i, j) := MasterData.≈д»зм.Value;
                inc(j);
              end;
            if VarAsBool(Proc[2]) then
              begin
                TrgRange.Cells(i, j) := VarAsDec(MasterData. оличествоЌа—кладах);
                inc(j);
              end;
            if VarAsBool(Proc[3]) then
              begin
                TrgRange.Cells(i, j) := VarAsDec(MasterData.¬х÷енаЅезЌƒ—);
                inc(j);
                TrgRange.Cells(i, j) := VarAsDec(MasterData.¬х÷ена);
                inc(j);
              end;
            if VarAsBool(Proc[4]) then
              begin
                TrgRange.Cells(i, j) := VarAsDec(MasterData.÷енаЅезЌƒ—);
                inc(j);
                TrgRange.Cells(i, j) := VarAsDec(MasterData.÷ена);
                inc(j);
              end;
            if VarAsBool(Proc[5]) then
              begin
                TrgRange.Cells(i, j) := VarAsDec(MasterData.ќпт÷енаЅезЌƒ—);
                inc(j);
                TrgRange.Cells(i, j) := VarAsDec(MasterData.ќпт÷ена);
                inc(j);
              end;
            if VarAsBool(Proc[6]) then
              begin
                TrgRange.Cells(i, j) := VarAsDec(MasterData.ƒр÷енаЅезЌƒ—);
                inc(j);
                TrgRange.Cells(i, j) := VarAsDec(MasterData.ƒр÷ена);
                inc(j);
              end;
            if VarAsBool(Proc[7]) then
              begin
                if VarAsBool(MasterData.GetParent.IsFocused) then
                  TrgRange.Cells(i, j) := MasterData.GetParent.Ќазв“овара;
                inc(j);
              end;
            inc(i);
            StatusText(trans('ќбработано ') + IntToStr(i) + trans(' строк'));
          end;
      finally
        StatusText('');
        MasterData.EnableControls;
      end;
    end;
end;

procedure miCalcMiddlPrice_Click(Sender : TObject);
begin
  Dest := TblPartGood.ѕарти€;
  DestGood := TblPartGood.“овар;
  DestStore := TblPartGood.—клад;
  DestPrice := TblPartGood.¬х÷енаЅезЌƒ—;
  try
    CursorVis := WaitCursorStart;
    DocsTbl := CreateObject('ValueTable');
    DocsTbl.AddColumn('Document', vtcLink, 0);
    DocsTbl.AddColumn('Date', vtcDateTime, 0);
    DocsTbl.AddColumn('MotionSign', vtcInteger, 0);
    DocsTbl.AddColumn(' олќбщ', vtcFFt, 5);
    DocsTbl.AddColumn('—ум¬х', vtcFFt, 2);
    DocsTbl.Open();
    DocsTbl.CopyDataToServer();
    server.SetMiddlePrice(DocsTbl.SrvMean,
      ArrayOf(DestGood, DestStore, Dest, DestPrice));
  finally
    SetCursor(CursorVis);
  end;
end;

//заполнение аккумул€тора ќстатки“оваровЌа—егодн€

procedure miAccum_Click(Sender : TObject);
begin
  try
    CursorVis := WaitCursorStart;
    if not MasterData.IsFocused then
      exit
    else
      if MessageDlg(trans('«аполнить аккумул€торы?'), mtConfirmation, ArrayOf(mbYes, mbNo)) = mrYes then
        if MasterData.SetSrvToClientPos then
          if MasterData.RunThreadProcess(server.ConvertationAcc,
            DateTimeToStr(CurrentDateTime) + Trans(' - «аполнение аккумул€тора')) then
            ShowMessage(trans('«аполнение аккумул€тора успешно завершено'))
          else
            ShowMessage(trans('«аполнение аккумул€тора прошло с ошибками.' + #13 +
              '—м.файл ErrorCnv.log в корневом каталоге сервера јЅ ќ‘»—'))
  finally
    SetCursor(CursorVis);
  end;
end;

procedure miProperty_Click(Sender : TObject);
var
  dialog : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      dialog := CreateObject('ќбработки.—войства“овара');
      dialog.Execute('—войства“овара', MasterData);
    end;
end;

procedure miEditPrice_Click(Sender: TObject);
var
  dialog : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      dialog := CreateObject('ќбработки.»зменение÷ены“овара');
      dialog.Execute('»зменение÷ены', MasterData);
    end;
end;

procedure miCardMove_Click(Sender: TObject);
Var
 V, P : ICProcessing;
begin
 V := CreateObject('ќбработки.ƒвижениеѕо“овару');
 if Stores.CurIndex <> 0 then
   MasterData.Params['Store'] := Stores.GetValue(Stores.CurIndex)
 else
   MasterData.Params['Store'] := null;
 V.Execute('ƒвижениеѕо—кладам', MasterData);
end;

procedure dbImgGood_Click(Sender: TObject);
var
  ImgViewer: ICProcessing;
begin
  ImgViewer := CreateObject('ќбработки.ѕараметрыЌастройки ассы');
  ImgViewer.Execute('ѕросмотр»зображени€', MasterData. од );
end;

procedure tsFilter_Click(Sender: TObject);
begin
  pFilter.Visible := tsFilter.Down;
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  eGoodsFilter.Text := '';
  SetFilterPanel(MasterData.GetSign, tsFilter.Down);
end;

procedure FilterMean;
begin
  Case eFieldFilter.Text of
    'Ќазвание' : FieldName := 'Ќазв“овара';
  else
    FieldName := eFieldFilter.Text;
  end;
  MasterData.SetFieldFilter(FieldName,'Like', '%' + eGoodsFilter.Text + '%','','',Null);
  MasterData.Refresh;
  form.ActiveControl := dbgData;
end;

procedure eGoodsFilter_KeyDown(Sender: TObject; var Key: Integer);
begin
  if key=13 then
    FilterMean
end;

procedure tbFilterApply_Click(Sender: TObject);
begin
  FilterMean
end;

procedure tbGoodsFilterClear_Click(Sender: TObject);
begin
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  eGoodsFilter.Text := '';
end;

procedure miCheckDel_Click(Sender: TObject);
begin
 if MasterData.IsFocused then
   try
     MasterData.DisableControls;
     ChangeGoodToDelMark(MasterData);
     if VarAsBool(MasterData.ѕометка”даление) then
       miCheckDel.Caption:='—н€ть отметку на удаление'
     else
       miCheckDel.Caption:='”становить отметку на удаление';
   finally
     MasterData.EnableControls;
   end;
end;

procedure miAllGoods_Click(Sender: TObject);
begin
 (Sender as TO4MenuItem).Checked := true;
 case (Sender as TO4MenuItem).Tag of
  0: MasterData.CancelFieldFilter('ѕометка”даление');
  1: Masterdata.SetFieldFilter('ѕометка”даление','=',-1,'','',Null);
  2: Masterdata.SetFieldFilter('ѕометка”даление','<>',-1,'','',Null);
 end;
 Masterdata.Refresh;
end;

procedure tbFilter_Click(Sender: TObject);
var x,y : integer;
begin
 tbFilter.GetScreenPos(x,y);
 pmOptions.Popup(x,y+tbFilter.Height);
end;

{$D-}
procedure dbgData_GetImageIndex(Sender: TObject; var Index1, Index2: integer);
begin
  if MasterData.IsFocused then
    begin
      if VarAsBool(MasterData.ѕометка”даление) then
       Index2 := 51;
    end;
end;
{$D+}

procedure MDS_VPAAfterPost(Sender: TObject);
Var
  CatDic : ICDictionary;
begin
 if LockPost then exit;
 CatDic := CreateObject('—правочники.“овары');
 CatDic.IncludeLevels(true);
 CatDic.IncludeOnlyLevels(true);
 if CatDic.Find(MasterData.@ атегори€) and not IsObjEQ(MasterData.GetParent,CatDic)  then
   begin
     LockPost := true;
     MasterData.Edit;
     MasterData. атегори€ := MasterData.GetParent;
     MasterData.POst;
     MasterData.ApplyUpdates;
     LockPost := False;
   end;


end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
Splitter1:TO4Splitter
Panel1:TO4Panel
tbrCtg:TO4ToolBar
tbAddLevel:TO4ToolButton
tbEditLevel:TO4ToolButton
tbDelLevel:TO4ToolButton
dbtCtg:TO4DBTreeView
Panel2:TO4Panel
Splitter2:TO4Splitter
tbrData:TO4ToolBar
tbAdd:TO4ToolButton
tbEdit:TO4ToolButton
tbDelete:TO4ToolButton
tbDelimiter1:TO4ToolButton
tbPrint:TO4ToolButton
tbDelimiter2:TO4ToolButton
tbFilter:TO4ToolButton
tbDelimiter3:TO4ToolButton
tbRefresh:TO4ToolButton
tbSettings:TO4ToolButton
ToolButton3:TO4ToolButton
tsFilter:TO4ToolButton
dbgData:TO4DBGrid
Panel4:TO4Panel
Label1:TO4Label
Label2:TO4Label
eDate:TO4Edit
eStores:TO4Edit
Panel3:TO4Panel
Splitter3:TO4Splitter
dbgStore:TO4DBGrid
dbgPart:TO4DBGrid
Panel5:TO4Panel
dbImgGood:TO4DBImage
pFilter:TO4Panel
CodePanel:TO4Panel
eGoodsFilter:TO4Edit
eFieldFilter:TO4Edit
ToolBar1:TO4ToolBar
tbFilterApply:TO4ToolButton
ToolButton4:TO4ToolButton
tbGoodsFilterClear:TO4ToolButton
MDS:TO4DataSource
pmAddLevels:TO4PopupMenu
pmiAddBros:TO4MenuItem
pmiAddChild:TO4MenuItem
pmData:TO4PopupMenu
miAdd:TO4MenuItem
miCopy:TO4MenuItem
miEdit:TO4MenuItem
miDelete:TO4MenuItem
miDelimiter1:TO4MenuItem
miPrint:TO4MenuItem
miExcel:TO4MenuItem
miDelimiter2:TO4MenuItem
miSort:TO4MenuItem
miDelimiter3:TO4MenuItem
miRefresh:TO4MenuItem
miSettings:TO4MenuItem
miAccum:TO4MenuItem
MenuItem2:TO4MenuItem
miCardMove:TO4MenuItem
miEditPrice:TO4MenuItem
miCheckDel:TO4MenuItem
TVSStore:TO4TableValueSource
TVSPartGood:TO4TableValueSource
pmOptions:TO4PopupMenu
miViewStore:TO4MenuItem
miViewEmptyPart:TO4MenuItem
miFilterNoZero:TO4MenuItem
miReserv:TO4MenuItem
miFilter:TO4MenuItem
miAllGoods:TO4MenuItem
miGoodsToDel:TO4MenuItem
miWithoutGoodsToDel:TO4MenuItem
pmCtg:TO4PopupMenu
pmiAddLevel:TO4MenuItem
pmiAddSubLevel:TO4MenuItem
pmiEditLevel:TO4MenuItem
pmiDelLevel:TO4MenuItem
MenuItem4:TO4MenuItem
pmiUseLevel:TO4MenuItem
pmiDontUseLevel:TO4MenuItem
pmiUseNoLevel:TO4MenuItem
pmSort:TO4PopupMenu
miSortByPrice:TO4MenuItem
miSortByCnt:TO4MenuItem
miSortByDate:TO4MenuItem
MenuItem3:TO4MenuItem
miDelCard:TO4MenuItem
miAddFromCard:TO4MenuItem
MenuItem1:TO4MenuItem
miCalcMiddlPrice:TO4MenuItem
