interface

uses
  System, DispIntf, ConstNames, »нтерфейс, InitColors, –асчеты, –абота—ѕеременными,
  –абота—ƒокументами¬∆урналах, ѕодключениеƒоп»нтерфейса, –абота—ќбъектами, –абота— омпонентамиVCL,
  ”становка¬ажныхќбъектов, ѕечать»¬ыводЌаЁкран, ѕечать, ѕользователи, ƒополнительный‘ункционал, 
  –абота—_ICS_EP_09, –абота—‘ѕ_Unisystem, –абота—‘–Ёкселлио, –абота—WebApi, –абота‘ѕ_MG_N707TS;

implementation

var
  MasterData, ChildPaysOut, ChildPaysIn: ICJournal;
  Constants : IC4VPAConst;
  Options : ICOptions;
  LockCh, PreView, UseFiscalPriner : Boolean;
  Currency, FiscalPrinerDic : ICDictionary;
  PrintList : ICValueList;
  PrintFormsTbl: ICValueTable;

procedure MDS_VPATimedAfterScroll(Sender : TObject);
begin
  if MasterData.IsFocused then
    tsState.SecondSelect := MasterData.GetDocState + 1
  else
    tsState.SecondSelect := -1;
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
var
  i : Integer;
  Strs : Variant;
begin
  MasterData := MDS.GetMean;
  Constants := GetConstants;
  SetColors(Constants);
  Options := GetOptions;
  MasterData.SetSrvOnCalcFields(server.GetCalcEP(MasterData.SrvMean));
  ChildPaysOut := CreateObject('∆урналы.∆урналѕодчѕлатежейѕрих');
  ChildPaysOut.UseMaster(MasterData);
  Currency := CreateObject('—правочники.¬алюты');
end;

procedure Form_Open(Sender : TObject);
var
  Nobody : TO4ToolBar; // заглушка на NIL
  i : Integer;         
  ItemMenu : TO4MenuItem;
begin
  MakeInterface(tbrData, Nobody, dbgData);
  miDocMove.Visible := GetUDASet('viewdocmove'); 
  miInfoChange.Visible := GetUDASet('viewdochistory');
  if IsNil(Users) then
    Users := CreateObject('—правочники.ѕользователи');
  if Users.FindByField('UniID',GetUserID, False) then
    begin
      if VarAsBool(Users.@–егион.IsFocused) and VarAsBool(Users.ќтборѕо–егиону) then
        MasterData.SetFieldFilter('–егион','=',Users.–егион,'','',Null);
      if VarAsBool(Users.ќтборѕоѕользователю) then
        MasterData.SetFieldFilter('ќтветственный','=',Users.—лужащий,'','',Null);   

      if VarAsBool(Users.@‘искальный–егистратор.IsFocused) then
        begin
         FiscalPrinerDic := CreateObject('—правочники.‘искальные–егистраторы');
         UseFiscalPriner := FiscalPrinerDic.Find(Users.@‘искальный–егистратор);
         tbFiscalPrint.Visible := UseFiscalPriner;
        end;

    end;
  for i := 0 to MasterData.StateCount - 1 do
    tsState.Tabs.Add(Trans(MasterData.GetStateName(i)));
  // tsState.TabIndex:=VarAsInt(Options.GetServerPrm(StateOnOpen));
  ChildPaysOut.OpenFormInplace('—писокѕодчиненныхѕлатежей', CtrlToVar(pPaysOut));
  MasterData.DefineSelectParams(True);
  tsState.TabIndex := MasterData.GetDocStateRange + 1;
  LockCh := True;
  // подключение ‘ѕ
  DefaultAIInitOnPanelAndToolButtons('»нтерфейсƒл€‘ѕ', '‘орма∆урнала', pnForFiscalPrinter,
    tbDelimiter4, tbPrintCheques, MasterData, 'tbPrintCheques');   
  GetPrintersList(PrintList, edPrinters, MasterData.GetSign);  
  
  MakeUserInterface(MasterData.GetSign, pPrintPrm, PreView, PrintFormsTbl);
  if not isNil(PrintFormsTbl) then
    begin
      btnPrint.Style := tbsDropDown;
      btnPrint.DropdownMenu := pmPrintForms;
      if PrintFormsTbl.LineCount = 0 then
        btnPrint.Enabled := false; //если не указана печ.форма или не спозиционирован документ, тогда блокируетс€ кнопка печати
      pmiPrintOne.Enabled := btnPrint.Enabled;
      PrintFormsTbl.DoNumbering('Ќом—троки',1,1);
      PrintFormsTbl.Select;
      while PrintFormsTbl.SelectNext do
        begin
          ItemMenu := form.FindComponent('miPrinForm' + VarAsStr(PrintFormsTbl.Ќом—троки)) as TO4MenuItem;
          ItemMenu.Caption := PrintFormsTbl.ѕеч‘орма;
          ItemMenu.Visible := true;
          ItemMenu.Tag := PrintFormsTbl.Ќом—троки;
          if PrintFormsTbl.Ќом—троки = 1 then
            ItemMenu.Default := true;
        end;
    end;
end;

procedure tsState_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
  if LockCh then
    begin
      MasterData.SetDocStateRange(NewTab - 1);
      MasterData.Select;
    end;
end;

procedure btnPrint_Click(Sender : TObject);
var
  PrinterName: String;
  ObjTag : Integer;
begin
  if Sender.ClassName = 'TO4ToolButton' then
    ObjTag := (Sender as TO4ToolButton).Tag;
  if Sender.ClassName = 'TO4MenuItem' then
    ObjTag := (Sender as TO4MenuItem).Tag;
  if pPrintPrm.Visible then
    PrinterName := PrintList.GetStr(edPrinters.ItemIndex);
  PrintFormsTbl.SortBy('Ќом—троки');
  if PrintFormsTbl.Find(ObjTag) then
    PrintOnUserDevice('ќбработки.ѕеч”нивЌакладна€ќтпуска', PrintFormsTbl.ѕеч‘орма, PrinterName, MasterData.GetDoc, PreView);
{var
  V : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      V := CreateObject('ќбработки.ѕеч”нивЌакладна€ќтпуска');
      V.PrintForm('ѕеч”нивЌаклќтпускаЅезЎапки', not VarAsBool(Options.GetServerPrm(DirectPrint)), MasterData.GetDoc)
    end; }
end;

{$D-}
procedure dbgData_GetImageIndex(Sender : TObject; var Index1, Index2 : Integer);
begin
  if MasterData.IsFocused then
    begin
      if (MasterData.ќплачено > 0) then
        begin
          if (MasterData.ќплачено < MasterData.—умма¬¬алќпт) then
            Index1 := 8
          else
          if MasterData.ќплачено > MasterData.—умма¬¬алќпт then
            Index1 := 7
          else
          if MasterData.ќплачено = MasterData.—умма¬¬алќпт then
            Index1 := 6 
        end
        else
        if MasterData.ќплачено < 0 then
          Index1 := 21;

      if MasterData.GetDocState > 0 then
        Index2 := 10
      else
        Index2 := 9;
    end;
end;

procedure sgOrder_GetCellProps(Sender : TObject; aCol, aRow : Integer; aFont : TFont;
  var Background : TColor; var CellAlignment : TAlignment;
  var Layout : TTextLayout;
  var WrapText : Boolean; Selected, Fixed, Highlight : Boolean);
begin
  if (aCol > 0) and (aRow > 0) then
    CellAlignment := taRightJustify;
  case aRow of
    0 :
      CellAlignment := taCenter;
    1 :
      aFont.Color := clBlue;
    2 :
      aFont.Color := clGreen;
    3 :
      aFont.Color := clRed;
  end;
end;

procedure dbgData_GetRowParams(Sender : TObject; DrawFont : TFont; var BackColor : TColor; Highlight : Boolean);
begin
  if MasterData.IsFocused and (MasterData.GetDocState > 0) and
    (MasterData.ќплачено < MasterData.—умма) then
    if Highlight then
      BackColor := NoPaySel
    else
      BackColor := NoPayNorm;
end;
{$D+}

procedure pmiPrint_Click(Sender : TObject);
var
  V : ICProcessing;
  PrinterName: String;
begin
  V := CreateObject('ќбработки.ѕеч”нив∆урнала'); //ѕеч”нив∆урнала— оличеством
  if pPrintPrm.Visible then
    PrinterName := PrintList.GetStr(edPrinters.ItemIndex);
  PrintOnUserDevice('ќбработки.ѕеч”нив∆урнала', 'ѕеч”нив∆урнала—“ипом»¬алютой', PrinterName, MasterData, PreView)
end;

procedure pmiPrintStore_Click(Sender : TObject);
var
  V : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      V := CreateObject('ќбработки.ѕеч”нивЌаклќтп—клад');
      V.PrintForm('”нивЌаклќтп—клад', not VarAsBool(Options.GetServerPrm(DirectPrint)), MasterData.GetDoc)
    end;
end;

procedure pmiSelect_Click(Sender : TObject);
begin
  MasterData.DefineSelectParams(False);
  tsState.TabIndex := MasterData.GetDocStateRange + 1;
end;

procedure pmiRefresh_Click(Sender : TObject);
begin
  MasterData.Refresh;
end;

procedure MDS_VPADataRefreshed(Sender : TObject);
begin
  LockCh := False;
  tsState.TabIndex := MasterData.GetDocStateRange + 1;
  LockCh := True;
end;

procedure DBMemo1_Exit(Sender : TObject);
begin
  ChangeDocFieldByJournalField(MasterData);
end;

procedure miCopyDoc_Click(Sender : TObject);
begin
  AddDocByTemplate(MasterData);
end;

procedure Form_ExecProc(Self, Caller : Variant; ProcID : string; InParams : Variant; var OutParams : Variant);
begin
  case ProcId of
    GetTemplateDocNames :
      if MasterData.GetDocSign <> '¬озвратќтѕокупателей' then
        begin
          OutParams := ArrayOf(dtCancelTemplate);
          ShowMessage(DontMakeCopy);
        end;
  end;
end;

procedure pmiExportExcel_Click(Sender : TObject);
begin
  ExportGoodsDocToExcel(MasterData.GetDoc, dtInvoice);
end;

procedure Form_Close(Sender: TObject);
begin
  InvokeAIFunction(CtrlToVar(pnForFiscalPrinter), 'DisconnectToolButton');
end;

procedure Button1_Click(Sender: TObject);
begin
  Run('ftp -s:c:\ftp.txt', false);
end;

procedure btSaveActivPrinter_Click(Sender: TObject);
var
  PrinterName: String;
begin
  PrinterName := PrintList.GetStr(PrintList.CurIndex);
  SaveUserActivePrinter(PrinterName, MasterData.GetSign);
//  Options.SetServerPrm('јктивныйѕринтер' + MasterData.GetSign + Form.Caption, PrinterName);
end;


procedure miDocMove_Click(Sender: TObject);
var P:ICProcessing;
begin
  if MasterData.IsFocused and (MasterData.GetDocState>0) then
    begin
      P := CreateObject('ќбработки.ƒвижениеѕоƒокументу');
      P.Execute('ƒвижениеѕоƒокументу',MasterData.GetDoc);
    end;
end;

procedure tbFiscalPrint_Click(Sender: TObject);
var Doc : ICDocuments;
begin
 if MasterData.IsFocused and IsObjFocused(FiscalPrinerDic) then
   begin
     Doc := MasterData.GetDoc;
     if MessageDlg('ѕечатать '+VarAsStr(Doc.GetName)+' є'+VarAsStr(Doc.GetNumber)+' от '+DateToStr(Doc.GetDate)+' на фискальный принтер?',mtConfirmation,ArrayOf(mbYes,mbNo))=mrYes then
       begin
         case VarAsStr(FiscalPrinerDic.“ип) of
          'ICS' :  PrintReturnDocFP_ICS_EP_09(FiscalPrinerDic, Doc);
          'Unisystem' : PrintDocMiniFP(FiscalPrinerDic, Doc, '1');
           'Excellio'  : PrintFiscalReturnDocFPExellio(FiscalPrinerDic, Doc);  
           'MG-N707' :  PrintFiscalReturnDocMGN707(FiscalPrinerDic, Doc);
          else
            ShowMessage('Ќеизвестный тип фискального регистратора!');
         end;
       end;

   end;
end;

procedure miInfoChange_Click(Sender: TObject);
var
  V: ICProcessing;
begin
  V := CreateObject('ќбработки.»нфо»зменений');
  V.Execute('»нфо»зменений', MasterData.GetDoc);
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
Splitter1:TO4Splitter
Panel1:TO4Panel
dbgData:TO4DBGrid
tbrData:TO4ToolBar
tbAdd:TO4ToolButton
tbEdit:TO4ToolButton
ToolButton1:TO4ToolButton
ToolButton3:TO4ToolButton
tbDelete:TO4ToolButton
tbDelimiter1:TO4ToolButton
btnPrint:TO4ToolButton
tbDelimiter2:TO4ToolButton
tbSelect:TO4ToolButton
tbDelimiter3:TO4ToolButton
tbRefresh:TO4ToolButton
tbParam:TO4ToolButton
tbFiscalPrint:TO4ToolButton
tbDelimiter4:TO4ToolButton
tbPrintCheques:TO4ToolButton
Button1:TO4Button
tsState:TO4TabSet
pnAdditInterface:TO4Panel
pnForFiscalPrinter:TO4Panel
pPrintPrm:TO4Panel
Label4:TO4Label
btSaveActivPrinter:TO4Button
edPrinters:TO4Edit
Panel2:TO4Panel
pPays:TO4Panel
pPaysOut:TO4Panel
Label2:TO4Label
MDS:TO4DataSource
pmData:TO4PopupMenu
pmiAdd:TO4MenuItem
miCopyDoc:TO4MenuItem
pmiEdit:TO4MenuItem
miUp:TO4MenuItem
miDown:TO4MenuItem
pmiDelete:TO4MenuItem
MenuItem1:TO4MenuItem
pmiPrintOne:TO4MenuItem
pmiPrint:TO4MenuItem
pmiExportExcel:TO4MenuItem
MenuItem2:TO4MenuItem
miSort:TO4MenuItem
pmiSort:TO4MenuItem
MenuItem3:TO4MenuItem
miRefresh:TO4MenuItem
miDocMove:TO4MenuItem
miInfoChange:TO4MenuItem
pmPrintForms:TO4PopupMenu
miPrinForm1:TO4MenuItem
miPrinForm2:TO4MenuItem
miPrinForm3:TO4MenuItem
miPrinForm4:TO4MenuItem
miPrinForm5:TO4MenuItem
miPrinForm6:TO4MenuItem
miPrinForm7:TO4MenuItem
miPrinForm8:TO4MenuItem
miPrinForm9:TO4MenuItem
miPrinForm10:TO4MenuItem
