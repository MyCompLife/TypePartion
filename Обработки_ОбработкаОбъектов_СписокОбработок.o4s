interface

uses
  System, DispIntf, ConstNames, Расчеты, РаботаСоСправочникамиCL, РаботаСЖурналомИзменений;

implementation 
var
  Constants: IS4VPAConst;
  LogList :ISValueList;
  IncludeInputRest : boolean;
procedure CreateStructureKassaTbl(Tbl : ISValueTable);
begin
  Tbl.AddColumn('Товар',vtcLink,0);
  Tbl.AddColumn('Document',vtcLink,0);
  Tbl.AddColumn('Date',vtcDateTime,0);
  Tbl.AddColumn('MotionSign',vtcInteger,0);
  Tbl.AddColumn('DocLineNum',vtcInteger,0);
  Tbl.AddColumn('Валюта',vtcLink,0);
  Tbl.AddColumn('Касса',vtcLink,0);
  Tbl.AddColumn('СумПрих',lftFFT,7);
  Tbl.AddColumn('СумРасх',lftFFT,7);
  Tbl.AddColumn('СумОбщ',lftFFT,7);
  Tbl.Open;
end;

procedure CreateStructureTbl(Tbl : ISValueTable);
begin
  Tbl.AddColumn('Document',vtcLink,0);
  Tbl.AddColumn('Date',vtcDateTime,0);
  Tbl.AddColumn('MotionSign',vtcInteger,0);
  Tbl.AddColumn('DocLineNum',vtcInteger,0);
  Tbl.AddColumn('ТоварУслуга',vtcLink,0);
  Tbl.AddColumn('Партнер',vtcLink,0);
  Tbl.AddColumn('Статья',vtcLink,0);
  Tbl.AddColumn('Валюта',vtcLink,0);
  Tbl.AddColumn('Регион',vtcLink,0);

  Tbl.AddColumn('Сумма',lftFFT,7);
  Tbl.AddColumn('Количество',lftFFT,5);
  Tbl.AddColumn('СуммаГрн',lftFFT,7);
  Tbl.Open;
end;

procedure GetAcc(Mean: ISProcessing; var Success: Boolean);
var
  Date : DateTime;
  Accs : ISAccs;
  Tbl : ISValueTable;
  i, Total, NotRegion : Integer;
  CursorVis : TCursor;
  Client : ISProcessing;
  Log : TStringList;
  RegionDic : ISDictionary; 
  Doc : ISDocuments;
begin
  Success := true;
  Client := Mean;
  Client.NotifyClientEx(1,'Пройдено 0 этапов из 2', 0, 2);
  RegionDic := CreateObject('Справочники.Регионы');
    RegionDic.Select;
    if not RegionDic.FindByCode('1',false) then
      begin
        Log.Add('Регион с кодом - 1 не найден');
        exit
      end;
  Accs := CreateObject('Аккумуляторы.ДоходыРасходы');
  Tbl := CreateObject('ТаблицаЗначений');
  CreateStructureTbl(Tbl);

  //--------------------------- 1 - этап ---------------------------------------
  Date := 400000;
  Accs.IncludeZeroRest := true;
  Accs.AppendGroupMotionToValueTable(0, Date, amtBoth,
     'Document;Date;MotionSign;DocLineNum;ТоварУслуга;Партнер;Статья;Валюта;Регион;Сумма;Количество;СуммаГрн', -1, Tbl);

  i := 0;
  Tbl.Select;
  Total := Tbl.LineCount;
  while Tbl.SelectNext do
  begin
    Inc(i);
    Client.NotifyClientEx(2,'Удалено '+IntToStr(i)+' из ' + IntToStr(Total),i,Total);
    if Client.Terminated then
    begin
      Success := False;
      exit;
    end;
    if VarAsBool(Tbl.Document.HasField('Регион')) and not VarAsBool(Tbl.Document.@Регион.IsFocused) then
      begin
        Doc := Tbl.Document;
        Doc.Edit;
        Doc.Регион := RegionDic;
        Doc.Post;
      end;
    Accs.RemoveDoc(Tbl.Document, 1, true);
  end;
  Client.NotifyClientEx(1,'Пройден 1 этап из 2',1,2);

  //--------------------------- 2 - этап ---------------------------------------
  //удаление из аккумулятора записей
  Tbl.SelectFirst;
  Tbl.Select;
  i := 0;
  Total := Tbl.LineCount;
  Log := CreateStringList;
  try
    while Tbl.SelectNext do
      begin
        Inc(i);
        Client.NotifyClientEx(2,'Добавлено '+IntToStr(i)+' из ' + IntToStr(Total),i,Total);
        if Client.Terminated then
          begin
            Success := False;
            exit;
          end;
        Accs.AssignFields('ТоварУслуга;Партнер;Статья;Валюта;Регион;Сумма;Количество;СуммаГрн',Tbl);
        if  VarAsBool(Tbl.Document.HasField('Регион')) then
          Accs.Регион := Tbl.Document.Регион
        else
          Inc(NotRegion);
        if Tbl.MotionSign = -1 then
          Accs.Outcome(Tbl.Document, Tbl.Date, Tbl.DocLineNum)
        else
          Accs.Income(Tbl.Document, Tbl.Date, Tbl.DocLineNum);
        Log.Add(Tbl.DefValue['Document'] +  ' ' + DateToStr(Tbl.Date) + ' ' + FloatToStr(Tbl.Сумма));
      end;
  finally
    Log.SaveToFile(ExtractFilePath(RunPath) + 'ErrorCnv.log');
    Log.Free
  end;
   Client.NotifyClientEx(1,'Пройдено 2 этапа из 2',2,2);
end;

//заполнение аккумулятора ОстаткиТоваровНаСегодня
//procedure GetAss(Good : ISDictionary);server;
procedure GetAccKassa(Mean: ISProcessing; var Success: Boolean);
var
  Date : DateTime;
  AccsKassa : ISAccs;
  TblKassa : ISValueTable;
  i, Total : Integer;
  CursorVis : TCursor;
  Client : ISProcessing;
  Log : TStringList;
  CashDic : ISDictionary;
begin
  Success := true;
  Client := Mean;
  Client.NotifyClientEx(1,'Пройдено 0 этапов из 2', 0, 2);
  CashDic := CreateObject('Справочники.Кассы');
    CashDic.Select;
    if not CashDic.FindByCode('1',false) then
      begin
        Log.Add('Касса с кодом - 1 не найдена');
        exit
      end;
  AccsKassa := CreateObject('Аккумуляторы.ОстаткиПоКассе');
  TblKassa := CreateObject('ТаблицаЗначений');
  CreateStructureKassaTbl(TblKassa);

  Date := 400000;
  AccsKassa.IncludeZeroRest := true;
  AccsKassa.AppendGroupMotionToValueTable(0, Date, amtBoth,
     'Валюта;Касса;Document;Date;MotionSign;DocLineNum;СумПрих;СумРасх;СумОбщ', -1, TblKassa);
  TblKassa.Select;
  i := 0;
  Total := TblKassa.LineCount;
  while TblKassa.SelectNext do
  begin
    Inc(i);
    Client.NotifyClientEx(2,'Удалено '+IntToStr(i)+' из ' + IntToStr(Total),i,Total);
    if Client.Terminated then
    begin
      Success := False;
      exit;
    end;
    AccsKassa.RemoveDoc(TblKassa.Document, 1, true);
  end;
  //--------------------------- 2 - этап ---------------------------------------
  Client.NotifyClientEx(1,'Пройден 1 этап из 2',1,2);
 //удаление из аккумулятора записей
  TblKassa.SelectFirst;
  TblKassa.Select;
  i := 0;
  Total := TblKassa.LineCount;
  Log := CreateStringList;
  try
    while TblKassa.SelectNext do
      begin
        Inc(i);
        Client.NotifyClientEx(2,'Добавлено '+IntToStr(i)+' из ' + IntToStr(Total),i,Total);
        if Client.Terminated then
        begin
          Success := False;
          exit;
        end;
        AccsKassa.AssignFields('Валюта;СумПрих;СумРасх;СумОбщ',TblKassa);
        AccsKassa.Касса := CashDic;
        if TblKassa.MotionSign = -1 then
          AccsKassa.Outcome(TblKassa.Document, TblKassa.Date, TblKassa.DocLineNum)
        else
          AccsKassa.Income(TblKassa.Document, TblKassa.Date, TblKassa.DocLineNum);
        Log.Add(TblKassa.DefValue['Document'] +  ' ' + DateToStr(TblKassa.Date) + ' ' + FloatToStr(TblKassa.СумОбщ));
      end;
  finally
    Log.SaveToFile(ExtractFilePath(RunPath) + 'ErrorCnv.log');
    Log.Free
  end;
   Client.NotifyClientEx(1,'Пройдено 2 этапа из 2',2,2);
end;

function ConvertationAcc: Variant; server;
begin
  Result := EntryPoint(GetAcc);
end;

procedure EditFiledsInDocs(Mean: ISProcessing; var Success: Boolean);
var
  Date : DateTime;
  TblKassa : ISValueTable;
  n, i, Total : Integer;
  CursorVis : TCursor;
  Client : ISProcessing;
  Log : TStringList;
  CashDic, RegionDic, StoreDic : ISDictionary;
  Docs, Doc : ISDocuments;
  ListDocType, DocType : String;
begin
  try
    Success := true;
    Client := Mean;
    Log := CreateStringList;

    Client.NotifyClientEx(1,'Пройдено 0 этапов из 3', 0, 2);
    ListDocType := 'НакладнаяПрихода'; //;ПриходВКассу;РасходИзКассы
    CashDic := CreateObject('Справочники.Кассы');
    CashDic.Select;
      if not CashDic.FindByCode('1',false) then
        begin
          Log.Add('Касса с кодом - 1 не найдена');
          exit
        end;

    RegionDic := CreateObject('Справочники.Регионы');
    RegionDic.Select;
      if not RegionDic.FindByCode('1',false) then
        begin
          Log.Add('Регион с кодом - 1 не найден');
          exit
        end;

    StoreDic := CreateObject('Справочники.Склады');
    StoreDic.Select;
      if not StoreDic.FindByCode('11',false) then
        begin
          Log.Add('Склад с кодом - 11 не найден');
          exit
        end;


    for n := 1 to WordCount(ListDocType,';') do
    begin
      DocType := ExtractWord(n ,ListDocType, ';');
      Docs := CreateObject('Документы.' + DocType);
      Docs.Select;
      While Docs.SelectNext do
        Inc(Total);
      Docs.Select;
      While Docs.SelectNext do
        begin
          if Client.Terminated then
          begin
            Success := False;
            exit;
          end;
          if not VarAsBool(Docs.@Регион.IsFocused) then
          begin
            Docs.Edit;
            if Docs.HasField('СкладПр') then
              Docs.СкладПр := StoreDic;
            if Docs.HasField('СкладПоУмолч') then
              Docs.СкладПоУмолч := StoreDic;
            if Docs.HasField('Касса') then
              Docs.Касса := CashDic;
            Docs.Регион := RegionDic;
            Docs.Post;
            Inc(i);
            Client.NotifyClientEx(2,'Изменено документов "' + DocType +  '" ' +IntToStr(i) + ' из ' + IntToStr(Total),i,Total);
          end;
        end;
      Client.NotifyClientEx(1,'Пройден ' + IntToStr(n) + ' этап из ' + IntToStr(WordCount(ListDocType,';')),1,WordCount(ListDocType,';'));
    end;
  finally
    Log.SaveToFile(ExtractFilePath(RunPath) + 'ErrorCnv.log');
    Log.Free
  end;
end;

procedure EditFiledsInDic(Mean: ISProcessing; var Success: Boolean);
var
  Date : DateTime;
  TblKassa : ISValueTable;
  n, i, Total : Integer;
  CursorVis : TCursor;
  Client : ISProcessing;
  Log : TStringList;
  CashDic, RegionDic, StoreDic : ISDictionary;
  Dics : ISDictionary;
  ListDicType, DicType : String;
begin
  try
    Success := true;
    Client := Mean;
    Log := CreateStringList;

    Client.NotifyClientEx(1,'Пройдено 1 этапов из 1', 0, 2);
    ListDicType := 'ЮрПартнеры;Служащие'; //;ПриходВКассу;РасходИзКассы
    RegionDic := CreateObject('Справочники.Регионы');
    RegionDic.Select;
      if not RegionDic.FindByCode('1',false) then
        begin
          Log.Add('Регион с кодом - 1 не найден');
          exit
        end;
    for n := 1 to WordCount(ListDicType,';') do
    begin
      DicType := ExtractWord(n ,ListDicType, ';');
      Dics := CreateObject('Справочники.' + DicType);
      Dics.Select;
      While Dics.SelectNext do
        Inc(Total);
      Dics.Select;
      While Dics.SelectNext do
        begin
          if Client.Terminated then
          begin
            Success := False;
            exit;
          end;
          Dics.Edit;
          Dics.Регион := RegionDic;
          Dics.Post;
          Inc(i);

          Client.NotifyClientEx(2,'Изменено документов "' + DicType +  '" ' +IntToStr(i) + ' из ' + IntToStr(Total),i,Total);
        end;
      Client.NotifyClientEx(1,'Пройден ' + IntToStr(n) + ' этап из ' + IntToStr(WordCount(ListDicType,';')),1,WordCount(ListDicType,';'));
    end;
  finally
    Log.SaveToFile(ExtractFilePath(RunPath) + 'ErrorCnv.log');
    Log.Free
  end;
end;

function EditDocs: Variant; server;
begin
  Result := EntryPoint(EditFiledsInDocs);
end;

function EditDics: Variant; server;
begin
  Result := EntryPoint(EditFiledsInDic);
end;


procedure CancelBarcodes(Mean: ISProcessing; var Success: Boolean);
Var
  GoodDic, BarCodesDic : IsDictionary;
  Count, Total : Integer;
begin
  GoodDic := CreateObject('Справочники.Товары');
  BarCodesDic := CreateObject('Справочники.ШтрихКодыТоваров');
  GoodDic.Select;
  Count :=1;
  Total := GoodDic.RecordCount;
  while GoodDic.SelectNext do
    begin
      BarCodesDic.UseMasterAndSelect(GoodDic);
      while BarCodesDic.SelectNext do
        Begin
          if StrLength(VarAsStr(BarCodesDic.Код))<> VarAsInt(GetConstants.ШтрихКодТовараВнутреннийКолСимв) then
            begin
              BarCodesDic.Edit;
              BarCodesDic.Активность := false;
              BarCodesDic.Post;
              BarCodesDic.ApplyUpdates;
            end
          else
            begin
              if not VarAsBool(BarCodesDic.Активность) then
                begin
                  BarCodesDic.Edit;
                  BarCodesDic.Активность := true;
                  BarCodesDic.Post;
                  BarCodesDic.ApplyUpdates;
                end
            end;
        end;
      Mean.NotifyClient('Обработано товаров:' + IntToStr(Count) + '/' + IntToStr(total),Count,total);
      inc(Count);
    end;
 Success := True;
end;

function CancelBarcodesEp: Variant; server;
begin
  Result := EntryPoint(CancelBarcodes);
end;

procedure SetLengthBarCode8(Mean: ISProcessing; var Success: Boolean);
var
  BarCodeDic : IsDictionary;
  i, Total : Integer;
begin
  Constants := GetConstants;
  BarCodeDic := CreateObject('Справочники.ШтрихКодыТоваров');
  BarCodeDic.SetFieldFilter('Активность','=',true,'','',Null);

  BarCodeDic.Select; 
  Total := BarCodeDic.RecordCount;
  i:=1;
  while BarCodeDic.SelectNext do
  begin
    BarCodeDic.Edit;
    while StrLength(VarAsStr(BarCodeDic.Код))<8 do
      BarCodeDic.Код := '0' + VarAsStr(BarCodeDic.Код);
    BarCodeDic.Post;   
    Mean.NotifyClient('Обработано товаров: '+IntToStr(i)+'/'+IntToStr(Total),i,Total);
    inc(i);
  end;

  Constants.ШтрихКодТовараВнутреннийКолСимв := 8;
end;

function SetLengthBarCode8Ep: Variant; server;
begin
  Result := EntryPoint(SetLengthBarCode8);
end;

procedure SetLengthBarCode6(Mean: ISProcessing; var Success: Boolean);
var
  BarCodeDic : IsDictionary;  
  Count : Integer;
  str : String; 
  i, Total : Integer;
begin
  Constants := GetConstants;
  BarCodeDic := CreateObject('Справочники.ШтрихКодыТоваров');
  BarCodeDic.SetFieldFilter('Активность','=',true,'','',Null);

  BarCodeDic.Select;
  Total := BarCodeDic.RecordCount;
  i:=1;
  while BarCodeDic.SelectNext do
  begin
    BarCodeDic.Edit;
    Count :=StrLength(VarAsStr(BarCodeDic.Код));
    if Count>6 then
    begin               
      str := VarAsStr(BarCodeDic.Код);
      StrDelete(str, 1, Count-6); 
      BarCodeDic.Код := str;
    end
    else
      while StrLength(VarAsStr(BarCodeDic.Код))<6 do
        BarCodeDic.Код := '0' + VarAsStr(BarCodeDic.Код);

    BarCodeDic.Post;  
    Mean.NotifyClient('Обработано товаров: '+IntToStr(i)+'/'+IntToStr(Total),i,Total);
    inc(i);
  end;

  Constants.ШтрихКодТовараВнутреннийКолСимв := 6;
end;

function SetLengthBarCode6Ep: Variant; server;
begin
  Result := EntryPoint(SetLengthBarCode6);
end;

procedure FillRound5Cop(Mean : ISProcessing; var Accept : Boolean);
var Jrn : ISJournal;
    Count, Total : integer;
    Doc : ISDocuments;
begin
 Accept := false;
 Jrn := CreateObject('Журналы.ЖурналНакладныхПрихода');
 Jrn.Select;
 Total := Jrn.RecordCount;
 Jrn.Select;
 While Jrn.SelectNext do
   begin
     Doc := Jrn.GetDoc;
     if not VarAsBool(Doc.ПереоценкаОкруг5коп) then
       begin
         Doc.Edit;
         Doc.ПереоценкаОкруг5коп := true;
         Doc.Post;
       end;
     inc(Count);
     if Count mod 10 = 0 then
       begin
         Mean.NotifyClient('',Count,Total);
         If Mean.Terminated then break;
       end;
   end;
 Accept := not Mean.Terminated;
end;

function FillRound5CopEP : Variant; server;
begin
  Result := EntryPoint(FillRound5Cop);
end;

procedure FillInPricesByLastIncome(Mean : ISProcessing; var Accept : Boolean);
var MasterData : ISDictionary;
    Count, Total : integer;
    GoodsAccs : ISAccs;
    tmpTbl : ISValueTable;
    InPrice, Course : Decimal;
    Constants: IS4VPAConst;
    midList : ISValueList;
begin
 Accept := false;
 midList := CreateObject('СписокЗначений');
 midList.AddValue('',midIncome);
 if IncludeInputRest then
   midList.AddValue('',midInputRest);
 LogList.Clear;
 Constants := GetConstants;
 tmpTbl :=  CreateObject('ТаблицаЗначений');
 GoodsAccs := CreateObject('Аккумуляторы.ОстаткиТоваров');
 GoodsAccs.SetFieldFilter('Тип',midList);
 MasterData := CreateObject('Справочники.Товары');
 MasterData.Select;
 Total := MasterData.RecordCount;
 MasterData.Select;
 While MasterData.SelectNext do
   begin
     GoodsAccs.SetFieldFilter('Товар',MasterData);
     GoodsAccs.SaveMotionToValueTable(0,400000,amtIncome,-1,tmpTbl);
     tmpTbl.SortBy('Date');
     if tmpTbl.SelectLast then
       begin
         if VarAsDec(tmpTbl.СумВалВх)=0 then
           While tmpTbl.SelectPrior and (VarAsDec(tmpTbl.СумВалВх)=0) do;
         if IsObjEQ(tmpTbl.@Валюта, MasterData.@ВалютаВхЦена) then
           begin
             InPrice := VarAsDec(tmpTbl.СумВалВх);
             if VarAsDec(tmpTbl.КолОбщ)>0 then
              InPrice := InPrice / VarAsDec(tmpTbl.КолОбщ);
           end
         else
           begin
             InPrice := VarAsDec(tmpTbl.СумОтп);
             if VarAsDec(tmpTbl.КолОбщ)>0 then
              InPrice := InPrice / VarAsDec(tmpTbl.КолОбщ);
             if VarAsBool(MasterData.@ВалютаВхЦена.IsFocused) then
               begin
                 Course := MasterData.ВалютаВхЦена.GetTimedValue(Constants.UsedCurs, VarAsDate(tmpTbl.Date));
                 if Course>0 then
                   InPrice := InPrice / Course;
               end;
           end;
         if VarAsDec(MasterData.ВхЦена)<>RoundDec(InPrice,7) then
           begin
             LogList.AddValue(VarAsStr(MasterData.CodeField)+' '+VarAsStr(MasterData.NameField)+
               ' изменение Вх.Цены с '+FormatFloat('0.######',VarAsDec(MasterData.ВхЦена))+' на '+FormatFloat('0.######',InPrice),0);
             ChangePrice(MasterData, MasterData.ВалютаВхЦена, InPrice, 'ВхЦена', 'Изменение Вх.цен по последенему приходу', 'EditInDoc');
           end;
       end;
     inc(Count);
     if Count mod 10 = 0 then
       begin
         Mean.NotifyClient('Изменение Вх.цен',Count,Total);
         If Mean.Terminated then break;
       end;
   end;
 Accept := not Mean.Terminated;
end;




function FillInPricesByLastIncomeEP(LogLists:ISValueList; IncludeInputRestS:boolean) : Variant; server;
begin
 LogList := LogLists;  
 IncludeInputRest := IncludeInputRestS;
 Result := EntryPoint(FillInPricesByLastIncome);
end;
 


procedure GetFieldCategory(Mean : ISProcessing; var Accept : Boolean);
var GoodDic, CategoryDic : ISDictionary;
    Count, Total : integer;
begin
 Accept := false;
 CategoryDic := CreateObject('Справочники.Товары');
 CategoryDic.IncludeLevels(true);
 CategoryDic.IncludeOnlyLevels(True);
 CategoryDic.Select;
 GoodDic := CreateObject('Справочники.Товары');
 GoodDic.Select;
 Count :=0;
 Total := GoodDic.RecordCount;
 while GoodDic.SelectNext do
   begin
     if IsObjFocused(GoodDic.GetParent) and CategoryDic.Find(GoodDic.GetParent) then
       begin
         GoodDic.Edit;
         GoodDic.Категория := CategoryDic;
         GoodDic.Post;
         GoodDic.ApplyUpdates;
       end;

     inc(count);
     Mean.NotifyClient('Обработано: '+IntToStr(Count)+'/'+IntToStr(Total),Count,Total);
     If Mean.Terminated then break;
   end;
 Accept := not Mean.Terminated;
end;



function GetFieldCategoryEP : Variant; server;
begin
 Result := EntryPoint(GetFieldCategory);
end;

procedure FillPriceFromMargePrecent(Mean : ISProcessing; var Accept : Boolean);
var MasterData, Currency, NatCurrency : ISDictionary;
    Count, Total, i : integer;
    Constants: IS4VPAConst; 
    PriceTypes : string;  
    UsePrice0,UsePrice1,UsePrice2 : boolean;   
    Price, CourseInPrice, CourseOutPrice : Decimal;
    CourseTbl : ISValueTable;
begin
 Accept := false; 
 Constants := GetConstants;
 NatCurrency := CreateObject('Справочники.Валюты');
 if not NatCurrency.FindByField('НацВалюта',True,False) then
   Raise('Не найдена национальная валюта!');
 Currency := CreateObject('Справочники.Валюты');
 CourseTbl := CreateObject('ТаблицаЗначений');
 FillCurrencyCoursesTbl(Currency, CourseTbl, CurrentDateTime);
 UsePrice0 := false;
 UsePrice1 := false;
 UsePrice2 := false;
 PriceTypes := Constants.ТипыЦен;  
 if StrLength(PriceTypes) > 0 then
   for i := 1 to StrLength(PriceTypes) do
     case PriceTypes[i] of
      '0' : UsePrice0 := true;
      '1' : UsePrice1 := true;
      '2' : UsePrice2 := true;
     end;
 MasterData := CreateObject('Справочники.Товары');
 MasterData.Select;
 Total := MasterData.RecordCount; 
 MasterData.SortByCode;
 MasterData.Select;
 While MasterData.SelectNext do
   begin
     if VarAsDec(MasterData.ВхЦена)>0 then
       begin
         if UsePrice0 and (VarAsDec(MasterData.ПрНацЦена)>0) then
           begin
             if IsObjEQ(MasterData.@ВалютаВхЦена,MasterData.@ВалютаЦена) then
               Price := VarAsDec(MasterData.ВхЦена) * (1+VarAsDec(MasterData.ПрНацЦена)/100)
             else
               begin
                if CourseTbl.Locate('Валюта',MasterData.@ВалютаВхЦена) then
                  CourseInPrice := CourseTbl.Курс
                else
                  CourseInPrice := 1;
                if CourseInPrice<=0 then CourseInPrice := 1;
                if CourseTbl.Locate('Валюта',MasterData.@ВалютаЦена) then
                  CourseOutPrice := CourseTbl.Курс
                else
                  CourseOutPrice := 1;
                if CourseOutPrice<=0 then CourseOutPrice := 1;
                Price := VarAsDec(MasterData.ВхЦена)*CourseInPrice/CourseOutPrice * (1+VarAsDec(MasterData.ПрНацЦена)/100);
               end;
             if IsObjEQ(MasterData.@ВалютаЦена, NatCurrency) and VarAsBool(Constants.ОкруглятьЦеныГрн) then
               if VarAsBool(Constants.ОкруглятьЦеныГрнДо5Коп) then
                 Price := RoundTo5Cop(Price)
               else
                 Price := RoundDec(Price,VarAsInt(Constants.ОкруглениеЦенГрн));
             if VarAsDec(MasterData.Цена)<>RoundDec(Price,7) then
               begin
                 LogList.AddValue(VarAsStr(MasterData.CodeField)+' '+VarAsStr(MasterData.NameField)+
                   ' изменение Цены с '+FormatFloat('0.######',VarAsDec(MasterData.Цена))+' на '+FormatFloat('0.######',Price),0);
                 ChangePrice(MasterData, MasterData.ВалютаЦена, Price, 'Цена', 'Пересчет цен по % наценки', 'EditInDoc');
               end;
           end;   
           
         if UsePrice1 and (VarAsDec(MasterData.ПрНацОптЦена)>0) then
           begin
             if IsObjEQ(MasterData.@ВалютаВхЦена,MasterData.@ВалютаОптЦена) then
               Price := VarAsDec(MasterData.ВхЦена) * (1+VarAsDec(MasterData.ПрНацОптЦена)/100)
             else
               begin
                if CourseTbl.Locate('Валюта',MasterData.@ВалютаВхЦена) then
                  CourseInPrice := CourseTbl.Курс
                else
                  CourseInPrice := 1;
                if CourseInPrice<=0 then CourseInPrice := 1;
                if CourseTbl.Locate('Валюта',MasterData.@ВалютаОптЦена) then
                  CourseOutPrice := CourseTbl.Курс
                else
                  CourseOutPrice := 1;
                if CourseOutPrice<=0 then CourseOutPrice := 1;
                Price := VarAsDec(MasterData.ВхЦена)*CourseInPrice/CourseOutPrice * (1+VarAsDec(MasterData.ПрНацОптЦена)/100);
               end;
             if IsObjEQ(MasterData.@ВалютаОптЦена, NatCurrency) and VarAsBool(Constants.ОкруглятьЦеныГрн) then
               if VarAsBool(Constants.ОкруглятьЦеныГрнДо5Коп) then
                 Price := RoundTo5Cop(Price)
               else
                 Price := RoundDec(Price,VarAsInt(Constants.ОкруглениеЦенГрн));
             if VarAsDec(MasterData.ОптЦена)<>RoundDec(Price,7) then
               begin
                 LogList.AddValue(VarAsStr(MasterData.CodeField)+' '+VarAsStr(MasterData.NameField)+
                   ' изменение ОптЦены с '+FormatFloat('0.######',VarAsDec(MasterData.ОптЦена))+' на '+FormatFloat('0.######',Price),0);
                 ChangePrice(MasterData, MasterData.ВалютаОптЦена, Price, 'ОптЦена', 'Пересчет цен по % наценки', 'EditInDoc');
               end;
           end;

         if UsePrice2 and (VarAsDec(MasterData.ПрНацКрОптЦена)>0) then
           begin
             if IsObjEQ(MasterData.@ВалютаВхЦена,MasterData.@ВалютаКрОптЦена) then
               Price := VarAsDec(MasterData.ВхЦена) * (1+VarAsDec(MasterData.ПрНацКрОптЦена)/100)
             else
               begin
                if CourseTbl.Locate('Валюта',MasterData.@ВалютаВхЦена) then
                  CourseInPrice := CourseTbl.Курс
                else
                  CourseInPrice := 1;
                if CourseInPrice<=0 then CourseInPrice := 1;
                if CourseTbl.Locate('Валюта',MasterData.@ВалютаКрОптЦена) then
                  CourseOutPrice := CourseTbl.Курс
                else
                  CourseOutPrice := 1;
                if CourseOutPrice<=0 then CourseOutPrice := 1;
                Price := VarAsDec(MasterData.ВхЦена)*CourseInPrice/CourseOutPrice * (1+VarAsDec(MasterData.ПрНацКрОптЦена)/100);
               end;
             if IsObjEQ(MasterData.@ВалютаКрОптЦена, NatCurrency) and VarAsBool(Constants.ОкруглятьЦеныГрн) then
               if VarAsBool(Constants.ОкруглятьЦеныГрнДо5Коп) then
                 Price := RoundTo5Cop(Price)
               else
                 Price := RoundDec(Price,VarAsInt(Constants.ОкруглениеЦенГрн));
             if VarAsDec(MasterData.КрОптЦена)<>RoundDec(Price,7) then
               begin
                 LogList.AddValue(VarAsStr(MasterData.CodeField)+' '+VarAsStr(MasterData.NameField)+
                   ' изменение КрОптЦены с '+FormatFloat('0.######',VarAsDec(MasterData.КрОптЦена))+' на '+FormatFloat('0.######',Price),0);
                 ChangePrice(MasterData, MasterData.ВалютаКрОптЦена, Price, 'КрОптЦена', 'Пересчет цен по % наценки', 'EditInDoc');
               end;
           end;

       end
     else
       LogList.AddValue(VarAsStr(MasterData.CodeField)+' '+VarAsStr(MasterData.NameField)+' Вх.Цена = 0',0);  

     inc(Count);
     if Count mod 10 = 0 then
       begin
         Mean.NotifyClient('Пересчет цен',Count,Total);
         If Mean.Terminated then break;
       end;
   end;


 Accept := not Mean.Terminated;
end;

function FillPriceFromMargePrecentEP(LogLists:ISValueList) : Variant; server;
begin
 LogList := LogLists;  
 Result := EntryPoint(FillPriceFromMargePrecent);
end;

procedure FillIdentificator(Mean: ISProcessing; var Success: Boolean);
const DocsMean = 'Чек;АктНаОказаниеУслуг;АктНаПолучениеУслуг;ВводОстатков;ВозвратОтПокупателей;ВозвратПоставщикам;ДокументИзменВхЦен;КорректировкаОстаткаТовара;НакладнаяВнутрПеремещ;НакладнаяПрихода;РевизионныйЛисток;РевизияТовара;СписаниеТовара;ВводОстНаРеал;ВводОстатковТМЦПоСчету;ВозвратТМЦ;НакладнаяОтпуска;НакладнаяОтпускаПоСчету;НакладнаяОтпускаТМЦПоСчету;НакладнаяПриходаПоСчету;СчетНаОказаниеУслуг;СчетНаПродажу';
var
  DocChange : ISDocuments;
  i, j, Total : Integer;
  TypeDoc : String;
begin
  for i := 1 to WordCount(DocsMean,';') do
    begin
      TypeDoc := ExtractWord(i, DocsMean, ';');
      if not CheckObjectExists('Документы.'+TypeDoc) then
        continue;
      DocChange := CreateObject('Документы.'+TypeDoc);
      //DocChange.SetFieldFilter('UniqID','=',0,'','',Null);
      DocChange.Select;
      j := 0;
      while DocChange.SelectNext do
        begin
          ChangeDoc(clmtRegister, DocChange, DocChange.GetDate);

          if j mod 10 = 0 then
            begin
              Mean.NotifyClientEx(2,'Изменено документов "' + TypeDoc +  '" ' +IntToStr(j),0,0);
              if Mean.Terminated then exit;
            end;
          inc(j);
        end;
      nil(DocChange);
        end;
  Mean.NotifyClientEx(1,'Обработано ' + IntToStr(i) + ' типов документов',1,WordCount(DocsMean,';'));

end;

function FillIdentificatorS: Variant; server;
begin
  Result := EntryPoint(FillIdentificator);
end;

end.
