interface

uses
  System, DispIntf, ConstNames, РаботаСПеременными, РаботаСОбъектами,
  РаботаСКомпонентамиVCL, Пользователи;

implementation

var
  Regions, MasterData : ICDictionary;
  UseLevels : Boolean;
  Opt : ICOptions;
  RegionsList : ICValueList;  
  ActiveRegion : ICDictionary; 
  FieldName : string;

procedure MDS_VPABeforeOpen(Sender : TObject);   
begin
  MasterData := MDS.GetMean;    
  Masterdata.SetFieldFilter('ПометкаУдаление','<>',-1,'','',Null);
  if IsNil(Opt) then
    Opt := CreateObject('ОпцииКлиента');
  UseLevels := VarAsBool(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption));      
end;

procedure MDS_VPAAfterScroll(Sender : TObject);
begin
  MasterData.InteractiveUseLevels := UseLevels;
end;

procedure pmiDontUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := False;
end;

procedure pmiUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := True;
end;

procedure Form_Close(Sender : TObject);
begin
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption, UseLevels);
end;

procedure Form_Open(Sender : TObject);
begin
  MasterData.Params[prmInterfaceType] := itSelectForm;
  MakeStandartInterface(MasterData, Form, '', '');
end;

procedure miPrint_Click(Sender : TObject);
begin
  MasterData.PrintForm('', False, 0, Null);
end;

procedure miRefresh_Click(Sender : TObject);
begin
  MasterData.Refresh;
end;

procedure eRegion_Change(Sender: TObject);
begin
  if RegionsList.CurIndex > 0 then
    begin
      MasterData.CancelFieldFilter('Регион');
      MasterData.SetFieldFilter('Регион','=',RegionsList.GetValue(RegionsList.CurIndex),'','',null);
    end
   else
     MasterData.CancelFieldFilter('Регион');
  MasterData.Refresh;
end;

procedure Form_Execute(Sender: TObject; Mean: Variant; Params: Variant);
begin
 // LockCalc := True;
  try
    if IsObject(Params) then
      begin
        RegionsList := CreateObject('СписокЗначений');
        Regions := CreateObject('Справочники.Регионы');
        Regions.Select;
        while Regions.SelectNext do
          if Params.Название = Regions.Название then
            RegionsList.AddValue(Regions.Название, Regions);
        RegionsList.UseControl(CtrlToVar(eRegion));
        RegionsList.CurIndex := 0;
        MasterData.CancelFieldFilter('Регион');
        MasterData.SetFieldFilter('Регион','=',RegionsList.GetValue(RegionsList.CurIndex),'','',null);
        MasterData.Refresh;
      end;
  finally
  //  LockCalc := False;
  end;
end;

procedure Form_ExecProc(Self, Caller: Variant; ProcID: string; InParams: Variant; var OutParams: Variant);
begin
  case StrLowerCase(ProcID) of
    'closformdic' : Form.Close; 
    'region' : 
      begin
        RegionsList := CreateObject('СписокЗначений');
        Regions := CreateObject('Справочники.Регионы');
        Regions.Select;
        while Regions.SelectNext do
          if InParams.Название = Regions.Название then
            RegionsList.AddValue(Regions.Название, Regions);
        RegionsList.UseControl(CtrlToVar(eRegion));
        RegionsList.CurIndex := 0;
        MasterData.CancelFieldFilter('Регион');
        MasterData.SetFieldFilter('Регион','=',RegionsList.GetValue(RegionsList.CurIndex),'','',null);
        MasterData.Refresh;
      end;
  end;
end;

procedure ePartFilter_KeyDown(Sender: TObject; var Key: Integer);
begin
  FieldName := 'ПолноеНазвание';
  if key=13 then
    begin
      MasterData.SetFieldFilter(FieldName,'Like', '%' + ePartFilter.Text + '%','','',Null);
      MasterData.Refresh;
      form.ActiveControl := dbgData;
    end;
end;

procedure tbFilterApply_Click(Sender: TObject);
begin
  FieldName := 'ПолноеНазвание';
  MasterData.SetFieldFilter(FieldName,'Like', '%' + ePartFilter.Text + '%','','',Null);
  MasterData.Refresh;
  form.ActiveControl := dbgData;
end;

procedure tbGoodsFilterClear_Click(Sender: TObject);
begin
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  ePartFilter.Text := '';
end;

{$D-}
procedure dbgData_GetImageIndex(Sender: TObject; var Index1, Index2: integer);
begin
  if MasterData.IsFocused then
    begin
      if VarAsBool(MasterData.ПометкаУдаление) then
       Index1 := 51;
    end;
end;
{$D+}

procedure miAllGoods_Click(Sender: TObject);
begin
 (Sender as TO4MenuItem).Checked := true;
 case (Sender as TO4MenuItem).Tag of
  0: MasterData.CancelFieldFilter('ПометкаУдаление');
  1: Masterdata.SetFieldFilter('ПометкаУдаление','=',-1,'','',Null);
  2: Masterdata.SetFieldFilter('ПометкаУдаление','<>',-1,'','',Null);
 end;
 Masterdata.Refresh;
end;

procedure tbGoodToDel_Click(Sender: TObject);
var x,y : integer;
begin
 tbGoodToDel.GetScreenPos(x,y);
 pmGoodsToDel.Popup(x,y+tbGoodToDel.Height);
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
Splitter1:TO4Splitter
dbtCtg:TO4DBTreeView
BottomPanel:TO4Panel
ButtonPanel:TO4Panel
btOK:TO4Button
btCancel:TO4Button
Panel3:TO4Panel
dbgData:TO4DBGrid
pFilter:TO4Panel
CodePanel:TO4Panel
Label1:TO4Label
ePartFilter:TO4Edit
ToolBar1:TO4ToolBar
tbFilterApply:TO4ToolButton
ToolButton4:TO4ToolButton
tbGoodsFilterClear:TO4ToolButton
Panel1:TO4Panel
Panel2:TO4Panel
Label2:TO4Label
eRegion:TO4Edit
ToolBar2:TO4ToolBar
tbGoodToDel:TO4ToolButton
MDS:TO4DataSource
pmData:TO4PopupMenu
miAdd:TO4MenuItem
miEdit:TO4MenuItem
miDelete:TO4MenuItem
miDelimiter1:TO4MenuItem
miPrint:TO4MenuItem
miDelimiter2:TO4MenuItem
miSort:TO4MenuItem
miDelimiter3:TO4MenuItem
miRefresh:TO4MenuItem
miSettings:TO4MenuItem
pmCtg:TO4PopupMenu
pmiAddLevel:TO4MenuItem
pmiAddSubLevel:TO4MenuItem
pmiEditLevel:TO4MenuItem
pmiDelLevel:TO4MenuItem
MenuItem4:TO4MenuItem
pmiUseLevel:TO4MenuItem
pmiDontUseLevel:TO4MenuItem
pmiUseNoLevel:TO4MenuItem
pmGoodsToDel:TO4PopupMenu
miAllGoods:TO4MenuItem
miGoodsToDel:TO4MenuItem
miWithoutGoodsToDel:TO4MenuItem
