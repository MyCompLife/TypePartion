interface

uses
  System, DispIntf;

Function JavaScriptFunctions:OleVariant;
Function SendHttpQuery(Host, Proced, QueryStr : String; user, password : string=''; HeadParamLst : Variant = ''; TypeQuery : String = 'POST'):Variant;
Function ConvertDateToUnixTimestamp(Date : DateTime; TimeZone : Integer =0 ):LargeInt;
Function ConvertUnixTimestampToDate(DateTimestamp : String; TimeZone : Integer =0  ):DateTime;
Function GetUnicodeByStr(Data : String):String;
Function GetHexHmacSha256Str(Key,Data : String): String;  // Кодировать строку в HexHmacSha256 по заданому ключу
Function GetBase64Str(Data : String): String; // Кодировать строку в Base64

//============================== JSon-Парсер ====================================================
Function ListToJSonStr( ParamsList : ISValueList; UseKSort : Boolean = False;ConvertToUnicode : Boolean = true): String;

Function GetJSonEncodedObject(Data : String) : OleVariant; // Получить JSon - Масив
Function GetJSonElementOfArray(Array : OleVariant; Index : Integer) : OleVAriant; // Получить елемент JSon-Масива
Function GetJSonKeyByIndex(Object : OleVariant; Index : Integer) : String;  // Получить ключ пары по индексу
Function GetJSonValueByKey(Object : OleVariant; Key : String) : VAriant; // Получить значение пары по ключу
Function GetJSonSize(Object : OleVariant) : Integer;  // Получить размер объекта (количество пар в нём)
Function GetJSonTypeOfElement(Element : OleVariant) : String; // Получить тип объекта (number, string, object, array)



implementation

Function JavaScriptFunctions:OleVariant;
Var
  CodeControl : String;
begin
  CodeControl :=
               'var hexcase = 0;'+
               'var b64pad  = "=";'+
               ''+
               'function hex_sha256(s)    { return rstr2hex(rstr_sha256(str2rstr_utf8(s))); }'+
               'function b64_sha256(s)    { return StrToBase64(rstr_sha256(str2rstr_utf8(s))); }'+
               'function any_sha256(s, e) { return rstr2any(rstr_sha256(str2rstr_utf8(s)), e); }'+
               'function hex_hmac_sha256(k, d)  { return rstr2hex(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d))); }'+
               'function b64_hmac_sha256(k, d)  { return StrToBase64(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d))); }'+
               'function any_hmac_sha256(k, d, e)  { return rstr2any(rstr_hmac_sha256(str2rstr_utf8(k), str2rstr_utf8(d)), e); }'+
               ''+
               'function sha256_vm_test()'+
               '{'+
               '  return hex_sha256("abc").toLowerCase() == "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad";'+
               '}'+

               'function rstr_sha256(s)'+
               '{'+
               '  return binb2rstr(binb_sha256(rstr2binb(s), s.length * 8));'+
               '}'+

               'function rstr_hmac_sha256(key, data)'+
               '{'+
               '  var bkey = rstr2binb(key);'+
               '  if(bkey.length > 16) bkey = binb_sha256(bkey, key.length * 8);'+
               '  var ipad = Array(16), opad = Array(16);'+
               '  for(var i = 0; i < 16; i++)'+
               '  {'+
               '    ipad[i] = bkey[i] ^ 0x36363636;'+
               '    opad[i] = bkey[i] ^ 0x5C5C5C5C;'+
               '  }'+

               '  var hash = binb_sha256(ipad.concat(rstr2binb(data)), 512 + data.length * 8);'+
               '  return binb2rstr(binb_sha256(opad.concat(hash), 512 + 256));'+
               '}'+

               
               //  Перевод в hex строку
               'function rstr2hex(input)'+
               '{'+
               '  try { hexcase } catch(e) { hexcase=0; }'+
               '  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";'+
               '  var output = "";'+ 
               '  var x;'+
               '  for(var i = 0; i < input.length; i++)'+
               '  {'+
               '    x = input.charCodeAt(i);'+
               '    output += hex_tab.charAt((x >>> 4) & 0x0F)+  hex_tab.charAt( x        & 0x0F);'+
               '  }'+
               '  return output;'+
               '}'+

              //  Перевод в base-64 строку
               'function  StrToBase64 (input)'+
               '{'+
               '  try { b64pad } catch(e) { b64pad=""; }'+
               '  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=";'+
               '  var output = "";'+
               '  var len = input.length;'+
               '  for(var i = 0; i < len; i += 3)'+
               '  {'+
               '    var triplet = (input.charCodeAt(i) << 16)'+
               '                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)'+
               '                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);'+
               '    for(var j = 0; j < 4; j++)'+
               '    {'+
               '      if(i * 8 + j * 6 > input.length * 8) output += b64pad;'+
               '      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);'+
               '    }'+
               '  }'+
               '  return output;'+
               '}'+
   

               'function rstr2any(input, encoding)'+
               '{'+
               '  var divisor = encoding.length;'+
               '  var remainders = Array();'+
               '  var i, q, x, quotient;'+
               '  var dividend = Array(Math.ceil(input.length / 2));'+
               '  for(i = 0; i < dividend.length; i++)'+
               '  {'+
               '    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);'+
               '  }'+
               '  while(dividend.length > 0)'+
               '  {'+
               '    quotient = Array();'+
               '    x = 0;'+
               '    for(i = 0; i < dividend.length; i++)'+
               '    {'+
               '      x = (x << 16) + dividend[i];'+
               '      q = Math.floor(x / divisor);'+
               '      x -= q * divisor;'+
               '      if(quotient.length > 0 || q > 0)'+
               '        quotient[quotient.length] = q;'+
               '    }'+
               '    remainders[remainders.length] = x;'+
               '    dividend = quotient;'+
               '  }'+
               '  var output = "";'+
               '  for(i = remainders.length - 1; i >= 0; i--)'+
               '    output += encoding.charAt(remainders[i]);'+
               '  var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));'+
               '  for(i = output.length; i < full_length; i++)'+
               '    output = encoding[0] + output;'+
               '  return output;'+
               '}'+
     

               'function str2rstr_utf8(input)'+
               '{'+
               '  var output = "";'+
               '  var i = -1;'+
               '  var x, y;'+
               '  while(++i < input.length)'+
               '  {'+
               '    x = input.charCodeAt(i);'+
               '    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;'+
               '    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)'+
               '    {'+
               '      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);'+
               '      i++;'+
               '    }'+
               '    if(x <= 0x7F)'+
               '      output += String.fromCharCode(x);'+
               '    else if(x <= 0x7FF)'+
               '      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),0x80 | ( x & 0x3F));'+
               '    else if(x <= 0xFFFF)'+
               '      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),0x80 | ((x >>> 6 ) & 0x3F),0x80 | ( x         & 0x3F));'+
               '    else if(x <= 0x1FFFFF)'+
               '      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),0x80 | ((x >>> 12) & 0x3F),0x80 | ((x >>> 6 ) & 0x3F),0x80 | ( x         & 0x3F));'+
               '  }'+
               '  return output;'+
               '}'+
            
            
               'function str2rstr_utf16le(input)'+
               '{'+
               '  var output = "";'+
               '  for(var i = 0; i < input.length; i++)'+
               '    output += String.fromCharCode( input.charCodeAt(i) & 0xFF,(input.charCodeAt(i) >>> 8) & 0xFF);'+
               '  return output;'+
               '}'+


               'function str2rstr_utf16be(input)'+
               '{'+
               '  var output = "";'+
               '  for(var i = 0; i < input.length; i++)'+
               '    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,input.charCodeAt(i) & 0xFF);'+
               '  return output;'+
               '}'+

 
               'function rstr2binb(input)'+
               '{'+
               '  var output = Array(input.length >> 2);'+
               '  for(var i = 0; i < output.length; i++)'+
               '    output[i] = 0;'+
               '  for(var i = 0; i < input.length * 8; i += 8)'+
               '    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);'+
               '  return output;'+
               '}'+
        

               'function binb2rstr(input)'+
               '{'+
               '  var output = "";'+
               '  for(var i = 0; i < input.length * 32; i += 8)'+
               '    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);'+
               '  return output;'+
               '}'+

             
               'function sha256_S (X, n) {return ( X >>> n ) | (X << (32 - n));}'+
               'function sha256_R (X, n) {return ( X >>> n );}'+
               'function sha256_Ch(x, y, z) {return ((x & y) ^ ((~x) & z));}'+
               'function sha256_Maj(x, y, z) {return ((x & y) ^ (x & z) ^ (y & z));}'+
               'function sha256_Sigma0256(x) {return (sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22));}'+
               'function sha256_Sigma1256(x) {return (sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25));}'+
               'function sha256_Gamma0256(x) {return (sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3));}'+
               'function sha256_Gamma1256(x) {return (sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10));}'+
               'function sha256_Sigma0512(x) {return (sha256_S(x, 28) ^ sha256_S(x, 34) ^ sha256_S(x, 39));}'+
               'function sha256_Sigma1512(x) {return (sha256_S(x, 14) ^ sha256_S(x, 18) ^ sha256_S(x, 41));}'+
               'function sha256_Gamma0512(x) {return (sha256_S(x, 1)  ^ sha256_S(x, 8) ^ sha256_R(x, 7));}'+
               'function sha256_Gamma1512(x) {return (sha256_S(x, 19) ^ sha256_S(x, 61) ^ sha256_R(x, 6));}'+
    
               'var sha256_K = new Array'+
               '('+
               '  1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993,'+
               '  -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987,'+
               '  1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522,'+
               '  264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986,'+
               '  -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585,'+
               '  113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,'+
               '  1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885,'+
               ' -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344,'+
               ' 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,'+
               '  1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872,'+
               '  -1866530822, -1538233109, -1090935817, -965641998'+
               ');'+
       
       
               'function binb_sha256(m, l)'+
               '{'+
               '  var HASH = new Array(1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225);'+
               '  var W = new Array(64);'+
               '  var a, b, c, d, e, f, g, h;'+
               '  var i, j, T1, T2;'+
               '  m[l >> 5] |= 0x80 << (24 - l % 32);'+
               '  m[((l + 64 >> 9) << 4) + 15] = l;'+
               '  for(i = 0; i < m.length; i += 16)'+
               '  {'+
               '    a = HASH[0];'+
               '    b = HASH[1];'+
               '    c = HASH[2];'+
               '    d = HASH[3];'+
               '    e = HASH[4];'+
               '    f = HASH[5];'+
               '    g = HASH[6];'+
               '    h = HASH[7];'+
               '    for(j = 0; j < 64; j++)'+
               '    {'+
               '      if (j < 16) W[j] = m[j + i];'+
               '      else W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),'+
               '                                            sha256_Gamma0256(W[j - 15])), W[j - 16]);'+
               '      T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),'+
               '                                                          sha256_K[j]), W[j]);'+
               '      T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));'+
               '      h = g;'+
               '      g = f;'+
               '      f = e;'+
               '      e = safe_add(d, T1);'+
               '      d = c;'+
               '      c = b;'+
               '      b = a;'+
               '      a = safe_add(T1, T2);'+
               '    }'+
               '    HASH[0] = safe_add(a, HASH[0]);'+
               '    HASH[1] = safe_add(b, HASH[1]);'+
               '    HASH[2] = safe_add(c, HASH[2]);'+
               '    HASH[3] = safe_add(d, HASH[3]);'+
               '    HASH[4] = safe_add(e, HASH[4]);'+
               '    HASH[5] = safe_add(f, HASH[5]);'+
               '    HASH[6] = safe_add(g, HASH[6]);'+
               '    HASH[7] = safe_add(h, HASH[7]);'+
               '  }'+
               '  return HASH;'+
               '}'+
       
       
               'function safe_add (x, y)'+
               '{'+
               '  var lsw = (x & 0xFFFF) + (y & 0xFFFF);'+
               '  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);'+
               '  return (msw << 16) | (lsw & 0xFFFF);'+
               '}'+



//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
               // Преобразовать строку в Unicode-строку
               'function GetUnicodeByStr ( str )'+
               '{'+	
               '  return escape(str ).toLowerCase();'+
       				    '}'+

               // Преобразовать Unicode-строку в строку
               'function GetStrByUnicode ( str )'+
               '{'+	
               '  return unescape(str);'+
       				    '}'+

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// -----------------   Парсер JSon   --------------------------------------
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
               'function parseJSON(strJSON) {'+
                 'var tmpFunc = (new Function(''return(''+strJSON+'');''))  ();'+
                 'return(tmpFunc);'+
               '};'+

               // Получить элемент массива
               'function aGet(Array, index) {'+
                 'return(Array[index]);'+
               '};'+

               // Получить ключ пары по индексу
               'function oKey(Obj, index) {'+
                 'var size = 0, key;'+
                 'for (key in Obj) {'+
                   'if (size == index) break;'+
                   'if (Obj.hasOwnProperty(key)) size++;'+
                 '};'+
                 'return(key);'+
               '};'+

               // Получить значение пары по ключу
               'function oValueByKey(Obj, key) {'+
                 'return(Obj[key]);'+
               '};'+

               //Получить количество пар в объекте
               'Object.size = function(obj) {'+
                 'var size = 0, key;'+
                 'for (key in obj) {'+
                   'if (obj.hasOwnProperty(key)) size++;'+
                 '};'+
                 'return(size);'+
               '};'+

               //Получить размер объекта (количество пар в нём)
               'function oSize(Obj) {'+
                 'return(Object.size(Obj));'+
               '};'+

               // Получить тип объекта (number, string, object, array)
               'function eType(Element) {'+
                 'if (Element instanceof Array) {'+
                    'return("array");'+
                 '} else if (Object.prototype.toString.call(Element) === ''[object Array]'') {'+
                    'return("array");'+
                 '} else {'+
                    'return(typeof(Element));'+
                 '};'+
                '};';


  Result := CreateOleObject('MSScriptControl.ScriptControl');
  Result.language := 'javascript';
  Result.AddCode(CodeControl);
end;
 
function ReplaceOneStrWithAnother(Source, StrFrom, StrTo : string) : string;
var
  Pos : Integer;
begin
  if StrFrom = StrTo then
    begin
      Result := Source;
      exit;
    end;
  Result := '';
  Pos := StrPos(StrFrom, Source);
  while Pos <> 0 do
    begin
      Result := Result + StrCopy(Source, 1, Pos - 1) + StrTo;
      Source := StrCopy(Source, Pos + StrLength(StrFrom), StrLength(Source)); // сэконмлен подсчет третьего параметра - заведомо большее число
      Pos := StrPos(StrFrom, Source);
    end;
  Result := Result + Source; // остаток
end;

Function SendHttpQuery(Host, Proced, QueryStr : String; user, password : string=''; HeadParamLst : Variant = ''; TypeQuery : String = 'POST'):Variant;
var
  oScript, Ret: OleVariant;
  IC, RS, Er, i : Integer;
  statusText, Status, ErrorResultStr : String;
begin
  try
    oScript :=CreateOleObject('MSXML2.XMLHTTP');
//    oScript :=CreateOleObject('MSXML2.ServerXMLHTTP');
    IC := 0;
  except
    IC := 1;
  end;
  if IC = 1 then
    try
      oScript :=CreateOleObject('Microsoft.XMLHTTP');
      IC := 0;
    except
      IC := 1;
    end;
  if IC=0 then
    begin
      Case TypeQuery of
        'POST','DELETE','PUT': oScript.Open(TypeQuery,Host+Proced, false, user, password);
        'GET':                 oScript.Open(TypeQuery,Host+Proced+'?'+QueryStr, false, user, password);
      end;
      try
        if IsObject(HeadParamLst) and VarAsBool(HeadParamLst.IsType('ValueList')) then
          for i :=0 to HeadParamLst.Count-1 do
            if (VarAsStr(HeadParamLst.GetStr(i))<>'') and (VarAsStr(HeadParamLst.GetValue(i))<>'')  then
              oScript.SetRequestHeader (VarAsStr(HeadParamLst.GetStr(i)), VarAsStr(HeadParamLst.GetValue(i)));

        oScript.setRequestHeader('If-Modified-Since', 'Thu, 1 Jan 1970 00:00:00 UTC');
        Case TypeQuery of
          'POST','DELETE','PUT': oScript.Send(''+QueryStr+'');
          'GET':                 oScript.Send();
        end;
        RS := VarAsInt(oScript.readyState);
        if RS=4 then
          begin
            Status:=VarAsStr(oScript.status);
            statusText:=VarAsStr(oScript.statusText);
          end;
      except
        Status:=VarAsStr(oScript.status);
        statusText:=VarAsStr(oScript.statusText);
      end;
      if (RS=4) and (Status='200') then
        Result := oScript.responseText
      else
        begin
          ErrorResultStr := '{"success":false,"Data":{';
          Case Status of
            '12007' : begin
              ErrorResultStr :=  ErrorResultStr + '"status":'+Status;
              ErrorResultStr :=  ErrorResultStr + '"name":"Хост недоступен"';
              ErrorResultStr :=  ErrorResultStr + '"code":0';
              ErrorResultStr :=  ErrorResultStr + '"message":"Указанный хост - '+Host+Proced+' недоступен или указан неверно"';
              ErrorResultStr :=  ErrorResultStr + '}}';
            end;
            '404' : begin
              ErrorResultStr :=  ErrorResultStr + '"status":'+Status;
              ErrorResultStr :=  ErrorResultStr + '"name":"Ошибка"';
              ErrorResultStr :=  ErrorResultStr + '"code":0';
              ErrorResultStr :=  ErrorResultStr + '"message":"'+Host+Proced+' '+ statusText+'"';
              ErrorResultStr :=  ErrorResultStr + '}}';
            end;
            else begin
              ErrorResultStr :=  ErrorResultStr + '"status":'+Status;
              ErrorResultStr :=  ErrorResultStr + '"name":"Ошибка"';
              ErrorResultStr :=  ErrorResultStr + '"code":0';
              ErrorResultStr :=  ErrorResultStr + '"message":"'+statusText+ '->'+oScript.responseText+'"';
              ErrorResultStr :=  ErrorResultStr + '}}';
            end;
          end;
        end;
      oScript.abort;
    End;
End;


Function ConvertDateToUnixTimestamp(Date : DateTime; TimeZone : Integer =0 ):LargeInt;
var
  TimeStamp: LargeInt;
Begin
  TimeStamp := Round((Date - 25569.0) * 86400)-(TimeZone*3600);
  Result := timestamp;
end;

Function ConvertUnixTimestampToDate(DateTimestamp : String; TimeZone : Integer =0  ):DateTime;
var
  TimeStamp: LargeInt;
  Date : DateTime;
Begin
  TimeStamp := StrToInt(DateTimestamp)+(TimeZone*3600);
  Date := (TimeStamp/86400)+25569.0;
  Result := Date;
end;

Function ListToJSonStr( ParamsList : ISValueList; UseKSort : Boolean = False; ConvertToUnicode : Boolean = true): String;
Var
  i,j, RecCount : Integer;
  JSonStr, TmpStr, ArrStr : String;
  Value : Variant;
  CParamsList : ISValueList;
Begin
  CParamsList := CreateObject('ValueLIst');
  for i:=0 to ParamsList.Count-1 do
    CParamsList.AddValue(ParamsList.GetStr(i),ParamsList.GetValue(i));

  if not isnil(CParamsList) and (CParamsList.Count>0) then
    begin
      if UseKSort then
        CParamsList.SortByStr(True);

      JSonStr :='{';
      for i:=0 to CParamsList.Count-1 do
        begin
          JSonStr :=JSonStr+'"'+CParamsList.GetStr(i)+'":';
          Value := CParamsList.GetValue(i);
          if IsArray(Value) then
            begin
              ArrStr :='[';
              for j:=0 to ArrayDimCount(Value)-1 do
                if ConvertToUnicode then
                  begin
                    TmpStr := VarAsStr(Value[j]);
                    if (TmpStr[1]='"') and (TmpStr[StrLength(TmpStr)]='"') then
                      begin
                        TmpStr := StrCopy(TmpStr,2,StrLength(TmpStr)-2);
                        TmpStr := GetUnicodeByStr(TmpStr);
                        TmpStr := '"'+TmpStr+'"';
                      end;
                    ArrStr :=ArrStr+TmpStr+','
                  end
                else
                  ArrStr :=ArrStr+VarAsStr(Value[j])+',';
              StrDelete(ArrStr,StrLength(ArrStr),1);
              ArrStr :=ArrStr+']';
              JSonStr :=JSonStr+ArrStr+',';
            end
          else
            if IsObject(Value) {and (VarAsStr(Value.GetType)='ValueList;СписокЗначений;СписокЗначень')} then
              begin
                JSonStr :=JSonStr+ ListToJSonStr(Value,UseKSort,ConvertToUnicode)+',';
              end
            else
              begin
                if ConvertToUnicode then
                  begin
                    TmpStr := VarAsStr(Value);
                    if (TmpStr[1]='"') and (TmpStr[StrLength(TmpStr)]='"') then
                      begin
                        TmpStr := StrCopy(TmpStr,2,StrLength(TmpStr)-2);
                        TmpStr := GetUnicodeByStr(TmpStr);
                        TmpStr := '"'+TmpStr+'"';
                      end;
                    JSonStr :=JSonStr+TmpStr+','
                  end
                else
                  JSonStr :=JSonStr+VarAsStr(Value)+',';
              end;
        end;
      StrDelete(JSonStr,StrLength(JSonStr),1);
      JSonStr :=JSonStr+'}';
      Result := JSonStr;
    end
  else
    Result :='';
end;

Function GetUnicodeByStr(Data : String):String;Server;
var
  Ret : OleVariant;
Begin
  Ret := JavaScriptFunctions.run('GetUnicodeByStr', Data);
  Ret:= ReplaceOneStrWithAnother(Ret, '%u', '\u');
  Ret:= ReplaceOneStrWithAnother(Ret, '%20', ' ');
  Ret:= ReplaceOneStrWithAnother(Ret, '%22', '"');
  Ret:= ReplaceOneStrWithAnother(Ret, '%28', '(');
  Ret:= ReplaceOneStrWithAnother(Ret, '%29', ')');
  Result := VarAsStr(Ret);
  nil(Ret);
end;


Function GetHexHmacSha256Str(Key,Data : String): String;
begin
  Result := VarAsStr(JavaScriptFunctions.run('hex_hmac_sha256',Key, Data));
end;

Function GetBase64Str(Data : String): String;
begin
  Result := VarAsStr(JavaScriptFunctions.run('StrToBase64',Data));
end;

Function GetJSonEncodedObject(Data : String) : OleVariant;
begin
  Result := JavaScriptFunctions.run('parseJSON',Data);
end;

Function GetJSonElementOfArray(Array : OleVariant; Index : Integer) : OleVAriant;
Begin
  Result := JavaScriptFunctions.run('aGet', Array, Index);
end;

Function GetJSonKeyByIndex(Object : OleVariant; Index : Integer) : String;
Begin
  Result := VarAsStr(JavaScriptFunctions.run('oKey', Object, Index));
end;

Function GetJSonValueByKey(Object : OleVariant; Key : String) : VAriant;
Begin
  Result := JavaScriptFunctions.run('oValueByKey', Object, Key);
end;

Function GetJSonSize(Object : OleVariant) : Integer;
Begin
  Result := VarAsInt(JavaScriptFunctions.run('oSize', Object));
end;

Function GetJSonTypeOfElement(Element : OleVariant) : String;
Begin
  Result := VarAsStr(JavaScriptFunctions.run('eType', Element));
end;


end.
