interface

uses
  System, DispIntf, ConstNames, РаботаСПеременными;

type
  TExportType = T_Enum;
  // TXMLAttributes таблица для хранения значений аттрибутов
  //структура описана в таблице CreateXMLArttributeTable
  // Name:название аттрибута:string30;
  //TXMLAttributes = ISValueTable;

const
  procnmXMLNewNodeRead = 'XMLNewNodeRead';
  XmlWord = 'xml';
  XmlVersionCode1251 = 'version="1.0" encoding="windows-1251"';
  XmlVersionCodeUTF8 = 'version="1.0" encoding="UTF-8"';
  XmlVersionCodeUTF16 = 'version="1.0" encoding="UTF-16"';
  XMLVersion4 = '4.0';
  XMLVersion6 = '6.0';

function LoadXMLFromFile(XMLFile : string) : OLEVariant;
function ReadFromXMLByQuery(OLEXMLDoc : OLEVariant; Query : string;
  XMLFile : string = '') : OLEVariant;
procedure ReadFromXMLByQueryAndProceed(ObjExportNodesInvoker : IObject; XMLFile,
  Query : string; SelfIdentifying : Variant = '');
function CreateXMLArttributeTable : ISValueTable;
procedure WriteAttributesToTable(OLEXMLNode : OLEVariant; TblXMLAttributes : ISValueTable;
  UseCaseSensitive : Boolean = False);
procedure CheckForXMLError(OLEParseError : OLEVariant);
function CreateDOMDocument : OLEVariant;
procedure CreateXMLElement(Doc, ParentObj, ChildObj : OLEVariant; FiledName : string; AttributesArray : Variant);


function CreateDOMDocumentByVersion(Version : String) : OLEVariant;
function ChangeSymbolsForXML(Str : string) : string;
function LoadXMLFromFileByVersion(XMLFile, Version : string) : OLEVariant;

implementation

const
  SupportedVersion = '4.0'; // поддерживается только четвертая версия
  MSXMLDomDocument = 'MSXML2.DOMDocument';
  errSupportedXMLParserNotRegistered = 'Не зарегистрирована в системе поддерживаемая%s' +
    'версия XML-парсера %s';
  errErrorOccuredWhileXMLFileParsed = 'При разборке XML-файла %s на url %s' +
    'возникла ошибка%s' +
    'в позиции %s строки %s';

function CreateDOMDocument : OLEVariant;
begin
  try
    Result := CreateOLEObject(MSXMLDomDocument + '.' + SupportedVersion);
  except
    raise(GetTranslation(errSupportedXMLParserNotRegistered, ArrayOf(#13#10, SupportedVersion)));
  end;
  Result.Async := False;
  Result.ValidateOnParse := False;
end;

procedure CheckForXMLError(OLEParseError : OLEVariant);
begin
  if VarAsInt(OLEParseError.errorCode) <> 0 then
    raise(GetTranslation(errErrorOccuredWhileXMLFileParsed,
      ArrayOf(OLEParseError.SrcText, OLEParseError.URL + #13#10, #13#10 + OLEParseError.Reason + #13#10,
      IntToStr(OLEParseError.LinePos), IntToStr(OLEParseError.Line))));
end;

function LoadXMLFromFile(XMLFile : string) : OLEVariant;
var
  OLEParseError : OLEVariant;
begin
  Result := CreateDOMDocument;
  Result.Load(XMLFile);
  CheckForXMLError(Result.ParseError);
end;

procedure WriteToXML(ObjExportNodesInvoker : IObject; ExportType : TExportType;
  ExportSchema : Variant);
begin

end;

function ReadFromXMLByQuery(OLEXMLDoc : OLEVariant; Query : string;
  XMLFile : string = '') : OLEVariant;
begin
  if IsNil(OLEXMLDoc) then
    OLEXMLDoc := LoadXMLFromFile(XMLFile);
  Result := OLEXMLDoc.SelectNodes(Query);
end;

procedure ReadFromXMLByQueryAndProceed(ObjExportNodesInvoker : IObject; XMLFile,
  Query : string; SelfIdentifying : Variant = '');
var
  OLEXMLSelectedNodes : OLEVariant;
  i : Integer;
begin
  OLEXMLSelectedNodes := ReadFromXMLByQuery(XMLFile, Query);
  for i := 0 to OLEXMLSelectedNodes.Length - 1 do
    ObjExportNodesInvoker.ExecProc(Null, procnmXMLNewNodeRead,
      ArrayOf(SelfIdentifying, OLEXMLSelectedNodes.Items[i]), Null)
end;

procedure ReadSubNodes(ObjExportNodesInvoker : IObject; OLEParentNode : OLEVariant);
var
  OLEXMLSelectedNodes : OLEVariant;
  i : Integer;
begin
  //
end;

function CreateXMLArttributeTable : ISValueTable;
begin
  Result := CreateObject('ValueTable');
  Result.AddColumn('Name', vtcString, 30);
  Result.AddColumn('Value', vtcMemo, 0);
  Result.Open;
  Result.SortBy('Name');
end;

procedure WriteAttributesToTable(OLEXMLNode : OLEVariant; TblXMLAttributes : ISValueTable;
  UseCaseSensitive : Boolean = False);
var
  i : Integer;
  OLEXMLDOMNamedNodeMap, OLEXMLDOMAttribute : OLEVariant;
begin
  OLEXMLDOMNamedNodeMap := OLEXMLNode.Attributes;
  TblXMLAttributes.Clear;
  for i := 0 to OLEXMLDOMNamedNodeMap.Length - 1 do
    begin
      OLEXMLDOMAttribute := OLEXMLDOMNamedNodeMap.Item[i];
      TblXMLAttributes.Append;
      if UseCaseSensitive then
        TblXMLAttributes.Name := OLEXMLDOMAttribute.Name
      else
        TblXMLAttributes.Name := StrUpperCase(OLEXMLDOMAttribute.Name);
      TblXMLAttributes.Value := VarAsStr(OLEXMLDOMAttribute.Value); // пока всегда возвращает string
      TblXMLAttributes.Post;
    end;
end;

procedure CreateXMLElement(Doc, ParentObj, ChildObj : OLEVariant; FiledName : string; AttributesArray : Variant);
var
  i : Integer;
begin
  ChildObj := Doc.CreateElement(FiledName);
  ParentObj.AppendChild(ChildObj);
  for i := 0 to ArrayHigh(AttributesArray) do
    ChildObj.SetAttribute(AttributesArray[i][0], AttributesArray[i][1]);
end;
  
function ChangeSymbolsForXML(Str : string) : string;
begin
  ReplaceOneStrWithAnother(Str, '>', '&gt;');
  ReplaceOneStrWithAnother(Str, '<', '&lt;');
  ReplaceOneStrWithAnother(Str, '"', '&quot;');
  ReplaceOneStrWithAnother(Str, '''', '&apos;');
  ReplaceOneStrWithAnother(Str, '&', '&amp;');
  Result := Str;
end;
 
function CreateDOMDocumentByVersion(Version : String) : OLEVariant;
begin
  try
    Result := CreateOLEObject(MSXMLDomDocument + '.' + Version);
  except
    raise(GetTranslation(errSupportedXMLParserNotRegistered, ArrayOf(#13#10, SupportedVersion)));
  end;
  Result.Async := False;
  Result.ValidateOnParse := False;
end;


function LoadXMLFromFileByVersion(XMLFile, Version : string) : OLEVariant;
var
  OLEParseError : OLEVariant;
begin
  Result := CreateDOMDocumentByVersion(Version);
  Result.Load(XMLFile);
  CheckForXMLError(Result.ParseError);
end;

end.
