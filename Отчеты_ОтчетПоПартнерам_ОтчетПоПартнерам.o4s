interface

uses
  System, DispIntf, –асчеты, ConstNames;

implementation

var
 GoodsTbl, PDocsTbl, PrintPartner, PDocsTypeTbl, PartTbl,PGoodsTbl, Partner : ISValueTable;
 UroPart, ManPart : ISDictionary;
 AccsPart : ISAccs;
 DocsTbl, DocsTypeTbl, tmpDocsTbl : ISValueTable;
 ѕартнер, ¬алюта : Variant;
 DateFrom, DateTo, Date : DateTime;//DateFrom1, DateTo1,
 ShowUroPart, ShowEmplPart, ShowBankPart, HasDet :Boolean;
 OnePartnerV, OneCurrPartner, OneAnalitPartner : Variant;
 ADR,TLF,OneGood, Regions: ISDictionary;
 OneDoc: ISDocuments;
 OnlyDelayPayPart, UseAnalit : Boolean;
 AnalitField : string;

procedure CreateSrvObjects; server;
begin
 AccsPart := CreateObject('јккумул€торы.–асчеты—ѕартнерами');
 UroPart := CreateObject('—правочники.ёрѕартнеры');
 ManPart := CreateObject('—правочники.‘изЋица');
 tmpDocsTbl := CreateObject('ValueTable');
 tmpDocsTbl.Open;
end;

procedure CreatePartTbl(Doc:ISProcessing; var Accept : boolean);
var
 SZ, SU, SM, SE, SA, SB, Res : integer;
 Count, Total : integer;
 tmpTbl, workTbl: ISValueTable;
 i : double;
 SumToPay, SumAccumEnd, SumDocAll : decimal;
 LastNotPayDate, DateFromMotion : DateTime;
 AnalitField : string;
begin
 if UseAnalit then
  AnalitField := ';јналитика¬заиморасчета';
 tmpTbl := CreateObject('ValueTable');
 PartTbl.CopyColumnsTo(tmpTbl);
 if IsObjFocused(Regions) or not ShowUroPart or not ShowBankPart or not ShowEmplPart then
   workTbl := tmpTbl
 else
   workTbl := PartTbl;
 AccsPart.ClearFieldBuffers;
 AccsPart.ClearFieldFilters;
// AccsPart.NotIncludeNullMotionInRest := DateFrom;
 AccsPart.AppendRestToValueTable(DateFrom,'ѕартнер;—умќбщ¬ал;—умќбщ¬ал=—умЌач;—умѕрих¬ал;—ум–асх¬ал;¬алюта'+AnalitField, workTbl);
 AccsPart.AppendRestToValueTable(DateTo,'ѕартнер;—умќбщ¬ал;—умќбщ¬ал=—ум он;—умѕрих¬ал;—ум–асх¬ал;¬алюта'+AnalitField, workTbl);
 workTbl.GroupBy('ѕартнер;¬алюта'+AnalitField,'—умќбщ¬ал;—умЌач;—ум он;—умѕрих¬ал;—ум–асх¬ал');
 workTbl.DoGetMeanNames('ѕартнер','MeanName');
 workTbl.DoGetLinks('–егион=ѕартнер.–егион');
 workTbl.DoGetLinks('—рокќплаты=ѕартнер.—рокќплаты');
 workTbl.DoCalculation('ѕросрочкаќплаты','0');


 if IsObjFocused(Regions) or not ShowUroPart or not ShowBankPart or not ShowEmplPart then
   begin
      if IsObjFocused(Regions) then
        begin
          workTbl.SortBy('–егион;MeanName');
          if ShowUroPart then
            begin
              workTbl.SetRange(ArrayOf(Regions,'—правочник партнеров'),ArrayOf(Regions,'—правочник партнеров'));
              workTbl.AppendTo('',PartTbl);
            end;
          if ShowBankPart then
            begin
              workTbl.SetRange(ArrayOf(Regions,'—правочник банков'),ArrayOf(Regions,'—правочник банков'));
              workTbl.AppendTo('',PartTbl);
            end;
          if ShowEmplPart then
            begin
              workTbl.SetRange(ArrayOf(Regions,'—правочник служащих'),ArrayOf(Regions,'—правочник служащих'));
              workTbl.AppendTo('',PartTbl);
            end;
        end
      else
        begin   
          workTbl.SortBy('MeanName');
          if ShowUroPart then
            begin
              workTbl.SetRange('—правочник партнеров','—правочник партнеров');
              workTbl.AppendTo('',PartTbl);
            end;
          if ShowBankPart then
            begin
              workTbl.SetRange('—правочник банков','—правочник банков');
              workTbl.AppendTo('',PartTbl);
            end;
          if ShowEmplPart then
            begin
              workTbl.SetRange('—правочник служащих','—правочник служащих');
              workTbl.AppendTo('',PartTbl);
            end;
        end;  
     tmpTbl.Close;
   end;


  // выборка документов
   AccsPart.ClearFieldBuffers();
   AccsPart.ClearFieldFilters();
   tmpDocsTbl.Clear;
   DocsTbl.CopyColumnsTo(tmpDocsTbl);

   PartTbl.SortBy('ѕартнер;¬алюта'+AnalitField);
   PartTbl.Select;  
   Count := 1;
   Total := PartTbl.LineCount();
   While PartTbl.SelectNext do
    begin
   // если на начало периода у клиента есть долги, анализируем все документы
     if PartTbl.—умЌач<0 then
      DateFromMotion := DateFrom
     else
      DateFromMotion := 0;
    // выбираем из акамул€тора документы
     AccsPart.SetFieldFilter('ѕартнер', PartTbl.@ѕартнер);
     AccsPart.SetFieldFilter('¬алюта', PartTbl.@¬алюта);
     if UseAnalit then
       begin
         if VarAsBool(PartTbl.@јналитика¬заиморасчета.IsFocused) then
           AccsPart.SetFieldFilter('јналитика¬заиморасчета', PartTbl.@јналитика¬заиморасчета)
         else
          AccsPart.SetFieldFilter('јналитика¬заиморасчета', Null);
       end;
     tmpDocsTbl.Clear;
     AccsPart.AppendMotionToValueTable(DateFromMotion, DateTo, amtBoth,
      'ѕартнер;¬алюта;Date;Document;—умќбщ¬ал;MotionSign'+AnalitField, -1, tmpDocsTbl);
     tmpDocsTbl.SortBy('ѕартнер;¬алюта;-Date;Document');
     tmpDocsTbl.DoCalculation('—умќбщ¬ал','MotionSign*—умќбщ¬ал');
     tmpDocsTbl.GroupBy('ѕартнер;¬алюта;Document;Date'+AnalitField, '—умќбщ¬ал');
     tmpDocsTbl.DoCalculation('—ум ќплате','0');

     LastNotPayDate := DateTo;
     SumAccumEnd := PartTbl.—ум он;
     SumToPay := SumAccumEnd;
     tmpDocsTbl.Select();
     // –асчет ƒаты первого не полностю оплаченого документа
     while tmpDocsTbl.SelectNext do
      begin
       tmpDocsTbl.Edit;
       SumAccumEnd := SumAccumEnd - tmpDocsTbl.—умќбщ¬ал;
       tmpDocsTbl.—умЌакоп := SumAccumEnd;
       if tmpDocsTbl.—умќбщ¬ал > 0 then
        begin
        if SumToPay > 0 then
         begin
          SumToPay := SumToPay - tmpDocsTbl.—умќбщ¬ал;
          LastNotPayDate := tmpDocsTbl.Date;
          if SumToPay >= 0 then
           tmpDocsTbl.—ум ќплате := tmpDocsTbl.—умќбщ¬ал
          else
           tmpDocsTbl.—ум ќплате := tmpDocsTbl.—умќбщ¬ал + SumToPay
         end
        end;
       tmpDocsTbl.Post;
     end; // while DocsTbl

       // вычисление просрочки оплаты
       PartTbl.Edit;
       PartTbl.ѕросрочкаќплаты := DateTo - LastNotPayDate - PartTbl.—рокќплаты - 1;
       if PartTbl.ѕросрочкаќплаты < 0 then PartTbl.ѕросрочкаќплаты := 0;
       PartTbl.Post;
       tmpDocsTbl.AppendTo('ѕартнер;¬алюта;Date;Document;MotionSign;DNames;—умќбщ¬ал;—умЌакоп;—ум ќплате'+AnalitField, DocsTbl);
       // отправка сообщени€ клиенту
       if Count mod 10 = 0 then 
         begin
           Doc.NotifyClient(msgProceed, Count, Total);
           if Doc.Terminated then exit;
         end;
       inc(Count);
    end; //while PartTbl

  // ”даление  партнеров без просрочки
  DocsTbl.SortBy('ѕартнер;¬алюта'+AnalitField);
  if OnlyDelayPayPart then
   begin
     Count := 1;
     Total := PartTbl.LineCount();
     PartTbl.SelectFirst();
     While not PartTbl.EOF() do
      begin
       if PartTbl.ѕросрочкаќплаты<=0 then
        begin
         if AnalitField<>'' then
           DocsTbl.SetRange(ArrayOf(PartTbl.@ѕартнер, PartTbl.@¬алюта, PartTbl.@јналитика¬заиморасчета),ArrayOf(PartTbl.@ѕартнер, PartTbl.@¬алюта, PartTbl.@јналитика¬заиморасчета))
         else
           DocsTbl.SetRange(ArrayOf(PartTbl.@ѕартнер, PartTbl.@¬алюта),ArrayOf(PartTbl.@ѕартнер, PartTbl.@¬алюта));
         DocsTbl.Select;
         While DocsTbl.LineCount>0 do DocsTbl.Delete;
         PartTbl.Delete;
        end
       else
        if not PartTbl.Selectnext() then break;

       // отправка сообщени€ клиенту
       if Count mod 10 = 0 then 
         begin
           Doc.NotifyClient(msgProceed, Count, Total);
           if Doc.Terminated then exit;
         end;
       inc(Count);
      end;
   end;


 DocsTbl.DoGetMeanNames('Document', 'DNames');
 DocsTbl.SortBy('Date');
 DocsTbl.SetRange(0,DateFrom-0.00000001);
 DocsTbl.SelectFirst;
 While not DocsTbl.EOF do DocsTbl.Delete;
 DocsTbl.CancelRange;
 DocsTypeTbl.Clear();
 DocsTbl.AppendTo('ѕартнер;¬алюта;Document;Date;—умќбщ¬ал;—умЌакоп;DNames'+AnalitField, DocsTypeTbl);
 DocsTypeTbl.GroupBy('ѕартнер;¬алюта;DNames'+AnalitField,'—умќбщ¬ал;—умЌакоп');
 DocsTypeTbl.SortBy('ѕартнер;¬алюта;DNames'+AnalitField);
 
 DocsTypeTbl.SortBy('—умќбщ¬ал');
 DocsTypeTbl.SetRange(-9999999999999999999.9,-0.01);
 DocsTypeTbl.DoCalculation('—ум–асход','-—умќбщ¬ал');
 DocsTypeTbl.SetRange(0.01,9999999999999999999.9);
 DocsTypeTbl.DoCalculation('—умѕриход','—умќбщ¬ал');
 DocsTypeTbl.CancelRange;
 DocsTypeTbl.SortBy('');

 DocsTbl.SortBy('—умќбщ¬ал');
 DocsTbl.SetRange(-9999999999999999999.9,-0.01);
 DocsTbl.DoCalculation('—ум–асход','-—умќбщ¬ал');
 DocsTbl.SetRange(0.01,9999999999999999999.9);
 DocsTbl.DoCalculation('—умѕриход','—умќбщ¬ал');
 DocsTbl.CancelRange;
 DocsTbl.SortBy('');

 Accept := True;//not Doc.Terminated;
end;




function CreatePartTblEP(PartTbls : ISValueTable; DocsTbls, DocsTypeTbls : ISValueTable;
                          ShowUroParts, ShowEmplParts, ShowBankParts : boolean;
                          DateFroms, DateTos : DateTime; RegionsS: Variant; 
                          OnlyDelayPayParts, UseAnalitS: Boolean) : Variant; server;
begin
 PartTbl := PartTbls;
 DocsTbl := DocsTbls;
 DocsTypeTbl := DocsTypeTbls;
 ShowUroPart := ShowUroParts;
 ShowEmplPart := ShowEmplParts;
 ShowBankPart := ShowBankParts;
 DateFrom := RoundDate(DateFroms, rdDay, false);
 DateTo := RoundDate(DateTos, rdDay, true);
 Regions := RegionsS;
 OnlyDelayPayPart := OnlyDelayPayParts;   
 UseAnalit := UseAnalitS;
 Result := EntryPoint(CreatePartTbl);
end;



procedure LoadPrintTable(Doc:ISProcessing; var Accept : boolean);
var
 PartList:ISValueList;
 Tmp:ISValueTable;
 PlusSum,PrevSum:Decimal;
 i : integer;
begin
  if IsObject(OnePartnerV) and VarAsBool(OnePartnerV.IsFocused) then begin
   PartTbl.SortBy('ѕартнер;¬алюта'+AnalitField);
   if AnalitField<>'' then
     PartTbl.SetRange(ArrayOf(OnePartnerV,OneCurrPartner,OneAnalitPartner),ArrayOf(OnePartnerV,OneCurrPartner,OneAnalitPartner))
   else
     PartTbl.SetRange(ArrayOf(OnePartnerV,OneCurrPartner),ArrayOf(OnePartnerV,OneCurrPartner));
  end;
 PartTbl.AppendTo('ѕартнер;¬алюта;—умќбщ¬ал;—умЌач;—ум он;—ум–асх¬ал;—умѕрих¬ал'+AnalitField,PrintPartner);
 PartTbl.CancelRange;
 PrintPartner.Select();
 Doc.NotifyClient(Trans('ѕросмотр партнеров'), 1, 4);
 while PrintPartner.SelectNext() do
  if VarAsBool(PrintPartner.@ѕартнер.IsFocused) then
   begin
     PrintPartner.Edit();
     if PrintPartner.ѕартнер.GetSign = '–асч—чета' then
       PrintPartner.Ќазвѕартнер := PrintPartner.ѕартнер.Ќомер—чета
     else
       PrintPartner.Ќазвѕартнер := PrintPartner.ѕартнер.ѕолноеЌазвание;
     PrintPartner.Post();
   end;
 PartList:=CreateObject('—писок«начений');
 Tmp := CreateObject('“аблица«начений');
 Tmp.AddColumn('ѕартнер', lftLink,0);
 Tmp.AddColumn('¬алюта', lftLink,0); 
 Tmp.AddColumn('јналитика¬заиморасчета', lftLink,0);
 Tmp.AddColumn('—умќбщ¬ал', lftFFt,4);
 Tmp.AddColumn('—умЌач', lftFFt,4);
 Tmp.AddColumn('—ум он', lftFFt,4);
 Tmp.AddColumn('DocType', lftString, 40);
 Tmp.Open();
 PrintPartner.GroupToList('ѕартнер',PartList);
 AccsPart.ClearFieldFilters();
 PDocsTbl.Clear();

  if IsObjFocused(OnePartnerV) then
    begin
      AccsPart.SetFieldFilter('ѕартнер',OnePartnerV);
      AccsPart.SetFieldFilter('¬алюта',OneCurrPartner);
      if AnalitField<>'' then
        AccsPart.SetFieldFilter('јналитика¬заиморасчета',OneAnalitPartner);
    end
  else
   AccsPart.SetFieldFilter('ѕартнер',PartList);
 Doc.NotifyClient(Trans('ѕросмотр движени€ за период'), 2, 4);
 AccsPart.AppendMotionToValueTable(DateFrom, DateTo, amtBoth,
  'ѕартнер;Document;Date;¬алюта;—умќбщ¬ал;—умќбщ¬ал=—умЌач;—умќбщ¬ал=—ум он;MotionSign'+AnalitField, -1, PDocsTbl); //i, DocsTbl);
 PDocsTbl.DoCalculation('—умќбщ¬ал','MotionSign*—умќбщ¬ал');
 PDocsTbl.DoCalculation('MotionSign','0');
 PDocsTbl.GroupBy('ѕартнер;¬алюта;Document;Date'+AnalitField, '—умќбщ¬ал;—умЌач;—ум он');
 PDocsTbl.SortBy('ѕартнер;¬алюта'+AnalitField+';Date');
 //PDocsTbl.Select();
 PDocsTbl.DoGetMeanNames('Document','DocType');   
 PDocsTbl.DoGetLinks('Ќомерƒокумента=Document.Ќомерƒокумента');
 //while PDocsTbl.SelectNext() do
//  if VarAsBool(PDocsTbl.@Document.IsFocused) then
 //  begin
//     PDocsTbl.Edit();
 //    PDocsTbl.DocType:=PDocsTbl.Document.GetName();
 //    PDocsTbl.Ќомерƒокумента:=PDocsTbl.Document.Ќомерƒокумента;
 //    PDocsTbl.Post();
 //  end;
// PDocsTbl.GroupBy('ѕартнер;DocType;MotionSign','—умќбщ¬ал');
 Doc.NotifyClient(Trans('ѕросмотр документов'), 3, 4);
 PDocsTbl.SortBy('ѕартнер;¬алюта'+AnalitField+';Date');
 if HasDet then
   begin
     PDocsTbl.Select;
     while PDocsTbl.SelectNext do
       begin
         i := 1;
         OneDoc:=PDocsTbl.Document;
         if OneDoc.HasTableField('“овар') and (OneDoc.GetSign <> 'Ќовјвансовыйќтчет') then
           begin
             OneDoc.SelectLines();
             while OneDoc.SelectNextLine do
               begin
                 PGoodsTbl.Append();
                 PGoodsTbl.Ќом—троки := i;
                 PGoodsTbl.AssignFields(' оличество;÷ена',OneDoc);
                 PGoodsTbl.—умма := PGoodsTbl. оличество * PGoodsTbl.÷ена;
                 OneGood:=OneDoc.“овар;
                 if VarAsBool(OneGood.IsFocused) then
                   begin
                     PGoodsTbl. од := OneGood. од;
                     PGoodsTbl.Ќазв“овара := OneGood.Ќазв“овара;
                     if VarAsBool(OneGood.≈д»зм.IsFocused) then
                       PGoodsTbl.≈д»зм := OneGood.≈д»зм.Value;
                   end;
                 PGoodsTbl.Document := OneDoc;
                 PGoodsTbl.ѕартнер := OneDoc.ѕартнер;
                 PGoodsTbl.Post();
                 inc(i);
               end;
          end;
       end;
   end;
 AccsPart.ClearFieldFilters();
 PrintPartner.Select();
 while PrintPartner.SelectNext() do
  if VarAsBool(PrintPartner.@ѕартнер.IsFocused) then
   begin
     if AnalitField<>'' then
       PDocsTbl.SetRange(ArrayOf(PrintPartner.ѕартнер,PrintPartner.@¬алюта, PrintPartner.@јналитика¬заиморасчета),ArrayOf(PrintPartner.ѕартнер,PrintPartner.@¬алюта, PrintPartner.@јналитика¬заиморасчета))
     else
       PDocsTbl.SetRange(ArrayOf(PrintPartner.ѕартнер,PrintPartner.@¬алюта),ArrayOf(PrintPartner.ѕартнер,PrintPartner.@¬алюта));
     PlusSum:=0;
     PrevSum:=0;  
     if AnalitField<>'' then
       AccsPart.CalcGroupRestDirect(DateFrom, ArrayOf(PrintPartner.ѕартнер,PrintPartner.@¬алюта, PrintPartner.@јналитика¬заиморасчета))
     else
       AccsPart.CalcGroupRestDirect(DateFrom, ArrayOf(PrintPartner.ѕартнер,PrintPartner.@¬алюта));
     PrevSum:=AccsPart.—умќбщ¬ал;
     PDocsTbl.Select();
     while PDocsTbl.SelectNext() do begin
       OneDoc := PDocsTbl.Document;
       if PDocsTbl.DocType <> '' then
         begin
          Tmp.Append();
          Tmp.AssignFields('ѕартнер;DocType;¬алюта;—умќбщ¬ал;—умЌач;—ум он'+AnalitField,PDocsTbl);
          Tmp.Post();
         end;
       PDocsTbl.Edit();
       PDocsTbl.—умЌакоп:=PrevSum;
       PrevSum:=PrevSum+PDocsTbl.—умќбщ¬ал;
       PDocsTbl.Post();
     end;
     Tmp.GroupBy('ѕартнер;¬алюта;DocType'+AnalitField,'—умќбщ¬ал;—умЌач;—ум он');
     Tmp.SortBy('ѕартнер;¬алюта'+AnalitField+';DocType');
     Tmp.AppendTo('ѕартнер;¬алюта;DocType;—умќбщ¬ал;—умЌач;—ум он'+AnalitField,PDocsTypeTbl);
     PDocsTypeTbl.GroupBy('ѕартнер;¬алюта;DocType;—умќбщ¬ал'+AnalitField, '');
     Tmp.Clear();
     if PlusSum<>0 then begin
       PDocsTbl.Append();
       PDocsTbl.AssignFields('ѕартнер;¬алюта'+AnalitField,PrintPartner);
       PDocsTbl.—умќбщ¬ал:=PlusSum;
       PDocsTbl.MotionSign:=2;
       PDocsTbl.DocType:=Trans('¬сего');
       PDocsTbl.—умЌакоп:=PrevSum;
       PDocsTbl.Post();
   end;
  end;
end;


function GetLoadPrintTableEP(PrintPartnerS,PDocsTblS,PDocsTypeTblS,PGoodsTblS:ISValueTable;HasDetS: boolean;
                             OnePartnerS, OneCurrPartnerS, OneAnalitPartnerS: Variant; AnalitFieldS:string) : Variant; server;
begin
 HasDet:=HasDetS;
 PrintPartner:=PrintPartnerS;
 PDocsTbl:=PDocsTblS;
 PDocsTypeTbl:=PDocsTypeTblS;
 PGoodsTbl:=PGoodsTblS;
 OnePartnerV:=OnePartnerS;
 OneCurrPartner:=OneCurrPartnerS;  
 OneAnalitPartner := OneAnalitPartnerS;
 AnalitField := AnalitFieldS;
 Result := EntryPoint(LoadPrintTable);
end;

procedure LoadPartAttr(AttrPartTbl:ISValueTable); server;
Var
  OnePart:ISDictionary;
begin
 if IsNil(ADR) then begin
   ADR:=CreateObject('—правочники.јдреса');
   TLF:=CreateObject('—правочники.“елефоны');
 end;
 if AttrPartTbl.LineCount()=0 then begin
   if not IsNil(PrintPartner) then
     PrintPartner.AppendTo('ѕартнер',AttrPartTbl)
 end;
 AttrPartTbl.Select();
 While AttrPartTbl.SelectNext() do begin
   OnePart:=AttrPartTbl.ѕартнер;
   if OnePart.IsFocused then begin
     AttrPartTbl.Edit();
     AttrPartTbl.Ќазвание:=OnePart.ѕолноеЌазвание;//GetPartName(OnePart,1);
     AttrPartTbl.јдрес := GetActiv(ADR,'јдрес',OnePart);
     AttrPartTbl.“елефон := GetActiv(TLF,'Ќомер',OnePart);
     AttrPartTbl.Post();
   end;
 end;
end;   

procedure FillGoodsTbl(Doc : ISReport; var Accept : Boolean);
var
  V : Variant;
  Count, Total : Integer;
begin
  Count := 1;
  Total := GoodsTbl.LineCount();

  GoodsTbl.Select();
  while GoodsTbl.SelectNext() do
    begin
      GoodsTbl.Edit();
      OneGood := GoodsTbl.“овар;
      if VarAsBool(OneGood.IsFocused) then
        begin
          GoodsTbl. од := OneGood. од;
          GoodsTbl.≈д»зм := OneGood.≈д»зм;
        end;
      GoodsTbl.—умма—троки := GoodsTbl. оличество * GoodsTbl.÷ена;
      GoodsTbl.Ќƒ——троки := GetTaxFromBrutto(GoodsTbl.—умма—троки, GoodsTbl.—тавкаЌƒ—);
      GoodsTbl.—умма—трокиЅезЌƒ— := GoodsTbl.—умма—троки - GoodsTbl.Ќƒ——троки;
      GoodsTbl.—умма¬¬алюте—Ќƒ— := GoodsTbl.÷ена¬¬алюте * GoodsTbl. оличество;
      GoodsTbl.Post();
      // отправка сообщени€ клиенту
      if (Total mod Count) = 10 then
        begin
          Doc.NotifyClient(msgProceed + IntToStr(Count) + ':' + IntToStr(Total), Count, Total);
          if Doc.Terminated then
            break;
        end;
      inc(Count);
    end;
  Accept := True; //not Doc.Terminated;
end;


function FillGoodsTblEP(GoodsTbls : ISValueTable) : Variant; server;
begin
  GoodsTbl := GoodsTbls;
  Result := EntryPoint(FillGoodsTbl);
end;

end.
