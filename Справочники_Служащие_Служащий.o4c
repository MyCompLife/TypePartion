interface

uses
  System, DispIntf, ConstNames, InitColors, Расчеты, РаботаСПеременными, РаботаСОбъектами,
  РаботаСТаблицамиЗначений, РаботаСКоллекциями, РаботаСоСправочниками, НумерацияДокументов;

implementation

const
  errWrongIndulgenceFormat = 'Неправильный формат льгот';

var
  MasterData, DetAdr, DetPhone, DetDocument, DetEmail, DetDoc, DetBankAcc : ICDictionary;
  CollectTbl, TblDeductions : ICValueTable;
  Collection, Collection1 : ICCollection;
  LockCalc, ChangeLock : Boolean;
  Constants : IC4VPAConst;
  listPriceType: ICValueList;

function GetTextFromInteger(Codes, Deviation, MinNumber, MaxNumber : Integer) : string;
var
  CodesCounter : Integer;
begin
  Result := '';
  for CodesCounter := MinNumber to MaxNumber do
    if Codes and Bits(CodesCounter) <> 0 then
      Result := Result + ';' + IntToStr(CodesCounter + Deviation);
  if Result <> '' then
    StrDelete(Result, 1, 1);
end;

function GetTextFromIndulgences(Indulgences : Integer) : string;
begin
  Result := GetTextFromInteger(Indulgences, 1, 0, 31);
end;

function GetIntegerFromText(Text, errText : string; Deviation, MinNumber, MaxNumber : Integer) : Integer;
var
  CodesCounter, Code : Integer;
begin
  Result := 0;
  if Text <> '' then
    for CodesCounter := 1 to WordCount(Text, ';') do
      begin
        Code := VarAsInt(ExtractWord(CodesCounter, Text, ';'));
        if (Code < MinNumber) or (Code > MaxNumber) then
          raise(errText);
        Result := Result or Bits(Code - Deviation);
      end;
end;

function GetIndulgencesFromText(Text : string) : Integer;
begin
  Result := GetIntegerFromText(Text, Trans(errWrongIndulgenceFormat), 1, 1, 32);
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
begin
  MasterData := MDS.GetMean;
  Constants := GetConstants;
end;

procedure dbeName_Change(Sender : TObject);
begin
  lbTitle.Caption := SetTitleCaption(ArrayOf(dbeLastName.Text, dbeFirstNames.Text), ' ');
end;

procedure pcLists_Change(Sender : TObject);
begin
  case pcLists.ActivePage.Name of
    'tsPhones' :
      if IsNil(DetPhone) then
        DetPhone := SetDetailDict(MasterData, 'Телефоны', 'ПросмотрТелефонов',
          CtrlToVar(pcLists.ActivePage));
    'tsAdresses' :
      if IsNil(DetAdr) then
        DetAdr := SetDetailDict(MasterData, 'Адреса', 'ПросмотрАдресов',
          CtrlToVar(pcLists.ActivePage));
    'tsDocuments' :
      if IsNil(DetDocument) then
        DetDocument := SetDetailDict(MasterData, 'ЛичДокументы', 'ПросмотрЛичДокументов',
          CtrlToVar(pcLists.ActivePage));
    'tsEmail' :
      if IsNil(DetEmail) then
        DetEmail := SetDetailDict(MasterData, 'Email', 'ПросмотрEmail',
          CtrlToVar(pcLists.ActivePage));
    'tsBankAcc' :
      if IsNil(DetBankAcc) then
        DetBankAcc := SetDetailDict(MasterData, 'РасчСчета', 'ПросмотрРасчСчетов',
          CtrlToVar(pcLists.ActivePage));
  end;
end;

procedure miLoadFromFile_Click(Sender : TObject);
begin
  if Sender = miSaveToFile then
    begin
      if spDlg.Execute then
        iPhoto.SaveToFile(spDlg.FileName)
    end
  else
    if Sender = miLoadFromFile then
      begin
        if opDlg.Execute then
          iPhoto.LoadFromFile(opDlg.FileName)
      end
    else
      if Sender = miCut then
        iPhoto.CutToClipboard()
      else
        if Sender = miCopy then
          iPhoto.CopyToClipboard()
        else
          if Sender = miPaste then
            iPhoto.PasteFromClipboard();
end;

procedure Form_Open(Sender : TObject);   
var 
  PriceTypes: String;
  i: Integer;
begin
  lbTitle.Caption := SetTitleCaption(ArrayOf(dbeLastName.Text, dbeFirstNames.Text), ' ');
  chbBinded.Checked := MasterData.ЖенатЗамужем;
  if MasterData.Пол = 0 then
    rbMan.Checked := True
  else
    rbWoMan.Checked := True;
  if VarAsBool(MasterData.@Образование.IsFocused) then
    edCollect.Text := MasterData.Образование.Value;
  if VarAsBool(MasterData.Должность.IsFocused) then
    edCollect1.Text := MasterData.Должность.Value;
  Collection := CreateObject('Коллекции.ТипОбразования');
  Collection1 := CreateObject('Коллекции.Должности');
  CollectTbl := CreateObject('ТаблицаЗначений');
  CreateCollectionTbl(CollectTbl, Collection);
  while CollectTbl.SelectNext() do
    edCollect.Items.Add(CollectTbl.Comment);
  CreateCollectionTbl(CollectTbl, Collection1);
  while CollectTbl.SelectNext() do
    edCollect1.Items.Add(CollectTbl.Comment);
  chbWork.Checked := not VarAsBool(MasterData.Совместитель);
  cbRetail.Checked := VarAsBool(MasterData.Уволен);
  deRetailData.Visible := cbRetail.Checked;
  Label20.Visible := cbRetail.Checked;
  cbPens.Checked := VarAsBool(MasterData.Пенсионер);
  cbInv.Checked := VarAsBool(MasterData.Инвалид);
  cbTradeUnion.Checked := VarAsBool(MasterData.Профсоюз);
  cbContractWork.Checked := VarAsBool(MasterData.РаботаПоКонтракту);
  edIndulgences.Text := GetTextFromIndulgences(MasterData.ПризнакЛьготПодоход);
  TblDeductions := CreateObject('ТаблицаЗначений');
  TblDeductions.AddColumn('ДоплатыУдержания', vtcLink, 0);
  TblDeductions.AddColumn('Сумма', vtcFft, 2);
  TblDeductions.Open;
  TblDeductions.PackedData := MasterData.ДоплатыУдержания;
  TblDeductions.UseDataSource(CtrlToVar(tvsDeductions));
  cbCitizenOfUkraine.Checked := MasterData.ГражданинУкраины;
  CheckBox1.Checked := MasterData.ВестиТабель;
  cb1.Checked := MasterData.УчетЛицКарта;
  listPriceType := CreateObject('ValueList');
  PriceTypes := Constants.ТипыЦен;
  if StrLength(PriceTypes) > 0 then
    for i:= 1 to StrLength(PriceTypes) do
      case StrToInt(PriceTypes[i]) of
        0: listPriceType.AddValue('Цена',0);
        1: listPriceType.AddValue('ОптЦена',1);
        2: listPriceType.AddValue('КрОптЦена',2);
      end;
  LockCalc := true;

  if listPriceType.Count = 0 then
    begin
      ShowMessage('Укажите типы цен для работы в значенияx важных констант!');
      exit
    end;
  listPriceType.UseControl(ctrlToVar(edPriceType));
  if MasterData.ТипЦены = '' then
    MasterData.ТипЦены := listPriceType.GetStr(0);
  listPriceType.CurIndex := listPriceType.FindByStr(MasterData.ТипЦены);
  LockCalc := false;
end;

procedure chbBinded_Click(Sender : TObject);
begin
  MasterData.ЖенатЗамужем := chbBinded.Checked;
end;

procedure rbManWoman_Click(Sender : TObject);
begin
  if rbMan.Checked then
    MasterData.Пол := 0;
  if rbWoMan.Checked then
    MasterData.Пол := 1;
end;

procedure MDS_Validate(Sender : TObject);
begin
  if (dbeFirstNames.Text = '') then
    MasterData.ПолноеНазвание := dbeLastName.Text
  else
    MasterData.ПолноеНазвание := dbeLastName.Text + ' ' + dbeFirstNames.Text;
  ChangeCollectionField(Collection, MasterData, 'Образование', edCollect.Text);
  ChangeCollectionField(Collection1, MasterData, 'Должность', edCollect1.Text);
  MasterData.ДоплатыУдержания := TblDeductions.PackedData;
  if VarAsInt(MasterData.Код) <> 0 then
    CheckForUnique('Код', 'Код', MasterData, Null);
  if not ПроверитьКодСправочника(MasterData, MasterData.Код) then
   raise('Текущий код выходит за диапазон разрешенных');
end;

procedure chbWork_Click(Sender : TObject);
begin
  if chbWork.Checked then
    MasterData.Совместитель := 0
  else
    MasterData.Совместитель := 1;
end;

procedure MDS_Append(Sender : TObject);
begin
  MasterData.Совместитель := 0;
  MasterData.Уволен := 0;
  MasterData.Пенсионер := 0;
  MasterData.Инвалид := 0;
  MasterData.Профсоюз := 0;
  MasterData.РаботаПоКонтракту := 0;
  MasterData.Валюта := GetNativeCurrency;
  //MasterData.Код := ПолучитьКодДляСправочника(MasterData);
  //MasterData.ТипЦены := 'ОптЦена';
end;

procedure cbPens_Click(Sender : TObject);
begin
  if cbPens.Checked then
    MasterData.Пенсионер := 1
  else
    MasterData.Пенсионер := 0;
end;

procedure cbInv_Click(Sender : TObject);
begin
  if cbInv.Checked then
    MasterData.Инвалид := 1
  else
    MasterData.Инвалид := 0;
end;

//расчет необлагаемого минимума по льготам

function GetUntaxMin(Indulgences, ChildCount, InvChildCount : Integer) : Decimal;
var
  TmpResult : Decimal;
begin
  Result := 0;
  TmpResult := 0;
  if (Indulgences and Bits(1)) = Bits(1) then
    begin
      TmpResult := 1.5;
      if InvChildCount > 1 then
        TmpResult := 1.5 * InvChildCount;
    end;
  if (Indulgences and Bits(3)) = Bits(3) then
    begin
      Result := 1;
      if (ChildCount >= Constants.Дети) then
        Result := ChildCount;
    end;
  if TmpResult > Result then
    Result := TmpResult;
  if ((Indulgences and Bits(0)) = Bits(0)) then
    Result := Result + 1;
end;

procedure MDS_FieldChange(FieldName : string; Value : Variant);
begin
  if ChangeLock then
    exit;
  try
    ChangeLock := True;
    case FieldName of
      'КоличествоДетей' :
        begin
          if Value < 0 then
            MasterData._Default[FieldName] := 0;
          if Value >= Constants.Дети then
            begin
              if MasterData.КолДетейИнвал >= 1 then
                edIndulgences.Text := '1;2'
              else
                edIndulgences.Text := '1;4'
            end
          else
            if MasterData.КолДетейИнвал >= 1 then
              edIndulgences.Text := '1;2'
            else
              edIndulgences.Text := '1';
          MasterData.ПризнакЛьготПодоход := GetIndulgencesFromText(edIndulgences.Text);
          edIndulgences.Text := GetTextFromIndulgences(MasterData.ПризнакЛьготПодоход);
          MasterData.Минимум := GetUntaxMin(MasterData.ПризнакЛьготПодоход,
            MasterData.КоличествоДетей,
            MasterData.КолДетейИнвал);
        end;
      'КолДетейИнвал' :
        begin
          if Value < 0 then
            MasterData._Default[FieldName] := 0;
          if (MasterData.КоличествоДетей < Constants.Дети) then
            begin
              if Value >= 1 then
                edIndulgences.Text := '1;2'
              else
                edIndulgences.Text := '1';
            end
          else
            begin
              if Value >= 1 then
                edIndulgences.Text := '1;2'
              else
                edIndulgences.Text := '1;4';
            end;
          MasterData.ПризнакЛьготПодоход := GetIndulgencesFromText(edIndulgences.Text);
          edIndulgences.Text := GetTextFromIndulgences(MasterData.ПризнакЛьготПодоход);
          MasterData.Минимум := GetUntaxMin(MasterData.ПризнакЛьготПодоход,
            MasterData.КоличествоДетей,
            MasterData.КолДетейИнвал);
        end;
      'ПризнакЛьготПодоход' :
        MasterData.Минимум := GetUntaxMin(MasterData.ПризнакЛьготПодоход,
          MasterData.КоличествоДетей,
          MasterData.КолДетейИнвал);
    end;
  finally
    ChangeLock := False;
  end;
end;

procedure edIndulgences_Exit(Sender : TObject);
begin
  MasterData.ПризнакЛьготПодоход := GetIndulgencesFromText(edIndulgences.Text);
  edIndulgences.Text := GetTextFromIndulgences(MasterData.ПризнакЛьготПодоход);
end;

procedure cbTradeUnion_Click(Sender : TObject);
begin
  if cbTradeUnion.Checked then
    MasterData.Профсоюз := 1
  else
    MasterData.Профсоюз := 0;
end;

procedure tbAdd_Click(Sender : TObject);
begin
  TblDeductions.Append;
  TblDeductions.ДоплатыУдержания := CreateObject('Справочники.ДоплатыУдержания');
  TblDeductions.Сумма := 0;
  TblDeductions.Post;
end;

procedure tbDel_Click(Sender : TObject);
begin
  if TblDeductions.IsFocused then
    TblDeductions.Delete;
end;

procedure tsSalaryOptions_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
  nbSalaryOptions.PageIndex := NewTab;
end;

{$D-}
procedure dbgDeductions_GetImageIndex(Sender : TObject; var Index1, Index2 : Integer);
begin
  if TblDeductions.IsFocused and VarAsBool(TblDeductions.@ДоплатыУдержания.IsFocused) then
    if TblDeductions.ДоплатыУдержания.ВидДоплаты = 0 then
      Index1 := 84
    else
      Index1 := 85;
end;
{$D+}

procedure miDeductions_Click(Sender : TObject);
begin
  //
end;

procedure miCancel_Click(Sender : TObject);
begin
  Form.ModalResult := mrCancel;
end;

procedure cbContractWork_Click(Sender : TObject);
begin
  if cbContractWork.Checked then
    MasterData.РаботаПоКонтракту := 1
  else
    MasterData.РаботаПоКонтракту := 0;
end;

procedure MDS_VPAAfterPost(Sender: TObject);
begin
  MasterData.ApplyUpdates;
end;

procedure cbCitizenOfUkraine_Click(Sender: TObject);
begin
  if cbCitizenOfUkraine.Checked then
    MasterData.ГражданинУкраины := 1
  else
    MasterData.ГражданинУкраины := 0;
end;

procedure CheckBox1_Click(Sender: TObject);
begin
  MasterData.ВестиТабель := CheckBox1.Checked;
end;

procedure cb1_Click(Sender: TObject);
begin
  MasterData.УчетЛицКарта := cb1.Checked;
end;

procedure edPriceType_Change(Sender: TObject);
begin
  if not LockCalc then
    MasterData.ТипЦены := listPriceType.GetStr(listPriceType.CurIndex);
end;


procedure dbeRegion_Change(Sender: TObject);
begin
  if VarAsBool(MasterData.@Регион.IsFocused) then
    MasterData.Код := ПолучитьКодДляСправочника(MasterData);
end;

end.

_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
TitlePanel:TO4Panel
lbTitle:TO4Label
pnMain:TO4Panel
pcLists:TO4PageControl
tsGeneral:TTabSheet
Label3:TO4Label
Label4:TO4Label
Label5:TO4Label
Label21:TO4Label
Label22:TO4Label
Label23:TO4Label
Label24:TO4Label
Label25:TO4Label
Label26:TO4Label
Label28:TO4Label
Label29:TO4Label
deState:TO4DBEdit
dbeLastName:TO4DBEdit
dbeFirstNames:TO4DBEdit
edCollect1:TO4Edit
dbeCode:TO4DBEdit
dbeRegion:TO4DBEdit
CheckBox1:TO4CheckBox
cb1:TO4CheckBox
dbeDiscount:TO4DBEdit
edPriceType:TO4Edit
eCredLimit:TO4DBEdit
ePayDays:TO4DBEdit
Panel1:TO4Panel
Label6:TO4Label
Label2:TO4Label
dbeGetNumberDate:TO4DBEdit
dbeTaxNumber:TO4DBEdit
dbeCurrency:TO4DBEdit
tsPhones:TTabSheet
tsAdresses:TTabSheet
tsBankAcc:TTabSheet
tsDocuments:TTabSheet
tsEmail:TTabSheet
tsPhoto:TTabSheet
iPhoto:TO4DBImage
Panel4:TO4Panel
gpSex:TO4GroupBox
rbMan:TO4RadioButton
rbWoman:TO4RadioButton
chbBinded:TO4CheckBox
gbBirth:TO4GroupBox
Label11:TO4Label
Label12:TO4Label
deBirthDay:TO4DBEdit
deBirthCity:TO4DBEdit
cbCitizenOfUkraine:TO4CheckBox
tsEmploy:TTabSheet
Label7:TO4Label
Label1:TO4Label
Label8:TO4Label
Label9:TO4Label
lbSalaryCreditCard:TO4Label
deTabNum:TO4DBEdit
deHireDate:TO4DBEdit
deGetEduc:TO4DBEdit
edCollect:TO4Edit
deSalaryCreditCard:TO4DBEdit
tsSalary:TTabSheet
tsSalaryOptions:TO4TabSet
nbSalaryOptions:TO4Notebook
Label10:TO4Label
Label13:TO4Label
Label15:TO4Label
Label16:TO4Label
Label14:TO4Label
Label18:TO4Label
Label17:TO4Label
lbLgots:TO4Label
Label19:TO4Label
Label20:TO4Label
deSurviveMinType:TO4DBEdit
deSalary:TO4DBEdit
deTaxAdds:TO4DBEdit
deVocation:TO4DBEdit
deUntaxMin:TO4DBEdit
deChilds:TO4DBEdit
deAliments:TO4DBEdit
edIndulgences:TO4Edit
deInvalChilds:TO4DBEdit
cbRetail:TO4CheckBox
deRetailData:TO4DBEdit
chbWork:TO4CheckBox
cbPens:TO4CheckBox
cbInv:TO4CheckBox
cbTradeUnion:TO4CheckBox
cbContractWork:TO4CheckBox
pnDeductions:TO4Panel
dbgDeductions:TO4DBGrid
tbDeductions:TO4ToolBar
tbAdd:TO4ToolButton
tbDel:TO4ToolButton
tsNotes:TTabSheet
DBMemo1:TO4DBMemo
pnImage:TO4Panel
LinkImage1:TO4LinkImage
pnBottom:TO4Panel
pnButtons:TO4Panel
btOK:TO4Button
btCancel:TO4Button
MDS:TO4DataSource
opDlg:TO4OpenPictureDialog
spDlg:TO4SavePictureDialog
pmPhoto:TO4PopupMenu
miLoadFromFile:TO4MenuItem
miSaveToFile:TO4MenuItem
MenuItem4:TO4MenuItem
miCut:TO4MenuItem
miCopy:TO4MenuItem
miPaste:TO4MenuItem
pmSaveRecord:TO4PopupMenu
miSave:TO4MenuItem
miSaveAdd:TO4MenuItem
MenuItem1:TO4MenuItem
miCancel:TO4MenuItem
tvsDeductions:TO4TableValueSource
pmDeductions:TO4PopupMenu
miDeductions:TO4MenuItem
