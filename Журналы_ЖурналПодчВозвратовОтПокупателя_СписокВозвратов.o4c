interface

uses
  System, DispIntf, ConstNames, »нтерфейс, InitColors, –асчеты, –абота—ѕеременными,
  –абота—ƒокументами¬∆урналах, ѕодключениеƒоп»нтерфейса, –абота—ќбъектами, –абота— омпонентамиVCL,
  ”становка¬ажныхќбъектов, ѕечать»¬ыводЌаЁкран, ѕечать;

implementation

var
  MasterData : ICJournal;
  Constants : IC4VPAConst;
  Options : ICOptions;
  LockCh : Boolean;
  DoRefreshOwner : Boolean;


procedure MDS_VPATimedAfterScroll(Sender : TObject);
begin
  if MasterData.IsFocused then
    tsState.SecondSelect := MasterData.GetDocState + 1
  else
    tsState.SecondSelect := -1;
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
var
  i : Integer;
  Strs : Variant;
begin
  MasterData := MDS.GetMean;
  Constants := GetConstants;
  SetColors(Constants);
  Options := GetOptions;
end;

procedure Form_Open(Sender : TObject);
var
  Nobody : TO4ToolBar; // заглушка на NIL
  i : Integer;
begin
 // MakeInterface(tbrData, Nobody, dbgData);
  for i := 0 to MasterData.StateCount - 1 do
    tsState.Tabs.Add(Trans(MasterData.GetStateName(i)));
  // tsState.TabIndex:=VarAsInt(Options.GetServerPrm(StateOnOpen));
  MasterData.DefineSelectParams(True);
  tsState.TabIndex := MasterData.GetDocStateRange + 1;
  LockCh := True;
end;

procedure tsState_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
  if LockCh then
    begin
      MasterData.SetDocStateRange(NewTab - 1);
      MasterData.Select;
    end;
end;

procedure pmiPrintOne_Click(Sender : TObject);
var
  V : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      V := CreateObject('ќбработки.ѕеч”нивЌакладна€ќтпуска'); //ѕеч”нивЌакладна€ќтпуска
      V.PrintForm('', not VarAsBool(Options.GetServerPrm(DirectPrint)), MasterData.GetDoc())
    end;
end;



procedure pmiPrint_Click(Sender : TObject);
var
  V : ICProcessing;
begin
  V := CreateObject('ќбработки.ѕеч”нив∆урнала');
  V.PrintForm('ѕеч”нив∆урнала—“ипом', not VarAsBool(Options.GetServerPrm(DirectPrint)), MasterData)
    // MasterData.PrintForm('', False, 0, Null)
end;

procedure pmiPrintStore_Click(Sender : TObject);
var
  V : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      V := CreateObject('ќбработки.ѕеч”нивЌаклќтп—клад');
      V.PrintForm('”нивЌаклќтп—клад', not VarAsBool(Options.GetServerPrm(DirectPrint)), MasterData.GetDoc)
    end;
end;

procedure pmiSelect_Click(Sender : TObject);
begin
  MasterData.DefineSelectParams(False);
  tsState.TabIndex := MasterData.GetDocStateRange + 1;
end;

procedure pmiRefresh_Click(Sender : TObject);
begin
  DoRefreshOwner := True;
  MasterData.Refresh;
end;



procedure MDS_VPADataRefreshed(Sender : TObject);
begin
  LockCh := False;
  tsState.TabIndex := MasterData.GetDocStateRange + 1;
  LockCh := True;   

  if DoRefreshOwner then
    try
      if VarAsBool(MasterData.GetOwnerJournal.IsFocused) then
        MasterData.GetOwnerJournal.Refresh;
    finally
      DoRefreshOwner := False;
    end;
end;

procedure DBMemo1_Exit(Sender : TObject);
begin
  ChangeDocFieldByJournalField(MasterData);
end;

procedure miCopyDoc_Click(Sender : TObject);
begin
  AddDocByTemplate(MasterData);
end;

procedure Form_ExecProc(Self, Caller : Variant; ProcID : string; InParams : Variant; var OutParams : Variant);
begin
  case ProcId of
    GetTemplateDocNames :
      if MasterData.GetDocSign <> '¬озвратќтѕокупателей' then
        begin
          OutParams := ArrayOf(dtCancelTemplate);
          ShowMessage(DontMakeCopy);
        end;
  end;
end;

procedure pmiExportExcel_Click(Sender : TObject);
begin
  ExportGoodsDocToExcel(MasterData.GetDoc, dtInvoice);
end; 

{$D-}
procedure dbgData_GetImageIndex(Sender: TObject; var Index1, Index2: integer);
begin
 if MasterData.GetDocState > 0 then
   Index1 := 10
 else
   Index1 := 9;
end;
{$D+}

procedure tbEdit_VPABeforeActionClick(Sender: TObject);
begin
  DoRefreshOwner := True;
end;

procedure miRemovePay_Click(Sender: TObject);
begin
  DoRefreshOwner := True;
  try
    RemoveMasterInDoc(MasterData);
  finally
    DoRefreshOwner := False;
  end;
end;

procedure miLinkPay_Click(Sender: TObject);  
var AccsDocs : ICAccs;
    Doc : ICDocuments;
    Partner : ICDictionary;
begin
  DoRefreshOwner := True; // дл€ Refresh всередине след. процедуры
  try         
    if SetMasterForDoc(MasterData, '¬озвратќтѕокупателей', '¬ыбор¬озврата', MasterData.GetOwnerJournal) then
      if(MasterData.GetOwnerJournal.GetSign = '∆урнал„еков') and (MasterData.GetDocState > 0) then
    begin
      Doc := MasterData.GetDoc;
      AccsDocs := CreateObject('јккумул€торы.–асчетыѕоƒокументам');
      Partner := Doc.ѕартнер;
      AccsDocs.ѕартнер := Partner;
      AccsDocs.—ум–асх¬ал := Doc.—умма¬¬алюте;
      AccsDocs.—умќбщ¬ал := Doc.—умма¬¬алюте;
      AccsDocs.¬алюта := Doc.¬алюта;
      AccsDocs.ƒок := Doc.Owner;
      AccsDocs.Outcome(Doc, Doc.GetDate, 0);
    end;
  finally
    DoRefreshOwner := False;
  end;
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
tbrData:TO4ToolBar
tbAdd:TO4ToolButton
tbEdit:TO4ToolButton
ToolButton1:TO4ToolButton
ToolButton3:TO4ToolButton
tbDelete:TO4ToolButton
tbDelimiter1:TO4ToolButton
tbPrint:TO4ToolButton
tbSelect:TO4ToolButton
tbRefresh:TO4ToolButton
tbParam:TO4ToolButton
dbgData:TO4DBGrid
tsState:TO4TabSet
MDS:TO4DataSource
pmData:TO4PopupMenu
pmiAdd:TO4MenuItem
miCopyDoc:TO4MenuItem
pmiEdit:TO4MenuItem
miUp:TO4MenuItem
miDown:TO4MenuItem
pmiDelete:TO4MenuItem
MenuItem1:TO4MenuItem
miLinkPay:TO4MenuItem
miRemovePay:TO4MenuItem
MenuItem4:TO4MenuItem
pmiPrintOne:TO4MenuItem
pmiPrint:TO4MenuItem
pmiExportExcel:TO4MenuItem
MenuItem2:TO4MenuItem
miSort:TO4MenuItem
pmiSort:TO4MenuItem
MenuItem3:TO4MenuItem
miRefresh:TO4MenuItem
