interface

uses
  System, DispIntf, ConstNames, РаботаСПеременными;

type
  TEditMode = T_Enum;
  TO4Actions = T_Enum;
  To4ActionName = string;

const
  FieldDelimiter = ';';
  DefActiveName = 'Активность';
  DefActiveValue = -1;
  DefInActiveValue = 0;
  // TEditMode(DocMode - раньше) consts
  dmAppend = 0; // TEditMode (DocMode)
  dmEdit = 1; // TEditMode (DocMode)
  dmReadOnly = 3; // TEditMode (DocMode)
  // идентификаторы калькулируемых полей
  epTableCalcFields = 'TableCalcFields';
  epCalcFields = 'CalcFields';
  epServerTableCalcFields = 'ServerTableCalcFields';
  epServerCalcFields = 'ServerCalcFields';
  // сообщение при работе с записями
  msgProceededCountFromTotal = 'Обработано %s из %s';
  DefNotifyStep = 10;
  // описание действий над объектами на сервере
  actNone = 0; //TO4Actions
  actAdd = 1; //TO4Actions
  actEdit = 2; //TO4Actions
  actDel = 3; //TO4Actions
  actStateUp = 4; //TO4Actions
  actStateDown = 5; //TO4Actions
  actAddLevel = 6; //TO4Actions
  actAddSubLevel = 7; //TO4Actions
  actEditLevel = 8; //TO4Actions
  actDelLevel = 9; //TO4Actions
  actDontUseLevel = 10; //TO4Actions
  actUseLevel = 11; //TO4Actions
  actSelect = 12; //TO4Actions
  actSave = 13; //TO4Actions
  actCancel = 14; //TO4Actions
  actUseNoLevel = 15; //TO4Actions
  actGridParam = 16; //TO4Actions
  // название действий над понятиями
  actnNone = ''; //To4ActionName
  actnAdd = 'Добавление'; //To4ActionName
  actnEdit = 'Редактирование'; //To4ActionName
  actnDel = 'Удаление'; //To4ActionName
  actnStateUp = 'Фиксация'; //To4ActionName
  actnStateDown = 'Расфиксация'; //To4ActionName
  actnAddLevel = 'Добавление уровня'; //To4ActionName
  actnAddSubLevel = 'Добавление подуровня'; //To4ActionName
  actnEditLevel = 'Редактирование уровня'; //To4ActionName
  actnDelLevel = 'Удаление уровня'; //To4ActionName
  actnDontUseLevel = 'Не использовать категории'; //To4ActionName
  actnUseLevel = 'Использовать категории'; //To4ActionName
  actnSelect = 'Выбрать'; //To4ActionName
  actnSave = 'Сохранить'; //To4ActionName
  actnCancel = 'Отменить'; //To4ActionName
  actnUseNoLevel = 'Использовать безкатегорные'; //To4ActionName
  actnGridParam = 'Настройка сетки данных'; //To4ActionName

  // ф-ции кэширования
  //******************************************************************************
  // получение прокэшированного обьекта
function GetCachedObject(var LstCachedObjects : ISValueList; ObjTypeSign : string;
  ObjNum : Integer = 1; ParamPrefix : string = '') : IObject;
// установка объекта как прокэшированного
procedure SetCachedObject(var LstCachedObjects : ISValueList; Obj : IObject;
  ObjNum : Integer = 1; TypeLangID : Integer = 2;
  ParamPrefix : string = '');
//******************************************************************************
function IsObjFocused(objCurrent : Variant) : Boolean;
function IsObjNotFocused(objCurrent : Variant) : Boolean;
function GetOptions : ISOptions;
function GetConstants : IS4VPAConst;
function ExtractHumanName(var FIO : string) : string;
// получение активной записи
function GetActiveObject(objCurrent : IObject; ActiveField : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue) : IObject;
// проверка на наличие активной записи
function HasActive(ObjDetRec : IObject; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue; AdditRecFilter : Variant = '') : Boolean;
// сбрасывание активности у всех записей, кроме текущей
function ResetActive(ObjDetRec : IObject; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue; InActiveValue : Variant = DefInActiveValue;
  AdditRecFilter : Variant = '') : Boolean;
// получение активной подчиненной записи
function GetActiveByMaster(objSubord, objMaster : IObject; ActiveValue : Variant = DefActiveValue;
  ActiveFieldName : string = DefActiveName) : Variant;
function GetActiveByMaster2(objSubord, objMaster : IObject; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue) : Variant;
// получение значения поля у активной подчиненной записи
function GetSubordInfoValue(objSubord, objMaster : IObject; ExtendedField : string;
  DefValue : Variant = ''; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue; MasterField : string = 'Партнер';
  LastFieldSuffix : string = '') : Variant;
// получение итеративно "конечного" по Link-полю обьекта
function GetObjectByLinks(ObjCurrent : IObject; LinkField : string) : IObject;
// получение значения "расшиненного поля", т. е. позволяется синтаксис через точку (поле от link-поля)
// получить обобщенное значение поля, допускается Self-значение (Self) и цикл через точку
function GetExtendedFieldValue(ObjSource : IObject; ExtFieldName : string;
  DefValue : Variant = ''; LastFieldSuffix : string = '') : Variant;
function GetEmplByName(EmplName : string) : ISDictionary;
function GetDefaultLinkValue(ObjLink : IObject) : string;
function GetExecProcResult(ObjForExec : IObject; ProcID : string; InParams : Variant = '') : Variant;
function GetObjName(ObjectOrSign : Variant) : string;
function StandartNotification(ObjNotifier : IObject; NotifyMessage : string;
  Count, Total : Integer; Level : Integer = 0;
  NotifyStep : Integer = DefNotifyStep) : Boolean;
function GetObjectType(Obj : IObject; TypeLangID : Integer = 2) : string;
// получение названия действия по его ID
function GetActNameByID(ActID : Integer) : To4ActionName;
// вызов исключительной ситуации, если действие над понятием не будет выполнено
procedure RaiseForNonCompleteAction(actID : Integer; ObjActioned : IObject);

implementation

const
  errActionNotComplete = 'Действие "%s" над записью "%s"%s' +
    'отменено пользователем или возникла ошибка!';

var
  glbConstants : IS4VPAConst;
  glbOptions : ISOptions;
  DicResponsible : ISDictionary;
  TblForLinkValue : ISValueTable; // для получения значения для отображения отображаемого объекта

  // ф-ции кэширования
  //******************************************************************************
  // получение прокэшированного обьекта

function GetCachedObject(var LstCachedObjects : ISValueList; ObjTypeSign : string;
  ObjNum : Integer = 1; ParamPrefix : string = '') : IObject;
begin
  if ParamPrefix = '' then
    ParamPrefix := ObjTypeSign;
  if IsNil(LstCachedObjects) then
    LstCachedObjects := CreateObject('ValueList');
  Result := LstCachedObjects.Params[ObjTypeSign + IntToStr(ObjNum)];
  if IsNil(Result) then
    begin
      Result := CreateObject(ObjTypeSign);
      LstCachedObjects.Params[ParamPrefix + IntToStr(ObjNum)] := Result;
    end;
end;

function GetObjectType(Obj : IObject; TypeLangID : Integer = 2) : string;
begin
  if IsObject(Obj) then
    try
      Result := ExtractWord(TypeLangID, Obj.GetType, ';');
    except
      // коллекции
      Result := ExtractWord(TypeLangID, 'Collections;Коллекции;Колекції', ';');
    end
  else
    Result := '';
end;

// установка объекта как прокэшированного

procedure SetCachedObject(var LstCachedObjects : ISValueList; Obj : IObject;
  ObjNum : Integer = 1; TypeLangID : Integer = 2;
  ParamPrefix : string = '');
var
  ObjTypeSign : string;
begin
  ObjTypeSign := GetObjectType(Obj, TypeLangID);
  try
    ObjTypeSign := ObjTypeSign + '.' + Obj.GetSign;
  except
  end;
  if ParamPrefix = '' then
    ParamPrefix := ObjTypeSign;
  LstCachedObjects.Params[ParamPrefix + IntToStr(ObjNum)] := Obj;
end;
//******************************************************************************

function IsObjFocused(objCurrent : Variant) : Boolean;
begin
  if IsObject(objCurrent) then
    Result := VarAsBool(objCurrent.IsFocused)
  else
    Result := False;
end;

function IsObjNotFocused(objCurrent : Variant) : Boolean;
begin
  Result := IsObject(objCurrent) and not VarAsBool(objCurrent.IsFocused);
end;

function GetOptions : ISOptions;
begin
  if IsNil(glbOptions) then
    glbOptions := CreateObject('ОпцииКлиента');
  Result := glbOptions;
end;

function GetConstants : IS4VPAConst;
begin
  if IsNil(glbConstants) then
    glbConstants := CreateObject('Константы');
  Result := glbConstants;
end;

function ExtractHumanName(var FIO : string) : string; server;
var
  IOPos : Integer;
begin
  IOPos := StrPos(' ', FIO);
  if IOPos > 1 then
    begin
      Result := StrCopy(FIO, IOPos + 1, StrLength(FIO) - IOPos);
      FIO := StrCopy(FIO, 1, IOPos - 1);
    end
  else
    Result := '';
end;

function GetActiveObject(objCurrent : IObject; ActiveField : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue) : IObject;
begin
  if not IsObject(objCurrent) then
    begin
      objCurrent := CreateObject(VarAsStr(objCurrent));
      objCurrent.Select;
    end;
  if VarAsBool(objCurrent.FindByField(ActiveField, ActiveValue, False)) then
    Result := objCurrent
  else
    Result := Null;
end;

procedure AssignSameMaster(ObjDetRec, ObjDetList : IObject);
var
  ObjOwner : IObject;
begin
  case ExtractWord(1, ObjDetRec.GetType, ';') of
    'Dictionaries' :
      ObjOwner := ObjDetRec._GetOwner;
    'Documents' :
      ObjOwner := ObjDetRec.Owner;
  end;
  if VarAsBool(ObjOwner.IsFocused) then
    ObjDetList.UseMaster(ObjOwner);
end;

procedure AssignAdditRecFilter(ObjSource, ObjDest : IObject; AdditRecFilter : Variant = '');
var
  i : Integer;
begin
  if IsArray(AdditRecFilter) then
    for i := ArrayLow(AdditRecFilter) to ArrayHigh(AdditRecFilter) do
      ObjDest.SetFieldFilter(AdditRecFilter[i], '=', ObjSource._Default[AdditRecFilter[i]], '', '', '');
end;

function HasActive(ObjDetRec : IObject; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue; AdditRecFilter : Variant = '') : Boolean; server;
var
  ObjDetList : IObject;
begin
  ObjDetList := CreateObject(ExtractWord(1, ObjDetRec.GetType, ';') + '.' + ObjDetRec.GetSign);
  AssignSameMaster(ObjDetRec, ObjDetList);
  AssignAdditRecFilter(ObjDetRec, ObjDetList, AdditRecFilter);
  ObjDetList.SetFieldFilter(ActiveFieldName, '=', VarAsStr(ActiveValue), '', '', '');
  Result := False;
  if VarAsBool(ObjDetList.Select) then
    while VarAsBool(ObjDetList.SelectNext) do
      if not IsObjEQ(ObjDetRec, ObjDetList) then
        begin
          Result := True;
          break;
        end;
end;

function ResetActive(ObjDetRec : IObject; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue; InActiveValue : Variant = DefInActiveValue;
  AdditRecFilter : Variant = '') : Boolean; server;
var
  ObjDetList : IObject;
begin
  Result := False;
  if IsObjFocused(ObjDetRec) and (ObjDetRec._Default[ActiveFieldName] = ActiveValue) then
    begin
      ObjDetList := CreateObject(ExtractWord(1, ObjDetRec.GetType, ';') + '.' +
        ObjDetRec.GetSign);
      AssignSameMaster(ObjDetRec, ObjDetList);
      AssignAdditRecFilter(ObjDetRec, ObjDetList, AdditRecFilter);
      ObjDetList.SetFieldFilter(ActiveFieldName, '=', VarAsStr(ActiveValue), '', '', '');
      if VarAsBool(ObjDetList.Select) then
        while VarAsBool(ObjDetList.SelectNext) do
          if not IsObjEQ(ObjDetList, ObjDetRec) then
            begin
              ObjDetList.Edit;
              ObjDetList._Default[ActiveFieldName] := InActiveValue;
              ObjDetList.Post;
              ObjDetList.ApplyUpdates;
              //
              Result := True;
            end;
    end;
end;

function GetObjectByLinks(ObjCurrent : IObject; LinkField : string) : IObject;
begin
  while IsObjFocused(ObjCurrent) and VarAsBool(ObjCurrent.HasField(LinkField)) do
    ObjCurrent := ObjCurrent._Default[LinkField];
  if IsObjFocused(ObjCurrent) then
    Result := ObjCurrent
  else
    Result := Null;
end;

function GetActiveByMaster(objSubord, objMaster : IObject; ActiveValue : Variant = DefActiveValue;
  ActiveFieldName : string = DefActiveName) : Variant;
begin
  if IsNil(objSubord) or not IsObjFocused(objMaster) then
    begin
      Result := Null;
      exit;
    end;
  objSubord.UseMasterAndSelect(objMaster);
  Result := GetActiveObject(objSubord, ActiveFieldName, ActiveValue);
end;

// вторая версия получения активной подчиненной записи - переставлены местами параметры 3 и 4

function GetActiveByMaster2(objSubord, objMaster : IObject; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue) : Variant;
begin
  if IsNil(objSubord) or not IsObjFocused(objMaster) then
    begin
      Result := Null;
      exit;
    end;
  objSubord.UseMasterAndSelect(objMaster);
  Result := GetActiveObject(objSubord, ActiveFieldName, ActiveValue);
end;

function GetExtendedFieldValue(ObjSource : IObject; ExtFieldName : string;
  DefValue : Variant = ''; LastFieldSuffix : string = '') : Variant;
var
  i, FieldsCount : Integer;
  FieldName : string;
begin
  if ExtFieldName = 'Self' then
    begin
      if IsObjFocused(ObjSource) then
        Result := ObjSource
      else
        Result := Null;
      exit;
    end;
  FieldsCount := WordCount(ExtFieldName, '.');
  for i := 1 to FieldsCount do
    begin
      FieldName := ExtractWord(i, ExtFieldName, '.');
      if IsObjFocused(ObjSource) and VarAsBool(ObjSource.HasField(FieldName)) then
        begin
          if i = FieldsCount then
            ObjSource := ObjSource._Default[LastFieldSuffix + FieldName]
          else
            ObjSource := ObjSource._Default[FieldName]; // полный объект для ссылок на поля далее
        end
      else
        break;
    end;
  if i > FieldsCount then
    Result := ObjSource
  else
    Result := DefValue;
end;

function GetSubordInfoValue(objSubord, objMaster : IObject; ExtendedField : string;
  DefValue : Variant = ''; ActiveFieldName : string = DefActiveName;
  ActiveValue : Variant = DefActiveValue; MasterField : string = 'Партнер';
  LastFieldSuffix : string = '') : Variant;
begin
  objMaster := GetObjectByLinks(objMaster, MasterField);
  if IsNull(objMaster) then
    begin
      Result := DefValue;
      exit;
    end;
  objSubord := GetActiveByMaster(objSubord, objMaster, ActiveFieldName, ActiveValue);
  if IsNull(objSubord) then
    Result := DefValue
  else
    Result := GetExtendedFieldValue(objSubord, ExtendedField, DefValue, LastFieldSuffix);
end;

function GetEmplByName(EmplName : string) : ISDictionary;
begin
  if IsNil(DicResponsible) then
    DicResponsible := CreateObject('Справочники.Служащие');
  if DicResponsible.FindByField('ПолноеНазвание', EmplName, False) then
    Result := DicResponsible
  else
    Result := Null;
end;

function GetDefaultLinkValue(ObjLink : IObject) : string;
begin
  if IsNil(TblForLinkValue) then
    begin
      TblForLinkValue := CreateObject('ValueTable');
      TblForLinkValue.AddColumn('FLink', vtcLink, 0);
      TblForLinkValue.Open;
    end;
  TblForLinkValue.Append;
  try
    TblForLinkValue.FLink := ObjLink;
    Result := TblForLinkValue.DefValue['FLink'];
  finally
    TblForLinkValue.Cancel;
  end;
end;

function GetExecProcResult(ObjForExec : IObject; ProcID : string; InParams : Variant = '') : Variant;
begin
  Result := Null;
  ObjForExec.ExecProc(Null, ProcID, InParams, Result);
end;

function GetObjName(ObjectOrSign : Variant) : string;
begin
  if IsObject(ObjectOrSign) then
    Result := Trans(ObjectOrSign.GetName)
  else
    Result := Trans(CreateObject(ObjectOrSign).GetName)
end;

function StandartNotification(ObjNotifier : IObject; NotifyMessage : string;
  Count, Total : Integer; Level : Integer = 0;
  NotifyStep : Integer = DefNotifyStep) : Boolean;
begin
  if Count mod NotifyStep = 0 then
    if Level = 0 then
      ObjNotifier.NotifyClient(NotifyMessage, Count, Total)
    else
      ObjNotifier.NotifyClientEx(Level, NotifyMessage, Count, Total);
  Result := not ObjNotifier.Terminated;
end;

function GetActNameByID(ActID : Integer) : To4ActionName;
begin
  case ActID of
    actNone :
      Result := actnNone;
    actAdd :
      Result := actnAdd;
    actEdit :
      Result := actnEdit;
    actDel :
      Result := actnDel;
    actStateUp :
      Result := actnStateUp;
    actStateDown :
      Result := actnStateDown;
    actAddLevel :
      Result := actnAddLevel;
    actAddSubLevel :
      Result := actnAddSubLevel;
    actEditLevel :
      Result := actnEditLevel;
    actDelLevel :
      Result := actnDelLevel;
    actDontUseLevel :
      Result := actnDontUseLevel;
    actUseLevel :
      Result := actnUseLevel;
    actSelect :
      Result := actnSelect;
    actSave :
      Result := actnSave;
    actCancel :
      Result := actnCancel;
    actUseNoLevel :
      Result := actnUseNoLevel;
    actGridParam :
      Result := actnGridParam;
  end;
end;

procedure RaiseForNonCompleteAction(actID : TO4Actions; ObjActioned : IObject);
var
  ObjName : string;
begin
  ObjName := GetDefaultLinkValue(ObjActioned);
  if ObjName = '' then // проблема, если запись не была добавлена: actID=actAdd
    ObjName := Trans(VarAsStr(ObjActioned.GetName));
  raise(GetTranslation(errActionNotComplete, ArrayOf(Trans(GetActNameByID(actID)), ObjName, #13#10)));
end;

end.
