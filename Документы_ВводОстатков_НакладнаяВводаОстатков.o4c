interface

uses
  System, DispIntf, ConstNames, Интерфейс, InitColors, Расчеты, Пользователи,
  НумерацияДокументов, РаботаСДокументамиCL, ДополнительныйФункционал, РаботаСЖурналомИзменений;

implementation

var
  ChangeLock, HasOwner, ScrollLock, DropMode, LockCalc, isSave : Boolean;
  Constants : IC4VPAConst;
  Options : ICOptions;
  MasterData : ICDocuments;
  cvtICalc, GoodTbl : ICValueTable;
  Currency, Store, LinkDict, Units, GoodsFindCode : ICDictionary;
  CursorVis : TCursor;
  AddDoc : Boolean;   

procedure FilltsTable;
begin
 tsTable.Tabs.Clear;
 tsTable.Tabs.Add('Детально');
 tsTable.Tabs.Add('Сгруппировать по товарам');
 if VarAsBool(MasterData.ОзДокОснов) then
   tsTable.Tabs.Add('Документ основание');
 tsTable.TabIndex := 0;
end;

procedure CreateObjects;
begin
  Constants := GetConstants;
  Options := GetOptions;
  Currency := CreateObject('Справочники.Валюты');
  Units := CreateObject('Справочники.Упаковки');
  Store := CreateObject('Справочники.Склады');
  GoodsFindCode := CreateObject('Справочники.Товары');

  GoodTbl := CreateObject('ТаблицаЗначений');
  cvtICalc := CreateObject('ТаблицаЗначений');
end;

procedure CheckControls;
begin
  if MasterData.GetDocState > 0 then
    exit;
  if MasterData.LinesCount() = 0 then
    begin
      eGoodStore.Enabled := False;
      eDetTax.Enabled := False;
      eCountPack.Enabled := False;
      eCurrencyDoc.Enabled := False;
      ePack.Enabled := False;
//      eStore.Enabled := true;
//      eRegion.Enabled := true;
    end
  else
    begin
      eGoodStore.Enabled := True;
      eDetTax.Enabled := True;
      eCountPack.Enabled := True;
      eCurrencyDoc.Enabled := True;
      ePack.Enabled := True;
//      eStore.Enabled := false;
//      eRegion.Enabled := false;
    end;
end;

procedure TableCalcFields(Doc : ICDocuments);
begin
  if lockCalc then
    exit;
  CalcLineSumma(Doc); //находится в модуле Расчёты
end;

procedure CalcFields(Doc : ICDocuments);
begin
  if lockCalc then
    exit;
  GetCalcValSumma(Doc); //находится в модуле Расчёты
end;

procedure CalcLocalDocSumByTableChange;
begin
  try
    DropMode := True;
    ScrollLock := True;
    MasterData.TableAutoCalcFields := False;
    TDS.VPAOnFieldChange.EventName := ''; //блокировка изменения поля в табл. части документа
    MDS.VPAOnFieldChange.EventName := ''; //блокировка изменения поля в шапке документа
    MasterData.SaveTableBookmark;
    MasterData.DisableTableControls;
    CalcDocSimplSumma(MasterData);
  finally   
    MasterData.GotoTablebookmark(True);
    MasterData.EnableTableControls;
    DropMode := False;
    ScrollLock := False;
    MasterData.TableAutoCalcFields := True;
    TDS.VPAOnFieldChange.EventName := 'TDS_FieldChange';
    MDS.VPAOnFieldChange.EventName := 'MDS_FieldChange';

  end;
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
begin
  isSave := false;
  MasterData := MDS.GetMean;
  LockCalc := False;
  CreateObjects;
  edTax.Text := FloatToStr(Constants.ProcentPDV);
  SetColors(Constants);
  MasterData.SetTableOnCalcFields(EntryPoint(TableCalcFields));
  MasterData.SetOnCalcFields(EntryPoint(CalcFields));
  MasterData.SetSrvTableOnCalcFields(server.GetCalcParams);
end;

procedure tbSource_Click(Sender: TObject);
begin
  if not VarAsBool(MasterData.@СкладПр.IsFocused) then
    begin
      ShowMessage('Укажите склад');
      exit;
    end;
  if not VarAsBool(MasterData.@Регион.IsFocused) then
    begin
      ShowMessage('Укажите регион');
      exit;
    end;
  LinkDict := MasterData.OpenDropSource('Справочники.Товары', 'ПросмотрТоваров', 0);
end;

procedure miBrowser_Click(Sender : TObject);
begin
  if not VarAsBool(MasterData.@СкладПр.IsFocused) then
    begin
      ShowMessage('Укажите склад');
      exit;
    end;
  if not VarAsBool(MasterData.@Регион.IsFocused) then
    begin
      ShowMessage('Укажите регион');
      exit;
    end;
  LinkDict := MasterData.OpenDropSource('Справочники.Товары', 'ПросмотрТоваров', (Sender as TO4MenuItem).Tag);
end;

procedure TDS_StartDrop(Source : Variant; var Accept : Boolean);
begin
  if nbList.PageIndex = 0 then
    begin
      LockCalc := True;
      MasterData.UpdateLine(True);
      DropMode := True;
      ScrollLock := True;
      MasterData.DisableTableControls;
      MasterData.TableAutoCalcFields := False;
      CursorVis := WaitCursorStart;
    end
  else
    begin
      Accept := False;
      SetCursor(CursorVis);
    end;
end;

function GetCtgHasPercent(OneGood : ICDictionary) : boolean;
var CtgName : string;
    Child, Ctg : ICDictionary;
begin
  Result := false;
  Child := OneGood;
  Ctg := OneGood.GetParent;
  if Ctg.ПроцентНаценкиПоКатег <> 0 then
     Result := true;
end;

function GetCtgPercent(OneGood : ICDictionary) : variant;
var 
  Child, Ctg : ICDictionary;
begin
  Result := 0;
  Child := OneGood;
  Ctg := OneGood.GetParent;
  if Ctg.ПроцентНаценкиПоКатег <> 0 then
     Result := Ctg.ПроцентНаценкиПоКатег;
end;

procedure TDS_Drop(Source : Variant; var Accept : Boolean);
var
  Count : Decimal;
  s : string;
begin
  if not VarAsBool(MasterData.@СкладПр.IsFocused) then
    begin
      Accept := False;
      ShowMessage('Укажите склад');
      exit;
    end;
  if not VarAsBool(MasterData.@Регион.IsFocused) then
    begin
      Accept := False;
      ShowMessage('Укажите регион');
      exit;
    end;
  if VarAsBool(Source.IsType('ТаблицаЗначений')) then
    begin
      ShowMessage(DontMoveThat);
      Accept := False;
      exit;
    end;
  {
  if not GetCtgHasPercent(Source) then
    begin
      ShowMessage('Не указана категория товара, или % = 0');
      exit;
    end;
  }
  Count := 1;
  S := VarAsStr(Source.NameField);
  Store := MasterData.СкладПр;
  if not VarAsBool(Store.IsFocused) then
    Store := GetAStore(Store);

  //перемещение из справочника товаров
  if not MasterData.FindLineBy('Товар;Склад;Цена', ArrayOf(Source, Store, Source.ВхЦена)) then
    begin
      if cbxCount.Checked or (StdInpDec(inpGoodCount + s, Count) and (Count>0)) then
        AppendGoodIn(MasterData, Null, Source, Store, Units, Count);
    end;
end;

procedure TDS_EndDrop(Source : Variant);
begin
  LockCalc := False;
  SetCursor(CursorVis);  
  MasterData.EnableTableControls;
  CalcLocalDocSumByTableChange;
  MasterData.TableAutoCalcFields := True;
  DropMode := False;
  ScrollLock := False;
end;

procedure TDS_VPAAfterPost(Sender : TObject);
begin
  if not DropMode then
    CalcLocalDocSumByTableChange;
  //CheckControls;
end;

procedure tsTable_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
  nbList.PageIndex := Newtab;
  case NewTab of
    1 :
      begin
        CursorVis := WaitCursorStart;
        GoodTbl.UseDataSource(0);
        MasterData.SaveContents('', GoodTbl);
        GoodTbl.GroupBy('Товар;Код;ЕдИзм', 'Количество;СуммаСтроки;СуммаСтрокиБезНДС;НДССтроки');
        GoodTbl.SortBy('Товар');
        GoodTbl.UseDataSource(CtrlToVar(TVSGood));
        SetGoodTblFormat(GoodTbl);
        SetCursor(CursorVis);
      end;
    2 :
      begin
      end;
  end;
end;

procedure eTransSummaNT_Change(Sender : TObject);
begin
  if ChangeLock or VarAsBool(MasterData.BrowseMode) or DropMode then
    exit;
  MasterData.UpdateRecord(True);
end;

procedure Form_Open(Sender : TObject);
var
  ColumnCnt, ColumnTotal : integer;     
  ColumnsName : string;
begin
  if MasterData.GetDocState > 0 then
    SetReadOnlyForm(Form)
  else
    eRespons.Enabled := GetUDASet('changeresp');
  FilltsTable;
  nbList.PageIndex := 0;
  nbSumms.PageIndex := 0;
  Currency := CreateObject('Справочники.Валюты');
  if not Currency.FindByField('НацВалюта', VarAsInt(True), True) then
    Currency := GetNatCurrency(Currency);
  rgCalcSum.ItemIndex := MasterData.МетодРасчета;
  eRegion.Enabled := not GetUsersBlockedField('БлокировкаВыбораРегиона');
  eStore.Enabled := not GetUsersBlockedField('БлокировкаВыбораСклада');

  Label3.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  eSumma.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  Label15.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  eCurrencyDoc.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  Label19.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  eCourseDoc.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  ToolBar2.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  Label4.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  eSummaV.Visible := not GetUsersBlockedField('НеОтображатьВхСуммы');
  if GetUsersBlockedField('НеОтображатьВхСуммы') then
    begin
      Label18.Left := 51;
      eCnt.Left := 113;
      Label13.Left := 2;
      eSummaOptV.Left := 113;

      tbParam.Visible := false;
      tbrSource.Visible := false;

      dbgListData.AutoAlign := false;
      ColumnTotal := dbgListData.PosColumns.Count;
      for ColumnCnt := ColumnTotal downto 1 do
        dbgListData.PosColumns.Delete(ColumnCnt-1);  
      ColumnsName := 'НомСтроки*№*20|Код*Код товара*50|Товар*Название товара*200|'+
                     'ЕдИзм*Ед. изм.*30|Количество*Кол-во*40|Склад*Склад*100|ОптЦена*Оптовая цена*40';

      ColumnTotal := WordCount(ColumnsName,'|');
      for ColumnCnt := 1 to ColumnTotal do
       begin
         dbgListData.PosColumns.Add;
        (dbgListData.PosColumns.Items[ColumnCnt-1] as TO4GridColumn).O4FieldName := ExtractWord(1, ExtractWord(ColumnCnt, ColumnsName, '|'), '*');
        (dbgListData.PosColumns.Items[ColumnCnt-1] as TO4GridColumn).Title.Caption := ExtractWord(2, ExtractWord(ColumnCnt, ColumnsName, '|'), '*');
        (dbgListData.PosColumns.Items[ColumnCnt-1] as TO4GridColumn).Width := VarAsInt(ExtractWord(3, ExtractWord(ColumnCnt, ColumnsName, '|'), '*'));
       end;

     dbgListData.AutoAlign := true;
    end;
  miFocusedOnCode.ShortCut := GetShortCut;   
  cbxCount.Checked := VarAsBool(Options.GetServerPrm('ШтучныйОтпускТовара ' + MasterData.Getsign));
end;

procedure ePriceNT_Change(Sender : TObject);
begin
  if ChangeLock or VarAsBool(MasterData.BrowseMode) or DropMode then
    exit;
  MasterData.UpdateLine(True);
end;

procedure GoodTDSOutFieldChange(MasterData : ICDocuments; FieldName : string; Value : Variant; var ChangeLock : Boolean; DropMode : Boolean);
begin
  if (not (ChangeLock or DropMode)) and IsObjFocused(MasterData) then
    try
      ChangeLock := True;
      CalcPrices(FieldName, Value, MasterData);
      case StrLowerCase(FieldName) of
        'цена','ценаввалюте','процентнаценкиспр' :
           MasterData.ОптЦена := RoundDec(MasterData.ЦенаВВалюте * (1+(MasterData.ПроцентНаценкиСпр / 100)),2);
        'оптцена' :
          begin
            if MasterData.ЦенаВВалюте <> 0 then
              MasterData.ПроцентНаценкиСпр := RoundDec(AbsD(1 - (VarAsDec(MasterData.ОптЦена) / VarAsDec(MasterData.ЦенаВВалюте))) * 100,2);
          end;
      end;
    finally
      ChangeLock := False
    end
end;

procedure TDS_FieldChange(FieldName : string; Value : Variant);
begin
  isSave := true;
  GoodTDSFieldChange(MasterData, FieldName, Value, ChangeLock, DropMode);
  //GoodTDSOutFieldChange(MasterData, FieldName, Value, ChangeLock, DropMode);
end;


procedure MDS_FieldChange(FieldName : string; Value : Variant);
begin
  isSave := true;
  GoodMDSFieldChange(MasterData, FieldName, Value, ChangeLock);
end;

procedure MDS_Append(Sender : TObject);
begin
  AddDoc := true;
  MasterData.TableAutoCalcFields := False;
  LockCalc := True;
  try
    if not Currency.FindByField('Активность', VarAsInt(True), True) then
      Currency := GetNatCurrency(Currency);
    if Currency.IsFocused then
      begin
        MasterData.Курс := Currency.GetTimedValue(Constants.UsedCurs, MasterData.ДатаДокумента);
        MasterData.Валюта := Currency;
      end;
    MasterData.Партнер := GetEmplByName(GetUserName, eRespons);
    MasterData.Отпуск := 0;
    MasterData.МетодРасчета := VarAsInt(Options.GetServerPrm(CalcSumRule));
    SetDocDefRegonStore(MasterData,'СкладПр');
    MasterData.BaseID := VarAsInt(Constants.КодИБ);
    if MasterData.BaseID = 0 then
      raise('Заполните код информационной базы в значениях важных констант');
  finally
    LockCalc := False;
    MasterData.TableAutoCalcFields := True;
  end;
end;

procedure ePack_ActionExecute(Sender : TObject);
var
  Count : Decimal;
begin
  Count := 1;
  if VarAsBool(Options.GetServerPrm(CountAck)) then
    StdInpDec(inpPackCount, Count);
  MasterData.КоличествоУпаковок := Count;
  MasterData.Количество := MasterData.Упаковка.Количество * MasterData.КоличествоУпаковок;
end;

procedure tsSumms_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
  nbSumms.PageIndex := Newtab;
end;

procedure bCurrency_Click(Sender : TObject);
begin
  ChangeLock := True;
  DropMode := True;
  try
    ChCurrency(MasterData, cvtICalc);
  finally
    ChangeLock := False;
    DropMode := False;
  end;
end;


procedure bCourse_Click(Sender : TObject);
begin
  ChangeLock := True;
  DropMode := True;
  try
    ChCourse(MasterData, cvtICalc);
  finally
    ChangeLock := False;
    DropMode := False;
  end;
end;

procedure miSortByCode_Click(Sender : TObject);
begin
  GoodTbl.SortBy('Код;Товар');
  miSortByCode.Checked := True;
  miSortByName.Checked := False;
end;

procedure miSortByName_Click(Sender : TObject);
begin
  GoodTbl.SortBy('Товар;Код');
  miSortByCode.Checked := False;
  miSortByName.Checked := True;
end;

procedure TDS_VPATimedAfterScroll(Sender : TObject);
begin
  if ScrollLock then
    exit;
  CheckControls;
  if miLinkDict.Checked and not IsNil(LinkDict) then
    LinkDict.Find(MasterData.@Товар);
end;

procedure miLinkDict_Click(Sender : TObject);
begin
  miLinkDict.Checked := not miLinkDict.Checked;
end;

procedure MenuItem6_Click(Sender : TObject);
begin
  TDS_VPAAfterPost(TDS);
end;

procedure btnTax_Click(Sender : TObject);
begin
  DropMode := True;
  ScrollLock := True;
  LockCalc := True;
  MasterData.TableAutoCalcFields := False;
  try
    MasterData.SelectLines;
    while MasterData.SelectNextLine do
      begin
        MasterData.EditLine;
        MasterData.СтавкаНДС := StrToFloat(edTax.Text);
        CalcPrices('СтавкаНДС', Null, MasterData);
        MasterData.PostLine;
      end;
  finally
    DropMode := False;
    ScrollLock := False;
    LockCalc := False;
    MasterData.TableAutoCalcFields := True;
  end;
  CalcLocalDocSumByTableChange;
end;

procedure rgCalcSum_Click(Sender : TObject);
begin
  MasterData.МетодРасчета := rgCalcSum.ItemIndex;
  TDS_VPAAfterPost(TDS);
end;

procedure tbsHeader_Change(Sender: TObject; NewTab: Integer; var AllowChange: Boolean);
begin
  nbHeader.PageIndex := NewTab;
end;

procedure Form_ExecProc(Self, Caller: Variant; ProcID: string; InParams: Variant; var OutParams: Variant);
begin
  case StrLowerCase(ProcID) of
    'startdrop' :
      begin
        LockCalc := True;
        MasterData.UpdateLine(True);
        DropMode := True;
        ScrollLock := True;
        MasterData.DisableTableControls;
        MasterData.TableAutoCalcFields := False;
        CursorVis := WaitCursorStart;
      end;
    'enddrop' :
      TDS_EndDrop(null); 
    'dropfromtable':
      begin
        AppendGoodIn(MasterData, InParams, Null, MasterData.СкладПр, Units, VarAsDec(InParams.Количество));
      end;
  end;
end;

procedure ToolButton3_Click(Sender: TObject);
Var
  Cours : Decimal;
  TblContents : ICValueTable;
begin
  LockCalc := True;
  MasterData.UpdateLine(True);
  DropMode := True;
  ScrollLock := True;
  MasterData.TableAutoCalcFields := False;
  CursorVis := WaitCursorStart;
  Cours := MasterData.Курс;
  StdInpDec('Укажите курс', Cours);
  MasterData.Курс := Cours;
  TblContents := CreateObject('ТаблицаЗначений');
  TblContents.Open;
  MasterData.SaveContents('',TblContents);
  TblContents.CopyDataToServer;
  Server.ChangeTbl(TblContents.SrvMean, MasterData);
  TblContents.CopyDataFromServer;
  MasterData.LoadContents('',TblContents);
  TDS_EndDrop(null);
  MasterData.UpdateRecord(True);
end;


procedure MDS_Validate(Sender: TObject);
begin
  if MasterData.NumID = 0 then
    MasterData.NumID := УстановитьНомерДокумента(MasterData, '');
end;


procedure eStore_ActionClear(Sender: TObject);
var
  TblContents : ICValueTable;
begin
  TblContents := CreateObject('ТаблицаЗначений');
  TblContents.Open;
  MasterData.SaveContents('',TblContents);
  TblContents.Select;
  while TblContents.SelectNext do
    begin
      TblContents.Edit;
      TblContents.Склад := null;
      TblContents.Post;
    end;
  MasterData.LoadContents('',TblContents);
end;

procedure edRegion_Change(Sender: TObject);
begin
  MasterData.СкладПр := null;
  eStore_ActionClear(Sender);
end;

procedure eRegion_ActionClear(Sender: TObject);
begin
  MasterData.СкладПр := null;
  eStore_ActionClear(Sender);
end;

procedure miAllRecords_Click(Sender: TObject);
var
  Dic: ICDictionary;
  Count: Integer;
begin
  Dic := CreateObject('Справочники.Товары');
  Dic.Select;
  LockCalc := True;
  MasterData.UpdateLine(True);
  DropMode := True;
  ScrollLock := True;
  MasterData.TableAutoCalcFields := False;
  While Dic.SelectNext Do
    begin
    if not VarAsBool(MasterData.@СкладПр.IsFocused) then
      begin
        ShowMessage('Укажите склад');
        exit;
      end;
    if not VarAsBool(MasterData.@Регион.IsFocused) then
      begin
        ShowMessage('Укажите регион');
        exit;
      end;
    Count := 1000;
    Store := MasterData.СкладПр;
    //перемещение из справочника товаров
    AppendGoodIn(MasterData, Null, Dic, Store, Units, Count);
    MasterData.EditLine;
    MasterData.ОптЦена := Dic.ОптЦена;
    MasterData.PostLine;
    end;

  LockCalc := False;
//  SetCursor(CursorVis);
  CalcLocalDocSumByTableChange;
  MasterData.TableAutoCalcFields := True;
  DropMode := False;
  ScrollLock := False;

end;

procedure Button1_Click(Sender: TObject);
begin
  if MessageDlg('Изменить цены в документе? ', mtConfirmation, ArrayOf(mbYes, mbNo)) = mrYes then
    begin
      LockCalc := True;
      MasterData.UpdateLine(True);
      DropMode := True;
      ScrollLock := True;
      MasterData.TableAutoCalcFields := False;
      MasterData.SelectLines;
      while MasterData.SelectNextLine do
        begin
          MasterData.EditLine;
          MasterData.ОптЦена := MasterData.Товар.ОптЦена;
          if MasterData.ОптЦена <> 0 then
          begin
            if MasterData.ПроцентНаценкиСпр <> 0 then
              MasterData.ЦенаВВалюте := MasterData.ОптЦена/(1 + MasterData.ПроцентНаценкиСпр/100)
            else
              MasterData.ЦенаВВалюте := MasterData.ОптЦена;
          end
          else
            MasterData.ЦенаВВалюте := 0;
          MasterData.Цена := MasterData.КурсТовара* MasterData.ЦенаВВалюте;
          MasterData.СтавкаНДС := 0;
          MasterData.ЦенаБезНДС := MasterData.Цена;
          MasterData.PostLine;
        end;
      LockCalc := False;
      CalcLocalDocSumByTableChange;
      MasterData.TableAutoCalcFields := True;
      DropMode := False;
      ScrollLock := False;
    end;
end;

procedure miChangeStore_Click(Sender: TObject);
begin
  MasterData.SelectLines;
  while MasterData.SelectNextLine do
    begin
      MasterData.EditLine;
      MasterData.Склад := MasterData.СкладПр;
      MasterData.PostLine;
    end;
end;

procedure miCode_Click(Sender: TObject);
var
  Accept: boolean;  
  Count : Decimal;
  DefName, BarCode : string;
begin
  if not VarAsBool(MasterData.@СкладПр.IsFocused) then
    begin
      ShowMessage('Укажите склад');
      exit;
    end;    
  BarCode := eCode.Text;
  eCode.Text := '';
 try
   TDS_StartDrop(null, Accept);
   AddLineInByCode(MasterData, null, BarCode, 'ByCode', cbxCount.Checked);
 finally
   TDS_EndDrop(null);
 end;

end;


procedure miFocusedOnCode_Click(Sender: TObject);
begin
  Form.ActiveControl := eCode;
end;
      
procedure SaveUserActiveCountOne(PrinterName : String; TypeValue : boolean);
var
  Options : ICOptions;
begin
  Options := GetOptions;
  Options.SetServerPrm(PrinterName, TypeValue);
end;

procedure cbxCount_Click(Sender: TObject);
begin
  SaveUserActiveCountOne('ШтучныйОтпускТовара ' + MasterData.Getsign, cbxCount.Checked);
end;

procedure eStore_Change(Sender: TObject);
var
  TblContents : ICValueTable;
begin
  TblContents := CreateObject('ТаблицаЗначений');
  TblContents.Open;
  MasterData.SaveContents('',TblContents);
  TblContents.Select;
  while TblContents.SelectNext do
    begin
      TblContents.Edit;
      TblContents.Склад := MasterData.СкладПр;
      TblContents.Post;
    end;
  MasterData.LoadContents('',TblContents);
end;

procedure eCurrencyDoc_Change(Sender: TObject);
Var
  Cours : Decimal;
  TblContents : ICValueTable;
begin
  LockCalc := True;
  MasterData.UpdateLine(True);
  DropMode := True;
  ScrollLock := True;
  MasterData.TableAutoCalcFields := False;
  CursorVis := WaitCursorStart;
  TblContents := CreateObject('ТаблицаЗначений');
  TblContents.Open;
  MasterData.Курс := MasterData.Валюта.GetTimedValue(Constants.UsedCurs, MasterData.ДатаДокумента);
  MasterData.SaveContents('',TblContents);
  TblContents.CopyDataToServer;
  Server.ChangeTbl(TblContents.SrvMean, MasterData);
  TblContents.CopyDataFromServer;
  MasterData.LoadContents('',TblContents);
  TDS_EndDrop(null);
  MasterData.UpdateRecord(True);
end;


procedure Form_CloseQuery(var CanClose: Boolean);
begin
  if isSave and (VarAsBool(Options.GetServerPrm('CloseAck'))) and (MasterData.GetDocState = 0) then
    if (Form.ModalResult = mrCancel) and (MessageDlg('Закрить документ без сохранения?', mtCustom, ArrayOF(mbYes,mbNo),0) = mrNo)  then
      CanClose := false;
end;

procedure tbAddByCodePost_Click(Sender: TObject);
Var
  V : IcProcessing;
begin
 if not VarAsBool(MasterData.@СкладПр.IsFocused) then
   ShowMessage('Укажите склад')
 else
 if not VarAsBool(MasterData.@Регион.IsFocused) then
   ShowMessage('Укажите регион')
 else
   begin
     V := CreateObject('Обработки.ПодборИзНаклПрихЕксель');
     V.Execute('ФормаИмпортаПрихода',MasterData);
     FilltsTable;
   end;
end;

procedure miPrintCurBarCode_Click(Sender: TObject);  
var
  V : ICProcessing;
  PrintForm, OldPrintName, PrintName: String;
begin
 if MasterData.LinesCount>0 then
   try
     OldPrintName := GetActivePrinterName;  
     PrintForm := 'ПечатьЭтикетки58х30';
     PrintName := GetPrintNameForCurPrintForm(PrintForm);
      if PrintName = '' then
        begin
          ShowMessage('Укажите принтер для печатной формы '+PrintForm);
          exit;
        end;
      if OldPrintName<>PrintName then
        SetActivePrinter(PrintName);
      V := CreateObject('Обработки.ПечатьШтрихКодовИЦенников'); 
      V.Params['OnlyCurLineNum'] := true;
      V.PrintForm(PrintForm, false, MasterData);
   finally
     if OldPrintName<>PrintName then
        SetActivePrinter(OldPrintName);
   end;
end;

procedure FillPricesFromDic_Click(Sender: TObject);  
var ContentTbl : ICValueTable; 
    Accept : boolean;    
    CurrencyDic : ICDictionary;
    Course : Decimal;
begin    
 if MessageDlg('Заполнить цены согласно Вх.ценам справочника?',mtConfirmation,ArrayOf(mbYes,mbNo))=mrYes then
 try
   TDS_StartDrop(null, Accept);
   ContentTbl := CreateObject('ТаблицаЗначений');
   MasterData.SaveContents('',ContentTbl);
   ContentTbl.DoGetLinks('ВалютаТовара=Товар.ВалютаВхЦена;ЦенаВВалюте=Товар.ВхЦена');
   ContentTbl.SortBy('ВалютаТовара');
   CurrencyDic := CreateObject('Справочники.Валюты');
   CurrencyDic.Select;
   While CurrencyDic.SelectNext do
     begin
       Course :=  CurrencyDic.GetTimedValue(Constants.UsedCurs, MasterData.ДатаДокумента);
       if Course<=0 then Course := 1;
       ContentTbl.SetRange(CurrencyDic,CurrencyDic);  
       ContentTbl.DoCalculation('КурсТовара',DecToStr(Course));
     end; 
   ContentTbl.CancelRange;
   ContentTbl.SortBy('');
   ContentTbl.DoCalculation('Цена','ЦенаВВалюте*КурсТовара');
   ContentTbl.DoCalculation('ЦенаБезНДС','Цена');    
   ContentTbl.DoCalculation('НДС','0');
   ContentTbl.DoCalculation('СтавкаНДС','0');
   MasterData.ClearContents;
   MasterData.LoadContents('',ContentTbl);
 finally
   TDS_EndDrop(null);
 end;

end;

procedure MDS_VPAAfterPost(Sender: TObject);
begin
 if AddDoc then
   ChangeDoc(clmtAppend,MasterData)
 else
   ChangeDoc(clmtEdit,MasterData);
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
nbList:TO4Notebook
dbgListData:TO4DBGrid
Panel2:TO4Panel
Panel6:TO4Panel
tbrSource:TO4ToolBar
tbSource:TO4ToolButton
Panel7:TO4Panel
ToolBar1:TO4ToolBar
ToolButton1:TO4ToolButton
tbParam:TO4ToolButton
ToolButton2:TO4ToolButton
tbAddByCodePost:TO4ToolButton
Panel3:TO4Panel
Button1:TO4Button
MainPanel:TO4Panel
Label17:TO4Label
CodePanel:TO4Panel
eCode:TO4Edit
cbxCount:TO4CheckBox
dbgGood:TO4DBGrid
tsTable:TO4TabSet
BottomPanel:TO4Panel
ButtonPanel:TO4Panel
Panel8:TO4Panel
btOK:TO4Button
btCancel:TO4Button
Panel5:TO4Panel
tsSumms:TO4TabSet
nbSumms:TO4Notebook
DBText2:TO4DBText
Label5:TO4Label
Label6:TO4Label
Label3:TO4Label
Label15:TO4Label
Label19:TO4Label
Label4:TO4Label
Label13:TO4Label
Label18:TO4Label
dbeWeight:TO4DBEdit
dbeSquare:TO4DBEdit
eSumma:TO4DBEdit
eCurrencyDoc:TO4DBEdit
eCourseDoc:TO4DBEdit
eSummaV:TO4DBEdit
ToolBar2:TO4ToolBar
ToolButton3:TO4ToolButton
eSummaOptV:TO4DBEdit
eCnt:TO4DBEdit
Label10:TO4Label
Label16:TO4Label
Label11:TO4Label
Label12:TO4Label
Label9:TO4Label
eDetTax:TO4DBEdit
eSummaNT:TO4DBEdit
ePack:TO4DBEdit
eCountPack:TO4DBEdit
eGoodStore:TO4DBEdit
GroupBox1:TO4GroupBox
Label8:TO4Label
Label14:TO4Label
btnTax:TO4Button
edTax:TO4Edit
Panel4:TO4Panel
nbHeader:TO4Notebook
Label1:TO4Label
Label2:TO4Label
Label26:TO4Label
Label22:TO4Label
Label7:TO4Label
eData:TO4DBEdit
eNumber:TO4DBEdit
eRespons:TO4DBEdit
rgCalcSum:TO4RadioGroup
eStore:TO4DBEdit
eRegion:TO4DBEdit
emAbout:TO4DBMemo
tbsHeader:TO4TabSet
TDS:TO4DocContentsSource
MDS:TO4DataSource
TVSGood:TO4TableValueSource
TVSStore:TO4TableValueSource
pmSort:TO4PopupMenu
miSortByCode:TO4MenuItem
miSortByName:TO4MenuItem
pmList:TO4PopupMenu
miLinkDict:TO4MenuItem
miDelRec:TO4MenuItem
MenuItem1:TO4MenuItem
MenuItem2:TO4MenuItem
MenuItem3:TO4MenuItem
miSort:TO4MenuItem
MenuItem4:TO4MenuItem
miAllRecords:TO4MenuItem
MenuItem5:TO4MenuItem
miChangeStore:TO4MenuItem
FillPricesFromDic:TO4MenuItem
MenuItem6:TO4MenuItem
miPrintCurBarCode:TO4MenuItem
pmCode:TO4PopupMenu
miCode:TO4MenuItem
pmDropDown:TO4PopupMenu
MenuItem8:TO4MenuItem
MenuItem9:TO4MenuItem
MenuItem10:TO4MenuItem
mpMDS:TO4PopupMenu
miFocusedOnCode:TO4MenuItem
