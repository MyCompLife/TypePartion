interface

uses
  System, DispIntf, ConstNames, InitColors, Интерфейс, Расчеты,
  XMLИмпортЭкспорт, Пользователи, НумерацияДокументов, РаботаСОбъектами, РаботаСТаблицамиЗначений;

var
  MasterData: ICProcessing;
  Options: ICOptions;
  DataDir: String;
  Cursor: TCursor;
  RunningMan: Variant;
  ParamsSt, Currency, UrPartner, ManPartner, Goods, Units, Stores : ICDictionary;
  Docs, DocsList : ICValueTable;
  TxtList, ErrorList : TStringList;
  Order : ICDocuments;
  Constants : IC4VPAConst; 
  AccsGoods, AccsReserv, AccsPartGood : ICAccs;

implementation

procedure edFilePath_Change(Sender : TObject);
begin
  DataDir := edFilePath.Text;
  DataDir := edFilePath.Text;
  edFilePath.Font.Color := clWindowText;
  Options.SetServerPrm('WayForDbfBarCodeFile',edFilePath.Text);
end;

procedure btnBrowse_Click(Sender : TObject);
begin
  with OpenDialog do begin
    Filter := '*.xml|*.xml';
    FileName := '*.xml';
    Title := Trans('Определите путь к xml-файлу');
    if Execute then begin
      edFilePath.Text := FileName;
    end;
  end;
end;

Function IsDocExists(DocName: String; DocsTbl :ICValueTable; Var OneDoc: ICDocuments) : Boolean;
begin
  Result := False;
  if DocsTbl.HasField('НомерДокумента') and OneDoc.HasField('НомерДокумента') then
    OneDoc.SetFieldFilter('НомерДокумента', '=', DocsTbl.НомерДокумента, '', '', Null);
  if DocsTbl.HasField('Партнер') and OneDoc.HasField('Партнер') then
    OneDoc.SetFieldFilter('Партнер', '=', DocsTbl.Партнер, '', '', Null);
  if OneDoc.Select then
    while OneDoc.SelectNext do
      begin
       if RoundDate(OneDoc.ДатаДокумента, rdDay, False) = RoundDate(DocsTbl.ДатаДокумента, rdDay, False) then
       Result := True;
     end;
end;

procedure CalcDocSumma(DocCurrent : ICDocuments; ObjForRecalcOtherSums : IObject = '');
var
  Sums : Variant;
  FieldList : String;
  TblDocContents : ICValueTable;
  Tax : Decimal;
begin
  if IsNil(TblDocContents) then
    TblDocContents := CreateObject('ValueTable')
  else
    TblDocContents.Close;
  DocCurrent.SaveContents('', TblDocContents);
  TblDocContents.DoCalculation('СуммаСтроки', 'Цена*Количество');
  DocCurrent.Сумма := TblDocContents.Total('СуммаСтроки');
  DocCurrent.СуммаВВалюте := DocCurrent.Сумма/DocCurrent.Курс;
end;


function GetEmplByName(EmplName: String): ICDictionary;
Var
  Respons : ICDictionary;
begin
  if IsNil(Respons) then Respons := CreateObject('Справочники.Служащие');
    if Respons.FindByField('ПолноеНазвание', EmplName, False) then begin
    Result := Respons;
  end else Nil(Result);
end;

procedure CreateObjects;
begin
  ParamsSt := CreateObject('Справочники.ПараметрыОтчетаПоДоходамЗатратам');
  Docs := CreateObject('ТаблицаЗначений');
  Docs.AddColumn('НомерДокумента', vtcString, 15);
  Docs.AddColumn('ДатаДокумента', vtcDate, 0);
  Docs.AddColumn('КодПартнера', vtcString, 100);
  Docs.AddColumn('Партнер', vtcLink, 0);
  Docs.AddColumn('ПроцСкидки', vtcFft, 2);
  Docs.AddColumn('Заметки', vtcMemo, 0);
  Docs.AddColumn('Доставка', vtcMemo, 0);
  Docs.Open;

  DocsList := CreateObject('ТаблицаЗначений');
  DocsList.AddColumn('НомерСтроки', vtcInteger, 0);
  DocsList.AddColumn('НомерДокумента', vtcString, 15);
  DocsList.AddColumn('ДатаДокумента', vtcDateTime, 0);
  DocsList.AddColumn('КодПартнера', vtcString, 100);
  DocsList.AddColumn('Заметки', vtcMemo, 0);
  DocsList.AddColumn('Доставка', vtcMemo, 0);
  DocsList.AddColumn('Партнер', vtcLink, 0);
  DocsList.AddColumn('КодСклада', vtcString, 100);
  DocsList.AddColumn('СкладПоУмолч', vtcLink, 0);
  DocsList.AddColumn('Код', vtcString, 50);
  DocsList.AddColumn('Товар', vtcLink, 0);
  DocsList.AddColumn('ШтрихКод', vtcString, 50);
  DocsList.AddColumn('ЕдИзм', vtcLink, 0);
  DocsList.AddColumn('НазвТовара', vtcString, 100);
  DocsList.AddColumn('Количество', vtcFft, 5);
  DocsList.AddColumn('Цена', vtcFft, 7);
  DocsList.AddColumn('ЦенаБезСкидкиНадбавки', vtcFft, 7);
  DocsList.AddColumn('ПроцСкидки', vtcFft, 2);
  DocsList.AddColumn('ДокументСкидки', vtcLink, 0);
  DocsList.Open;


  UrPartner := CreateObject('Справочники.ЮрПартнеры');
  ManPartner := CreateObject('Справочники.ФизЛица');
  Stores := CreateObject('Справочники.Склады');
  Goods := CreateObject('Справочники.Товары');
  Currency := CreateObject('Справочники.Валюты');
  GetNatCurrency(Currency);
end;

procedure TableCalcFields(Doc : Variant);
begin
  CalcLineSumma(Doc); //находится в модуле Расчёты
end;

procedure CalcFields(Doc : Variant);
begin
  GetCalcValSumma(Doc); //находится в модуле Расчёты
end;

procedure btnStart_Click(Sender : TObject);
Var
  i : Integer;
  StrInfo, NewStr, FieldName, DocDate, DocNum, DocPartName, DocPartLogin, DocPartPhone, DocPartMail, DocInfo, DocDelivery : String;
  dlgError : ICProcessing;
  DomDocument, Root, DocNode, HeadNode, ContentsNode, RowNode : OleVariant;
  DocCount, FieldsCount, RowsCount : Integer;
  Dialog : ICProcessing;
  XmlStr : String;
  ActionDoc: ICDocuments;
  TmpTbl: ICValueTable;
begin
  CreateObjects;
  NewStr := #13;

  //-------------------------Зачитка с xml-файла--------------------------------
  DomDocument := LoadXMLFromFile(DataDir);
  // корневой узел
  Root := DomDocument.documentElement;
  // обход коллекции узлов Doc
  ActionDoc := CreateObject('Документы.УстановкаСкидок');
  for DocCount := 0 to Root.childNodes.length-1 do
    begin
      DocNode := Root.childNodes.Item(DocCount);
      XmlStr := XmlStr + #13#10 + 'ДОКУМЕНТ ' + IntToStr(DocCount);
      // поля шапки
      HeadNode := DocNode.selectSingleNode('head');
      XmlStr := XmlStr + #13#10 + HeadNode.nodeName + ':';
      for FieldsCount := 0 to HeadNode.childNodes.length-1 do
        begin
          XmlStr := XmlStr + #13#10 +
            '  ' + HeadNode.childNodes.Item(FieldsCount).nodeName + ' = ' + HeadNode.childNodes.Item(FieldsCount).text;
          FieldName := HeadNode.childNodes.Item(FieldsCount).nodeName;
          Case FieldName of
            'name':      DocPartName := HeadNode.childNodes.Item(FieldsCount).text;
            'date':      DocDate := HeadNode.childNodes.Item(FieldsCount).text;
            'number':    DocNum := HeadNode.childNodes.Item(FieldsCount).text;
            'partner':   DocPartLogin   := HeadNode.childNodes.Item(FieldsCount).text;
            'phone':     DocPartPhone := HeadNode.childNodes.Item(FieldsCount).text;
            'email':     DocPartMail := HeadNode.childNodes.Item(FieldsCount).text;
            'info' :     DocInfo := HeadNode.childNodes.Item(FieldsCount).text;
            'delivery' : DocDelivery := HeadNode.childNodes.Item(FieldsCount).text;
          end;
        end;
      // поля таблицы
      ContentsNode := DocNode.selectSingleNode('table');
      if VarAsBool(ContentsNode.hasChildNodes) then
        begin
          XmlStr := XmlStr + #13#10 + ContentsNode.nodeName + ':';
          for RowsCount := 0 to ContentsNode.childNodes.length-1 do
            begin
              DocsList.Append;
              DocsList.НомерСтроки      := RowsCount + 1;
              DocsList.НомерДокумента   := DocNum;
              DocsList.КодПартнера      := DocPartLogin;

              DocsList.ДатаДокумента    := StrToDateTime(DocDate);//dd.mm.yyyy.hh:mm:cc

              StrInfo := DocPartName + NewStr; // Перевозчик
              StrInfo := StrInfo + 'Телефон: ' + DocPartPhone + NewStr; // Перевозчик
              StrInfo := StrInfo + 'e-mail: ' + DocPartMail + NewStr; // Получатель
              StrInfo := StrInfo + DocInfo; // Форма оплаты
              DocsList.Заметки := StrInfo;
              DocsList.Доставка := DocDelivery;

              RowNode := ContentsNode.childNodes.Item(RowsCount);
              XmlStr := XmlStr + #13#10 + '  ' + 'Строка ' + IntToStr(RowsCount+1) + ':';
              for FieldsCount := 0 to RowNode.childNodes.length-1 do
                begin
                  XmlStr := XmlStr + #13#10 +
                    '    ' + RowNode.childNodes.Item(FieldsCount).nodeName + ' = ' + RowNode.childNodes.Item(FieldsCount).text;
                  FieldName := RowNode.childNodes.Item(FieldsCount).nodeName;
                  Case FieldName of
                   'article': begin
                                DocsList.Код   := RowNode.childNodes.Item(FieldsCount).text;
                                if Goods.FindByCode(DocsList.Код, false) then
                                  DocsList.Товар := Goods;
                              end;
                   'price':   DocsList.Цена := StrToDec(RowNode.childNodes.Item(FieldsCount).text);
                   'count':   DocsList.Количество := StrToDec(RowNode.childNodes.Item(FieldsCount).text);
                   'action': begin
                     if ActionDoc.FindByField('NumID',VarAsInt(RowNode.childNodes.Item(FieldsCount).text),false) then
                       DocsList.ДокументСкидки := ActionDoc;
                   end;
                  end;
                end;
              DocsList.Post;
            end;

        end;
    end;

  DocsList.DoGetLinks('НазвТовара=Товар.НазвТовара;ЕдИзм=Товар.ЕдИзм;ШтрихКод=Товар.ШтрихКод');
  DocsList.GroupToMaster('НомерДокумента;ДатаДокумента;КодПартнера;Партнер','',Docs);
  ErrorList := CreateStringList;
  Docs.Select;
  while Docs.SelectNext do
    begin
       if UrPartner.FindByField('Логин', Docs.КодПартнера, false) then
         begin
           Docs.Edit;
           Docs.Партнер := UrPartner;
           Docs.Post;
         end
       else
         ErrorList.Add(VarAsStr('Партнер с логином: ' + Docs.КодПартнера + ' не найден') );
    end;

  DocsList.Select;
  While DocsList.SelectNext Do
    Begin
      if not VarAsBool(DocsList.@Товар.IsFocused) then
        ErrorList.Add(VarAsStr('Товар с кодом : ' + DocsList.Код + ' не найден'));
      StatusText('Анализ строки: ' + VarAsStr(DocsList.НомерСтроки));
      Inc(i);
    End;

  if ErrorList.Count > 0 then
    begin
      ShowMessage('Обнаружены ошибки, импорт прекращен!');
      dlgError := CreateObject('Обработки.ЭкспортИмпортССайтом');
      dlgError.Execute('СписокОшибок',ErrorList.Text);
      exit;
    end;
  TmpTbl := CreateObject('ValueTable');
  DocsList.CopyColumnsTo(TmpTbl);
  TmpTbl.Open;
  Order := CreateObject('Документы.Чек');
  Order.Select;
  Docs.Select;
  i := 1;
  While Docs.SelectNext do
    if not IsDocExists('Документы.Чек', Docs, Order) then
    begin
      DocsList.UseMaster(Docs);
      TmpTbl.Clear;
      DocsList.AppendTo('',TmpTbl);
      Order.Append;
      StatusText('Импорт документа: '+ VarAsStr(i) + ' из ' + VarAsStr(Docs.LineCount));
      Order.AssignFields('НомерДокумента;ДатаДокумента;Партнер',Docs);
      ParamsSt.Select;
      if VarAsBool(ParamsSt.@Чек.IsFocused) then
        Order.Статья := ParamsSt.Чек;
      Order.Регион := Order.Партнер.Регион;
      Order.СкладПоУмолч := GetUsersField('Склад');
      if not VarAsBool(Order.@СкладПоУмолч.IsFocused) then
        begin
          if isNil(Stores) then
            Stores := CreateObject('Справочники.Склады');
          if Stores.FindByField('Регион', Order.Регион, false) then
            Order.СкладПоУмолч := Stores
        end;
      Order.Импорт := 1;
      Currency := GetNatCurrency(Currency);
      Order.Валюта := Currency;
      Order.Курс := Currency.GetTimedValue(Constants.UsedCurs, Order.ДатаДокумента);
      Order.Отпуск := 1;
      Order.Ответственный := GetEmplByName(GetUserName);
      Order.NumID := StrToInt(УстановитьНомерДокумента(Order, '')) + 1;
      Order.BaseID := VarAsInt(Constants.КодИБ);
      Order.ЗаказСайт := WritePropsToBlob(TmpTbl);
      DocsList.Select;
      While DocsList.SelectNext Do
        begin
          Order.AppendLine;
          Order.AssignFields('Код;Товар;ЕдИзм;КоличествоВЗаказе=Количество;Цена;ШтрихКод;ДокументСкидки',DocsList);
          Order.ЦенаБезСкидкиНадбавки := DocsList.Товар._Default[Order.Партнер.ТипЦены];
          Order.PostLine;
        end;
      Order.Заметки := DocsList.Заметки;
      Order.Доставка := DocsList.Доставка;
      CalcDocSumma(Order);
      Order.Post;
      Order.ApplyUpdates;
      Inc(i);
    end;
  StatusText('Импорт завершен');
  Options.SetServerPrm('WayForTxtImportFile',edFilePath.text);
end;

procedure Form_Execute(Sender: TObject; Mean: Variant; Params: Variant);
begin
  MasterData := Mean;
  Options := GetOptions;
  Constants := GetConstants;
  edFilePath.text := VarAsStr(Options.GetServerPrm('WayForTxtImportFile'));
end;

procedure Form_ExecProc(Self, Caller: Variant; ProcID: string; InParams: Variant; var OutParams: Variant);
var DefSender : TObject;
begin
  if ProcID = 'start' then
    btnStart_Click(DefSender);
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4Form
ImagePanel:TO4Panel
LinkImage:TO4LinkImage
BottomPanel:TO4Panel
ButtonPanel:TO4Panel
btnClose:TO4Button
btnStart:TO4Button
Panel1:TO4Panel
gbxFilePath:TO4GroupBox
edFilePath:TO4Edit
btnBrowse:TO4Button
OpenDialog:TO4OpenDialog
