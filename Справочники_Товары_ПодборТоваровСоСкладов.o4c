interface

uses
  System, DispIntf, ConstNames, InitColors, –абота—ѕеременными, –абота—ќбъектами,
  –абота— омпонентамиVCL, –абота—о—правочникамиCL, ѕользователи;

implementation

var
  ScrollLock, LockCalc, LockPost : Boolean;
  CursorVis : TCursor;
  UseConst : IC4VPAConst;
  MasterData, Store : ICDictionary;
  Stores : ICValueList;
  TblStore, TblPartGood: ICValueTable;
  LookStore, ChangeSort, UseLevels : Boolean;
  OneGoodCount : Double;
  ChangeImage : Integer;
  Opt : ICOptions;
  AccsGoodRes, AccsGoodCurrent : ICAccs; 
  FieldName : String;   

  ManufacturerTbl, GroupTbl: ICValueTable;

//*****************************************************
procedure GoodsFilter(FieldName: String; Tbl: ICValueTable);
begin
  MasterData.DisableControls;
  if VarAsBool(Tbl._Default[FieldName + '“овара'].IsFocused) then
    begin
      MasterData.SetFieldFilter(FieldName,'=',Tbl._Default[FieldName + '“овара'],'','',Null);
      MasterData.Select;
    end
  else
    begin
      MasterData.CancelFieldFilter(FieldName);
      MasterData.Select;
    end;
  MasterData.EnableControls;
end;

procedure TVS_VPAAfterScroll(Sender: TObject);
var
  FieldName: String;
begin
  case (Sender as TO4TableValueSource).Name of
    'TVSManufacturer': GoodsFilter('ѕроизводитель', ManufacturerTbl);
    'TVSGroup': GoodsFilter('√руппа', GroupTbl);
  end;
end;

{$D-}
procedure dbgManufacturer_GetRowParams(Sender: TObject; DrawFont: TFont; var BackColor: TColor; Highlight: boolean);
begin
  if ManufacturerTbl.Order = 0 then
    begin
      if not Highlight then
        BackColor := 10942461
      else
        begin
          BackColor := 703486;
          DrawFont.Color := clBlack;
        end;
    end;
end;

procedure dbgGroup_GetRowParams(Sender: TObject; DrawFont: TFont; var BackColor: TColor; Highlight: boolean);
begin
  if GroupTbl.Order = 0 then
    begin
      if not Highlight then
        BackColor := 10942461
      else
        begin
          BackColor := 703486;
          DrawFont.Color := clBlack;
        end;
    end;
end;
{$D+}
//*****************************************************

procedure TVS_VPATimedAfterScroll(Sender: TObject);
begin
  if VarAsBool(GroupTbl.@√руппа“овара.IsFocused) then
    begin
      MasterData.SetFieldFilter('ѕроизводитель','=',GroupTbl.√руппа“овара,'','',Null);
      MasterData.Select;
    end
  else
    begin
      MasterData.CancelFieldFilter('ѕроизводитель');
      MasterData.Select;
    end;
end;
 
{$D-}
procedure dbgGrouop_GetRowParams(Sender: TObject; DrawFont: TFont; var BackColor: TColor; Highlight: boolean);
begin
  if not VarAsBool(GroupTbl.@√руппа“овара.IsFocused) then
    begin
      if not Highlight then
        BackColor := 10942461
      else
        begin
          BackColor := 703486;
          DrawFont.Color := clBlack;
        end;
    end;
end;
{$D+}
//*****************************************************


procedure SetCalcField(DT : DateTime; Stores : ICValueList; Index : Integer);
var
  Cond : string;
begin
  MasterData.ClearCalcFieldInDBServer;
  if Stores.ValidIndex(Stores.CurIndex) and (Stores.CurIndex <> 0) then
    Store := Stores.GetValue(Stores.CurIndex)
  else
    nil(Store);
  if miFilterNoZero.Checked then
    Cond := '>0';
  MasterData.SetCalcFieldInDBServer(' оличествоЌа—кладах', AccsGoodCurrent,
    RoundDate(DT, rdDay, True), ArrayOf('“овар', Store), ' олќбщ', amtBoth, Cond);
  if miReserv.Checked then
    Cond := '>0'
  else
    Cond := '';
  MasterData.SetCalcFieldInDBServer(' ол¬–ез', AccsGoodRes,
    RoundDate(DT, rdDay, True), ('“овар'), ' олќбщ', amtBoth, Cond);
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
begin
  LockCalc := True;
  try
    UseConst := GetConstants;
    server.InitSrvData;
    MasterData := MDS.GetMean;  
    Masterdata.SetFieldFilter('ѕометка”даление','<>',-1,'','',Null);
    Opt := GetOptions;
    SetColors(UseConst);
    miFilterNoZero.Checked := VarAsBool(Opt.GetServerPrm(CheckZero));
    LookStore := True;
    UseLevels := VarAsBool(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption));
    TblStore := CreateObject('“аблица«начений');
    TblPartGood := CreateObject('“аблица«начений');
    TblPartGood.AddColumn('“овар', vtcLink, 0);
    TblPartGood.AddColumn('—клад', vtcLink, 0);
    TblPartGood.AddColumn('ѕартнер', vtcLink, 0);
    TblPartGood.AddColumn('ѕарти€', vtcFloat, 0);
    TblPartGood.AddColumn(' олќбщ', vtcFFT, 5);
    TblPartGood.AddColumn('¬х÷енаЅезЌƒ—', vtcFFT, 7);
    TblPartGood.AddColumn('¬алюта', vtcLink, 0);
    TblPartGood.AddColumn(' урс', lftFFT, 7);
    TblPartGood.AddColumn('¬х÷ена¬ал', vtcFFT, 7);
    TblPartGood.AddColumn('ƒатаѕр', vtcDate, 0);
    TblPartGood.AddColumn('—ум¬х', lftFFT, 7);
    TblPartGood.AddColumn('—ум¬ал¬х', lftFFT, 7);
    TblPartGood.AddColumn('—тавкаЌƒ—', lftInteger, 0);
    TblPartGood.Open;
    TblPartGood.SetColumnFormat('¬х÷енаЅезЌƒ—', UseConst.‘ормат÷ены√–Ќ);
    TblPartGood.SetColumnFormat('¬х÷ена¬ал', UseConst.‘ормат÷ены¬ал);
    TblPartGood.SetColumnFormat(' олќбщ', UseConst.‘ормат ол);
    TblPartGood.SetColumnFormat(' урс', '0.00###');
    Store := CreateObject('—правочники.—клады');
    tblStore.TblName := 'tblStore';
    TblPartGood.Tblname := 'tblPartGood';
    AccsGoodRes := CreateObject('јккумул€торы.“овары¬–езерве');
    AccsGoodCurrent := CreateObject('јккумул€торы.ќстатки“оваровЌа—егодн€');
    if VarAsBool(UseConst.ѕоказывать÷ены√рн) then
      MasterData.SetSrvOnCalcFields(server.SrvCalcFieldsEP);
  finally
    LockCalc := False;
  end
end;

procedure eDate_Change(Sender : TObject);
begin
  if not LockCalc then
    begin
      SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
      server.SetStoreParams(StrToDateDef(eDate.Text, CurrentDateTime), Stores.SrvMean, Stores.CurIndex);
      RefreshDataWithoutCtg(MDS, dbtCtg, MasterData);
      Store := Stores.GetValue(Stores.CurIndex);
      MasterData.Params['¬ыбранный—клад'] := Store;
    end;
end;

procedure MDS_VPABeforeMove(Source : Variant; IsGroup : Boolean; var Accept : Boolean);
begin
  Accept := VarAsBool(Source.IsFocused);
  MDS.AfterScrollLock := True;
  CursorVis := WaitCursorStart;
end;

procedure MDS_VPAAfterMove(Sender : TObject);
begin
  MDS.AfterScrollLock := False;
  SetCursor(CursorVis);
end;

procedure MDS_VPATimedAfterScroll(Sender : TObject);
begin
  //  if ScrollLock then exit;
  TblStore.UseDataSource(0);
  TblPartGood.UseDataSource(0);
  try
    TblPartGood.Clear;
    if TblStore.Active then
      TblStore.Clear;
    if MasterData.IsFocused and (not (MasterData.”слуга = -1)) and MasterData.SetSrvToClientPos then
      begin
        TblPartGood.CopyDataToServer();
        server.GetStoreList(MasterData.SrvMean, TblStore.SrvMean, TblPartGood.SrvMean, miViewEmptyPart.Checked);
        TblStore.CopyDataFromServer;
        TblStore.SortBy('јктивность');
        TblStore.SelectFirst;
        TblStore.SetColumnFormat(' олќбщ', UseConst.‘ормат ол);
        TblPartGood.CopyDataFromServer;
        TblStore.SrvMean.Clear;
        TblPartGood.SrvMean.Clear;
        TblPartGood.UseMaster(TblStore);
        TblPartGood.SortBy('-¬х÷енаЅезЌƒ—;ѕартнер');
      end;
  finally
    TblStore.UseDataSource(CtrlToVar(TVSStore));   
    TblPartGood.DoCalculation(' урс','¬х÷енаЅезЌƒ—/¬х÷ена¬ал');
    TblPartGood.UseDataSource(CtrlToVar(TVSPartGood));
  end;
end;

procedure Form_Execute(Sender : TObject; Mean : Variant; Params : Variant);
var
  Store : ICDictionary;
  Index : Integer;
  TmpStores : ICValueList;
begin
  LockCalc := True;
  try
    if IsObject(Params) and VarAsBool(Params.IsType('—писок«начений')) then
      begin
        if IsNil(Stores) then
          Stores := CreateObject('—писок«начений')
        else
          begin
            Stores.UseControl(0);
            Stores.Clear;
          end;
        TmpStores := Params;
        Index := 0;
        repeat
          Stores.InsertValue(Index, TmpStores.GetStr(Index), TmpStores.GetValue(Index));
          Index := Index + 1;
        until not TmpStores.ValidIndex(Index);
      end
    else
      begin
        Stores := CreateObject('—писок«начений');
        Store := CreateObject('—правочники.—клады');
        Stores.AddValue(Trans('¬се склады'), Null);
        Store.Select;
        if Store.FindByField('јктивность', True, False) then
          Stores.AddValue(Store.Ќазвание, Store);
        Store.Select;
        while Store.SelectNext do
          if not Store.јктивность = True then
            Stores.AddValue(Store.Ќазвание, Store); // или ('',S)
      end;
    Stores.UseControl(CtrlToVar(eStores));
    Stores.CurIndex := 0;
    Store := Stores.GetValue(Stores.CurIndex);
    MasterData.Params['¬ыбранный—клад'] := Store;
    Stores.CopyDataToServer;
    eDate.Text := dateToStr(CurrentDate);
    server.SetStoreParams(CurrentDate, Stores.SrvMean, Stores.CurIndex);
    TblPartGood.SortBy('-¬х÷енаЅезЌƒ—');
    case VarAsInt(Params) of
      0 :
        miPrice1.Checked := True;
      1 :
        miPrice2.Checked := True;
      2 :
        miPrice3.Checked := True;
    end;
    MasterData.Params['÷ена'] := Params;
    TblStore.Params['÷ена'] := Params;
    TblPartGood.Params['÷ена'] := Params;

    SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
  finally
    LockCalc := False;
  end;
end;

{$D-}
procedure dbgData_GetRowParams(Sender : TObject; DrawFont : TFont; var BackColor : TColor; Highlight : Boolean);
begin
  if MasterData.IsFocused and (not MasterData.FieldIsNull(' оличествоЌа—кладах')) and
     MasterData.IsFocused and (MasterData. оличествоЌа—кладах <= 0) then
    if Highlight then
      begin
        BackColor := BlZeroSel;
        DrawFont.Color := BlFZeroSel;
      end
    else
      begin
        BackColor := BlZero;
        DrawFont.Color := BlFZero;
      end;
end;
{$D+}

procedure miRefresh_Click(Sender : TObject);
begin
  MasterData.Refresh;
end;

procedure miViewEmptyPart_Click(Sender : TObject);
begin
  miViewEmptyPart.Checked := not miViewEmptyPart.Checked;
  MDS_VPATimedAfterScroll(MDS);
end;

procedure miViewStore_Click(Sender : TObject);
begin
  miViewStore.Checked := not miViewStore.Checked;
  LookStore := miViewStore.Checked;
  Panel3.Visible := LookStore;
  Splitter2.Visible := LookStore;
  MDS_VPATimedAfterScroll(MDS);
end;


procedure miFilterNoZero_Click(Sender : TObject);
begin
  miFilterNoZero.Checked := not miFilterNoZero.Checked;
  SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
  RefreshDataWithoutCtg(MDS, dbtCtg, MasterData);
end;

procedure pmiCopy_VPABeforeActionClick(Sender : TObject);
var
  CopyFrom : ICDictionary;
begin
  CopyFrom := CreateObject('—правочники.“овары');
  if CopyFrom.Find(MasterData) then
    MasterData.Params['CopyFrom'] := CopyFrom
  else
    MasterData.Params['CopyFrom'] := Null;
end;

procedure tbAdd_VPABeforeActionClick(Sender : TObject);
begin
  MasterData.Params['CopyFrom'] := Null;
end;

procedure Sort(Sender : TObject);
begin
  if TblPartGood.IsFocused then
    begin
      miSortByPrice.ImageIndex := -1;
      miSortByCnt.ImageIndex := -1;
      miSortByDate.ImageIndex := -1;

      if ChangeImage = (Sender as TO4MenuItem).Tag then
        begin
          if ChangeSort then
            begin
              case (Sender as TO4MenuItem).Tag of
                0 :
                  TblPartGood.SortBy('-¬х÷енаЅезЌƒ—');
                1 :
                  TblPartGood.SortBy('- олќбщ');
                2 :
                  TblPartGood.SortBy('ƒатаѕр');
              end;
              ChangeSort := False;
              (Sender as TO4MenuItem).ImageIndex := 225
            end
          else
            begin
              case (Sender as TO4MenuItem).Tag of
                0 :
                  TblPartGood.SortBy('¬х÷енаЅезЌƒ—');
                1 :
                  TblPartGood.SortBy(' олќбщ');
                2 :
                  TblPartGood.SortBy('-ƒатаѕр');
              end;
              ChangeSort := True;
              (Sender as TO4MenuItem).ImageIndex := 224
            end
        end
      else
        begin
          case (Sender as TO4MenuItem).Tag of
            0 :
              TblPartGood.SortBy('¬х÷енаЅезЌƒ—');
            1 :
              TblPartGood.SortBy(' олќбщ');
            2 :
              TblPartGood.SortBy('-ƒатаѕр');
          end;
          ChangeSort := True;
          (Sender as TO4MenuItem).ImageIndex := 224
        end;

      miSortByPrice.Checked := False;
      miSortByCnt.Checked := False;
      miSortByDate.Checked := False;
      case (Sender as TO4MenuItem).Tag of
        0 :
          miSortByPrice.Checked := True;
        1 :
          miSortByCnt.Checked := True;
        2 :
          miSortByDate.Checked := True;
      end;
      ChangeImage := (Sender as TO4MenuItem).Tag;
    end
end;

procedure MDS_VPAAfterScroll(Sender : TObject);
begin
  MasterData.InteractiveUseLevels := UseLevels;
end;

procedure pmiDontUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := False;
end;

procedure pmiUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := True;
end;

procedure Form_Close(Sender : TObject);
begin
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption, UseLevels);
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption+'panel1', Panel1.Height);
end;

procedure Form_Open(Sender : TObject);
begin
  MasterData.Params[prmInterfaceType] := itDropForm;
  MakeCnfgInterface(MasterData, Form, ManufacturerTbl, GroupTbl);
  MakeStandartInterface(MasterData, Form, 'tbrData', 'dbgData');
  (dbgPart.PosColumns.Items[0] as TO4GridColumn).Visible := UseConst.”четƒата;
  (dbgPart.PosColumns.Items[1] as TO4GridColumn).Visible := not UseConst.”четѕо—редней—тоим;
  tsFilter.Down := GetFilterPanel(MasterData.GetSign);
  pFilter.Visible := tsFilter.Down;

  dbgManufacturer.Height := VarAsInt(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption+'panel1'),116);
end;

procedure miPrice1_Click(Sender : TObject);
begin
  MasterData.Params['÷ена'] := (Sender as TComponent).tag;
  TblStore.Params['÷ена'] := (Sender as TComponent).tag;
  TblPartGood.Params['÷ена'] := (Sender as TComponent).tag;
  miPrice1.Checked := False;
  miPrice2.Checked := False;
  miPrice3.Checked := False;
  case (Sender as TComponent).Tag of
    0 :
      miPrice1.Checked := True;
    1 :
      miPrice2.Checked := True;
    2 :
      miPrice3.Checked := True;
    else
      exit;
  end;

end;

procedure Form_ExecProc(Self, Caller : Variant; ProcID : string; InParams : Variant; var OutParams : Variant);
var
  TmpSender : TObject;
begin
  case StrLowerCase(ProcID) of
    'moveall' :
      MDS.AfterScrollLock := True;
    'stop' :
      begin
        MDS.AfterScrollLock := False;
        MDS_VPATimedAfterScroll(TmpSender);
      end;
    else
      TblPartGood.Locate('ѕарти€', InParams);
  end;
end;

procedure miReserv_Click(Sender : TObject);
begin
  miReserv.Checked := not miReserv.Checked;
  SetCalcField(StrToDateDef(eDate.Text, CurrentDateTime), Stores, Stores.CurIndex);
  RefreshDataWithoutCtg(MDS, dbtCtg, MasterData);
end;

procedure miProperty_Click(Sender : TObject);
var
  dialog : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      dialog := CreateObject('ќбработки.—войства“овара');
      dialog.Execute('—войства“овара', MasterData);
    end;
end;

procedure miPrint_Click(Sender : TObject);
begin
  MasterData.PrintForm('', False, 0, Null)
end;

procedure miEditPrice_Click(Sender: TObject);
var
  dialog : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      dialog := CreateObject('ќбработки.»зменение÷ены“овара');
      dialog.Execute('»зменение÷ены', MasterData);
    end;
end;  

procedure FilterMean;
begin
  Case eFieldFilter.Text of
    'Ќазвание' : FieldName := 'Ќазв“овара';
  else
    FieldName := eFieldFilter.Text;
  end;
  MasterData.SetFieldFilter(FieldName,'Like', '%' + eGoodsFilter.Text + '%','','',Null);
  MasterData.Refresh;
  form.ActiveControl := dbgData;
end;

procedure tbFilterApply_Click(Sender: TObject);
begin
  FilterMean
end;

procedure eGoodsFilter_KeyDown(Sender: TObject; var Key: Integer);
begin
  if key=13 then
    FilterMean
end;

procedure tbGoodsFilterClear_Click(Sender: TObject);
begin
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  eGoodsFilter.Text := '';
end;

procedure tsFilter_Click(Sender: TObject);
begin
  pFilter.Visible := tsFilter.Down;
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  eGoodsFilter.Text := '';
  SetFilterPanel(MasterData.GetSign, tsFilter.Down);
end;  

{$D-}
procedure dbgData_GetImageIndex(Sender: TObject; var Index1, Index2: integer);
begin
  if MasterData.IsFocused then
    begin
      if VarAsBool(MasterData.ѕометка”даление) then
       Index1 := 51;
    end;
end;
{$D+}


procedure MDS_VPAAfterPost(Sender: TObject);
Var
  CatDic : ICDictionary;
begin
 if LockPost then exit;
 CatDic := CreateObject('—правочники.“овары');
 CatDic.IncludeLevels(true);
 CatDic.IncludeOnlyLevels(true);
 if CatDic.Find(MasterData.@ атегори€) and not IsObjEQ(MasterData.GetParent,CatDic)  then
   begin
     LockPost := true;
     MasterData.Edit;
     MasterData. атегори€ := MasterData.GetParent;
     MasterData.POst;
     MasterData.ApplyUpdates;
     LockPost := False;
   end;


end;

procedure tbGoodsToDel_Click(Sender: TObject);
var x,y : integer;
begin
 tbGoodsToDel.GetScreenPos(x,y);
 pmGoodsToDel.Popup(x,y+tbGoodsToDel.Height);
end;

procedure miAllGoods_Click(Sender: TObject);
begin
 (Sender as TO4MenuItem).Checked := true;
 case (Sender as TO4MenuItem).Tag of
  0: MasterData.CancelFieldFilter('ѕометка”даление');
  1: Masterdata.SetFieldFilter('ѕометка”даление','=',-1,'','',Null);
  2: Masterdata.SetFieldFilter('ѕометка”даление','<>',-1,'','',Null);
 end;
 Masterdata.Refresh;
end;

procedure miGoods0_Click(Sender: TObject);
begin
  MasterData.Params['CardType'] := (Sender as TO4MenuItem).Tag;
  MasterData.SetFieldFilter('“ип арточки','=',(Sender as TO4MenuItem).Tag,'','',Null);
  (Sender as TO4MenuItem).Checked := true;
  MasterData.Refresh;
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
Splitter1:TO4Splitter
Panel1:TO4Panel
dbtCtg:TO4DBTreeView
dbgGroup:TO4DBGrid
dbgManufacturer:TO4DBGrid
Panel2:TO4Panel
Splitter2:TO4Splitter
tbrData:TO4ToolBar
tbAdd:TO4ToolButton
tbEdit:TO4ToolButton
tbDelete:TO4ToolButton
tbDelimiter1:TO4ToolButton
tbPrint:TO4ToolButton
tbDelimiter2:TO4ToolButton
tbOption:TO4ToolButton
tbGoodsToDel:TO4ToolButton
tbDelimiter3:TO4ToolButton
tbRefresh:TO4ToolButton
tbSettings:TO4ToolButton
ToolButton3:TO4ToolButton
tsFilter:TO4ToolButton
tbDelimiter4:TO4ToolButton
tbPrice:TO4ToolButton
dbgData:TO4DBGrid
Panel4:TO4Panel
Label1:TO4Label
Label2:TO4Label
eDate:TO4Edit
eStores:TO4Edit
Panel3:TO4Panel
Splitter3:TO4Splitter
dbgStore:TO4DBGrid
dbgPart:TO4DBGrid
pFilter:TO4Panel
CodePanel:TO4Panel
eGoodsFilter:TO4Edit
eFieldFilter:TO4Edit
ToolBar1:TO4ToolBar
tbFilterApply:TO4ToolButton
ToolButton4:TO4ToolButton
tbGoodsFilterClear:TO4ToolButton
MDS:TO4DataSource
TVSStore:TO4TableValueSource
TVSPartGood:TO4TableValueSource
pmOptions:TO4PopupMenu
miViewStore:TO4MenuItem
miViewEmptyPart:TO4MenuItem
miFilterNoZero:TO4MenuItem
miReserv:TO4MenuItem
miFilter:TO4MenuItem
miGoods0:TO4MenuItem
miGoods1:TO4MenuItem
miGoods2:TO4MenuItem
pmSort:TO4PopupMenu
miSortByPrice:TO4MenuItem
miSortByCnt:TO4MenuItem
miSortByDate:TO4MenuItem
pmData:TO4PopupMenu
miAdd:TO4MenuItem
miCopy:TO4MenuItem
miEdit:TO4MenuItem
miDelete:TO4MenuItem
miDelimiter1:TO4MenuItem
miPrint:TO4MenuItem
miDelimiter2:TO4MenuItem
miSort:TO4MenuItem
miDelimiter3:TO4MenuItem
miRefresh:TO4MenuItem
miSettings:TO4MenuItem
miDelimiter4:TO4MenuItem
miEditPrice:TO4MenuItem
pmCtg:TO4PopupMenu
pmiAddLevel:TO4MenuItem
pmiAddSubLevel:TO4MenuItem
pmiEditLevel:TO4MenuItem
pmiDelLevel:TO4MenuItem
MenuItem4:TO4MenuItem
pmiUseLevel:TO4MenuItem
pmiDontUseLevel:TO4MenuItem
pmiUseNoLevel:TO4MenuItem
pmPrice:TO4PopupMenu
miPrice1:TO4MenuItem
miPrice2:TO4MenuItem
miPrice3:TO4MenuItem
TVSManufacturer:TO4TableValueSource
TVSGroup:TO4TableValueSource
pmGoodsToDel:TO4PopupMenu
MenuItem1:TO4MenuItem
MenuItem2:TO4MenuItem
MenuItem3:TO4MenuItem
