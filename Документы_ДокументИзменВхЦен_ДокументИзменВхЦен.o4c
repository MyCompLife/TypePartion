interface

uses
  System, DispIntf, ConstNames, Интерфейс, InitColors, Расчеты, РаботаСЖурналомИзменений;

implementation

procedure bFresh_Click(Sender : TObject); forward;
procedure eCurrencyDoc_Change(Sender : TObject); forward;

var
  ChangeLock, HasOwner, DropMode, LockCalc, ScrollLock, isSave : Boolean;
  Constants : IC4VPAConst;
  Options : ICOptions;
  MasterData : ICDocuments;
  cvtICalc, tmpGoods, GoodTbl : ICValueTable;
  Stores : ICValueList;
  Currency, LinkDict, Units : ICDictionary;
  CursorVis : TCursor;
  AccsGoods, AccsReserv, AccsPartGood : ICAccs;
  AddDoc : Boolean;

procedure CreateObjects;
begin
  Constants := GetConstants;
  Options := GetOptions;
  Currency := CreateObject('Справочники.Валюты');
  GoodTbl := CreateObject('ТаблицаЗначений');
  Stores := CreateObject('СписокЗначений');
  tmpGoods := CreateObject('ТаблицаЗначений');
  cvtICalc := CreateObject('ТаблицаЗначений');
  AccsGoods := CreateObject('Аккумуляторы.ОстаткиТоваров');
  AccsPartGood := CreateObject('Аккумуляторы.ПартииТоваров');
  AccsReserv := CreateObject('Аккумуляторы.ТоварыВРезерве');
end;

procedure CheckControls;
begin
  if MasterData.GetDocState > 0 then
    exit;
  if MasterData.LinesCount() = 0 then
    begin
      eCurrency.Enabled := False;
      eCurs.Enabled := False;
      eSumVal.Enabled := False;
    end
  else
    begin
      eCurrency.Enabled := True;
      eCurs.Enabled := True;
      eSumVal.Enabled := True;
    end;
end;

procedure TableCalcFields(Doc : ICDocuments);
begin
  if LockCalc then
    exit;
  if Doc.МетодРасчета = 0 then
    begin
      Doc.СуммаСтрокиБезНДС := VarAsDec(Doc.Количество) * VarAsDec(Doc.ЦенаБезНДС - Doc.ВхЦенаБезНДС);
      if VarAsBool(Constants.ОкруглятьСуммуСтрокиБезНДС) then
        Doc.СуммаСтрокиБезНДС := RoundFloat(Doc.СуммаСтрокиБезНДС, Constants.КоличествоЗнаковВСуммеСтрокиБезНДС);
      Doc.НДССтроки := Doc.СуммаСтрокиБезНДС * Doc.СтавкаНДС / 100;
      Doc.СуммаСтроки := Doc.СуммаСтрокиБезНДС + Doc.НДССтроки;
    end
  else
    begin
      Doc.СуммаСтроки := VarAsDec(Doc.Количество) * VarAsDec(Doc.Цена - RoundFloat(GetPrice(Doc.ВхЦенаБезНДС, Doc.СтавкаНДС), 7));
      Doc.НДССтроки := GetTaxFromBrutto(Doc.СуммаСтроки, Doc.СтавкаНДС); //VarAsDec(Doc.Количество)*VarAsDec(Doc.ЦенаБезНДС);
      Doc.СуммаСтрокиБезНДС := Doc.СуммаСтроки - Doc.НДССтроки;
    end;
  if Doc.КурсТовара <> 0 then
    Doc.СуммаВВалютеСНДС := Doc.СуммаСтроки / Doc.КурсТовара;
end;

procedure CalcDocSumm(Doc : ICDocuments);
var
  Sum : Variant;
  LScrollLock : Boolean;
begin
  if lockCalc then
    exit;
  if VarAsBool(MasterData.IsFocused) then
    begin
      LScrollLock := ScrollLock;
      ScrollLock := True;
      try
        MasterData.SaveContents('СуммаСтроки;НДССтроки;СуммаСтрокиБезНДС', tmpGoods);
        Sum := tmpGoods.Total('СуммаСтроки;НДССтроки;СуммаСтрокиБезНДС');
        MasterData.Сумма := Sum[0];
        MasterData.СуммаНДС := Sum[1];
        MasterData.СуммабезНДС := Sum[2];
      finally
        ScrollLock := LScrollLock;
      end;
    end;
  GetCalcValSumma(Doc); //находится в модуле Расчёты
end;

procedure CalcLocalDocSumByTableChange;
begin
  try
    DropMode := True;
    ScrollLock := True;
    MasterData.TableAutoCalcFields := False;
    TDS.VPAOnFieldChange.EventName := ''; //блокировка изменения поля в табл. части документа
    MDS.VPAOnFieldChange.EventName := ''; //блокировка изменения поля в шапке документа
    MasterData.SaveTableBookmark;
    MasterData.DisableTableControls;
    CalcDocSimplSumma(MasterData);
  finally
    MasterData.EnableTableControls;
    DropMode := False;
    ScrollLock := False;
    MasterData.TableAutoCalcFields := True;
    TDS.VPAOnFieldChange.EventName := 'TDS_FieldChange';
    MDS.VPAOnFieldChange.EventName := 'MDS_FieldChange';
    MasterData.GotoTablebookmark(True);
  end;
end;

procedure CalcFields(Doc : ICDocuments);
begin
  if lockCalc then
    exit;
  GetCalcValSumma(Doc); //находится в модуле Расчёты
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
begin
  isSave := false;
  MasterData := MDS.GetMean;
  LockCalc := True;
  try
    server.InitSrvData;
  finally
    LockCalc := False;
  end;
  CreateObjects;
  edTax.Text := FloatToStr(Constants.ProcentPDV);
  SetColors(Constants);
  MasterData.SetTableOnCalcFields(EntryPoint(TableCalcFields));
  MasterData.SetOnCalcFields(EntryPoint(CalcFields));
  MasterData.SetSrvTableOnCalcFields(server.GetCalcParams);
end;

procedure btnBrowser_Click(Sender : TObject);
begin
  LinkDict := MasterData.OpenDropSource('Справочники.Товары', 'ПодборТоваровСоСкладов', Null);
end;

procedure TDS_StartDrop(Source : Variant; var Accept : Boolean);
begin
  if nbList.PageIndex = 0 then
    begin
      LockCalc := True;
      MasterData.UpdateLine(True);
      DropMode := True;
      ScrollLock := True;
      MasterData.TableAutoCalcFields := False;
      CursorVis := WaitCursorStart;
    end
  else
    begin
      Accept := False;
      SetCursor(CursorVis);
    end;
end;

procedure CalcCount(var Count : Decimal; s : string; var Accept : Boolean);
begin
  if VarAsBool(Options.GetServerPrm(CountAck)) and not StdInpDec(inpGoodCount + s, Count) then
    Accept := MessageDlg(EnterAsk, mtConfirmation, ArrayOf(mbYes, mbNo)) = mrNo;
end;

procedure TDS_Drop(Source : Variant; var Accept : Boolean);
var
  s : string;
  Count : Decimal;
begin
  Count := 1;
  if VarAsBool(Source.IsType('Справочники')) then
    begin
      S := VarAsStr(Source.NameField);
      if Source.КоличествоНаСкладах > 0 then
        Count := Source.КоличествоНаСкладах;
    end
  else
    if VarAsBool(Source.IsType('ТаблицаЗначений')) then
      begin
        S := Source.Товар.NameField;
        if Source.КолОбщ > 0 then
          Count := Source.КолОбщ;
      end
    else
      S := '';

  //перемещение из справочника товаров
  if VarAsBool(Source.IsType('Справочники')) then
    begin
      CalcCount(Count, S, Accept);
      if not Accept then
        exit;
      AppendGood(MasterData, Null, Null, Source, Source, Count, Constants, Options, Currency, Units, -3,
        AccsGoods, AccsReserv, AccsPartGood); //если перемещение из справочника
      //Source.Params['Цена']
    end
  else
    if VarAsBool(Source.IsType('ТаблицаЗначений')) then
      begin
        case VarAsStr(Source.TblName) of
          'tblPartGood' :
            if VarAsBool(Source.IsFocused) and VarAsBool(Source.@Склад.IsFocused) and
              (not MasterData.FindLineBy('Товар;Склад;Партия', ArrayOf(Source.@Товар, Source.@Склад, Source.Партия))) then
              begin
                MasterData.AppendLine();
                MasterData.Товар := Source.Товар;
                MasterData.AssignFields('Код;ЕдИзм;СтавкаНДС', Source.Товар);
                MasterData.AssignFields('Склад;Партия;ВхЦенаБезНДС;ВхЦенаВВалюте=ВхЦенаВал;ЦенаБезНДС=ВхЦенаБезНДС;ЦенаВВалюте=ВхЦенаВал;ВалютаТовара=Валюта', Source);
                if Source.КолОбщ > 0 then
                  MasterData.Количество := Source.КолОбщ;
                MasterData.Цена := GetPrice(MasterData.ЦенаБезНДС, MasterData.СтавкаНДС);
                MasterData.НДС := MasterData.Цена - MasterData.ЦенаБезНДС;
              //  MasterData.ВалютаТовара := MasterData.Валюта;
                if VarAsBool(MasterData.@ВалютаТовара.IsFocused) then
                  begin
                    if MasterData.ЦенаВВалюте <> 0 then
                      MasterData.КурсТовара := MasterData.Цена / MasterData.ЦенаВВалюте;
                  end
                else
                  MasterData.КурсТовара := 1;
                MasterData.PostLine();
              end;
          'tblStore' :
            if VarAsBool(Source.IsFocused) and VarAsBool(Source.@Склад.IsFocused) then
              begin
                CalcCount(Count, S, Accept);
                if not Accept then
                  exit;
                AppendGood(MasterData, Null, Null, Source.Товар, Source, Count, Constants,
                  Options, Currency, Units, -3, AccsGoods, AccsReserv, AccsPartGood); //если перемещение со склада
              end;
        end;
      end;
end;

procedure SetHDPrice;
var
  AccPartGood : ICAccs;
begin
  //очень медленно но нужно, надо менять Расчеты - AppendGood 25.12.2003 Виталий
  AccPartGood := CreateObject('Аккумуляторы.ПартииТоваров');
  MasterData.SelectLines;
  while MasterData.SelectNextLine do
    if (MasterData.Партия <> 0) and (MasterData.ВхЦенаВВалюте = 0) and
      AccPartGood.SelectDimID(MasterData.Партия) then
      begin
        MasterData.EditLine;
        MasterData.ВхЦенаВВалюте := AccPartGood.ВхЦенаВал;
        MasterData.ЦенаВВалюте := MasterData.ВхЦенаВВалюте;
        MasterData.ВалютаТовара := AccPartGood.Валюта;
        if VarAsBool(MasterData.@ВалютаТовара.IsFocused) then
          begin
            if MasterData.ЦенаВВалюте <> 0 then
              MasterData.КурсТовара := MasterData.Цена / MasterData.ЦенаВВалюте; //MasterData.ВалютаТовара.GetTimedValue(Constants.UsedCurs, MasterData.ДатаДокумента)
          end
        else
          MasterData.КурсТовара := 1;
        MasterData.PostLine;
      end;
end;

procedure TDS_EndDrop(Source : Variant);
begin
  DropMode := False;
  ScrollLock := False;
  LockCalc := False;
  SetCursor(CursorVis);
  CalcLocalDocSumByTableChange;
  MasterData.TableAutoCalcFields := True;
  bFresh_Click(tbRefresh);
end;

procedure TDS_VPAAfterPost(Sender : TObject);
begin
  if not DropMode then
    CalcLocalDocSumByTableChange;
end;

procedure MakeGroupPage(tsTable : TO4TabSet);
begin
  tsTable.Visible := VarAsBool(Options.GetServerPrm('GroupInDoc'));
end;

procedure ReceiveEvent(Sender : ICDocuments; CenterName, FromUserName : string;
  Param : Variant);
begin
  if MasterData.BrowseMode then
    bFresh_Click(tbRefresh);
end;

procedure Form_Open(Sender : TObject);
begin
  MakeGroupPage(tsTable);
  if MasterData.GetDocState > 0 then
    SetReadOnlyForm(Form)
  else
    CheckControls;
  nbList.PageIndex := 0;
  nbSumms.PageIndex := 0;
  eCurrencyDoc_Change(eCurrencyDoc);
  eRespons.Enabled := GetUDASet('changeresp');
  if VarAsBool(Options.GetServerPrm(RefreshOnEnter)) then
    bFresh_Click(tbRefresh);
  if VarAsBool(Options.GetServerPrm(RefCountOpt)) then
    MasterData.RegEventReceiver(evCount, EntryPoint(ReceiveEvent), VarAsInt(Options.GetLocalPrm(DelayTime), 1000));
  rgCalcSum.ItemIndex := MasterData.МетодРасчета;
end;

procedure ePriceNT_Change(Sender : TObject);
begin
  if ChangeLock or VarAsBool(MasterData.BrowseMode) or DropMode then
    exit;
  MasterData.UpdateLine(True);
end;

procedure TDS_FieldChange(FieldName : string; Value : Variant);
begin
  isSave := true;
  GoodTDSFieldChange(MasterData, FieldName, Value, ChangeLock, DropMode);
end;

procedure MDS_FieldChange(FieldName : string; Value : Variant);
begin
  isSave := true;
  GoodMDSFieldChange(MasterData, FieldName, Value, ChangeLock);
end;

procedure MDS_Append(Sender : TObject);
begin 
  AddDoc := true;
  MasterData.TableAutoCalcFields := False;
  LockCalc := True;
  try
    if not Currency.FindByField('Активность', VarAsInt(True), True) then
      Currency := GetNatCurrency(Currency);
    if Currency.IsFocused then
      begin
        MasterData.Курс := Currency.GetTimedValue(Constants.UsedCurs, MasterData.ДатаДокумента);
        MasterData.Валюта := Currency;
      end;
    MasterData.Ответственный := GetEmplByName(GetUserName, eRespons);
    MasterData.Партнер := MasterData.Ответственный;
    MasterData.Отпуск := 1;
    MasterData.МетодРасчета := VarAsInt(Options.GetServerPrm(CalcSumRule));
  finally
    LockCalc := False;
    MasterData.TableAutoCalcFields := True;
  end;
end;

procedure ePack_ActionExecute(Sender : TObject);
var
  Count : Decimal;
begin
  Count := 1;
  if VarAsBool(Options.GetServerPrm(CountAck)) then
    StdInpDec(inpPackCount, Count);
  MasterData.КоличествоУпаковок := Count;
  MasterData.Количество := MasterData.Упаковка.Количество * MasterData.КоличествоУпаковок;
end;

procedure tsSumms_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
  nbSumms.PageIndex := Newtab;
end;

procedure bCurrency_Click(Sender : TObject);
begin
  ChangeLock := True;
  DropMode := True;
  try
    ChCurrency(MasterData, cvtICalc);
  finally
    ChangeLock := False;
    DropMode := False;
  end;
  CalcLocalDocSumByTableChange;
end;

procedure bFresh_Click(Sender : TObject);
begin
  //  if MasterData.LinesCount <= 0 then tbRefresh.Enabled := false else tbRefresh.Enabled := true;
  CursorVis := WaitCursorStart;
  MasterData.TableAutoCalcFields := False;
  ChangeLock := True;
  ScrollLock := True;
  LockCalc := True;
  DropMode := True;
  try
    MasterData.SaveContents('', tmpGoods);
    tmpGoods.CopyDataToServer;
    server.GetMyGoodCount(tmpGoods.SrvMean, RoundDate(MasterData.ДатаДокумента, rdDay, True), AccsGoods.SrvMean, AccsReserv.SrvMean);
    tmpGoods.CopyDataFromServer;
    tmpGoods.SrvMean.Clear;
    LockCalc := False;
    MasterData.LoadContents('', tmpGoods);
  finally
    ChangeLock := False;
    ScrollLock := False;
    DropMode := False;
    MasterData.TableAutoCalcFields := True;
    SetCursor(CursorVis);
  end;
end;

procedure eCurrencyDoc_Change(Sender : TObject);
begin
//  bCurrency.Enabled := VarAsBool(MasterData.@Валюта.IsFocused);
end;

procedure eCurrencyDoc_ActionClear(Sender : TObject);
begin
//  bCurrency.Enabled := False;
end;

{$D-}
procedure dbgListData_GetImageIndex(Sender : TObject; var Index1, Index2 : Integer);
begin
  if MasterData.LinesCount() > 0 then
    if MasterData.Партия <> 0 then
      Index1 := 52
    else
      if VarAsBool(MasterData.@Правило.IsFocused) then
        Index1 := 42
      else
        Index1 := 49;
end;

procedure dbgListData_GetRowParams(Sender : TObject; DrawFont : TFont; var BackColor : TColor; Highlight : Boolean);
begin
  if (MasterData.LinesCount > 0) and (MasterData.GetDocState < 1) and
    (MasterData.НаличиеТовара < MasterData.Количество) then
    if Highlight then
      begin
        BackColor := BlZeroSel;
        DrawFont.Color := BlFZeroSel;
      end
    else
      begin
        BackColor := BlZero;
        DrawFont.Color := BlFZero;
      end;
end;
{$D+}

procedure eStores_Change(Sender : TObject);
begin
  if nbList.PageIndex <> 2 then
    exit;
  if GoodTbl.Active then
    if Stores.ValidIndex(Stores.CurIndex) then
      GoodTbl.SetRange(Stores.GetValue(Stores.CurIndex), Stores.GetValue(Stores.CurIndex))
end;

procedure bCourse_Click(Sender : TObject);
begin
  ChangeLock := True;
  DropMode := True;
  try
    ChCourse(MasterData, cvtICalc);
  finally
    ChangeLock := False;
    DropMode := False;
  end;
  CalcLocalDocSumByTableChange;
end;
                              
{$D-}
procedure dbgGood_GetRowParams(Sender : TObject; DrawFont : TFont; var BackColor : TColor; Highlight : Boolean);
begin
  if GoodTbl.IsFocused and (GoodTbl.НаличиеТовара < GoodTbl.Количество) and (MasterData.GetDocState < 1) then
    if Highlight then
      begin
        BackColor := BlZeroSel;
        DrawFont.Color := BlFZeroSel;
      end
    else
      begin
        BackColor := BlZero;
        DrawFont.Color := BlFZero;
      end;
end;

procedure dbgStore_GetRowParams(Sender : TObject; DrawFont : TFont; var BackColor : TColor; Highlight : Boolean);
begin
  if GoodTbl.IsFocused and (GoodTbl.НаличиеТовара < GoodTbl.Количество) and (MasterData.GetDocState < 1) then
    if Highlight then
      begin
        BackColor := BlZeroSel;
        DrawFont.Color := BlFZeroSel;
      end
    else
      begin
        BackColor := BlZero;
        DrawFont.Color := BlFZero;
      end;
end;
{$D+}

procedure miSortByCode_Click(Sender : TObject);
begin
  GoodTbl.SortBy('Код;Товар');
  miSortByCode.Checked := True;
  miSortByName.Checked := False;
end;

procedure miSortByName_Click(Sender : TObject);
begin
  GoodTbl.SortBy('Товар;Код');
  miSortByCode.Checked := False;
  miSortByName.Checked := True;
end;

procedure TDS_VPATimedAfterScroll(Sender : TObject);
begin
  if ScrollLock then
    exit;
  CheckControls;
  if miLinkDict.Checked and not IsNil(LinkDict) then
    LinkDict.Find(MasterData.Товар);
end;

procedure bPrice_Click(Sender : TObject);
var
  Price, PriceNT : Decimal;
  Tbl : ICValueTable;
begin
  if IsObjFocused(MasterData) then
    begin
      CursorVis := WaitCursorStart;
      MasterData.TableAutoCalcFields := False;
      MasterData.SaveTableBookmark();
      MasterData.DisableTableControls;
      ChangeLock := True;
      ScrollLock := True;
      LockCalc := True;
      DropMode := True;
      try
        PriceNT := MasterData.ЦенаБезНДС;
        Price := MasterData.Цена;
        Tbl := CreateObject('ТаблицаЗначений');
        MasterData.SaveContents('', Tbl);
        Tbl.Select;
        while Tbl.SelectNext do
          begin
            Tbl.Edit;
            Tbl.ЦенаБезНДС := PriceNT;
            Tbl.Цена := Price;
            SetCurPrice(Tbl);
            Tbl.Post;
          end;
        MasterData.LoadContents('', Tbl);
      finally
        ChangeLock := False;
        ScrollLock := False;
        LockCalc := False;
        DropMode := False;
        MasterData.TableAutoCalcFields := True;
        MasterData.GotoTablebookmark(True);
        MasterData.EnableTableControls;
        CalcLocalDocSumByTableChange;
        SetCursor(CursorVis);
      end;
    end;
end;

procedure miLinkDict_Click(Sender : TObject);
begin
  miLinkDict.Checked := not miLinkDict.Checked;
end;

procedure MenuItem6_Click(Sender : TObject);
begin
  TDS_VPAAfterPost(TDS);
end;

procedure btnTax_Click(Sender : TObject);
begin
  DropMode := True;
  ScrollLock := True;
  LockCalc := True;
  MasterData.TableAutoCalcFields := False;
  try
    MasterData.SelectLines;
    while MasterData.SelectNextLine do
      begin
        MasterData.EditLine;
        MasterData.СтавкаНДС := StrToFloat(edTax.Text);
        CalcPrices('СтавкаНДС', Null, MasterData);
        MasterData.PostLine;
      end;
  finally
    DropMode := False;
    ScrollLock := False;
    LockCalc := False;
    MasterData.TableAutoCalcFields := True;
  end;
  CalcLocalDocSumByTableChange;
end;

procedure rgCalcSum_Click(Sender : TObject);
begin
  MasterData.МетодРасчета := rgCalcSum.ItemIndex;
  TDS_VPAAfterPost(TDS);
end;

procedure Form_CloseQuery(var CanClose: Boolean);
begin
  if isSave and (VarAsBool(Options.GetServerPrm('CloseAck'))) and (MasterData.GetDocState = 0) then
    if (Form.ModalResult = mrCancel) and (MessageDlg('Закрить документ без сохранения?', mtCustom, ArrayOF(mbYes,mbNo),0) = mrNo)  then
      CanClose := false;
end;

procedure MDS_VPAAfterPost(Sender: TObject);
begin
 if AddDoc then
   ChangeDoc(clmtAppend,MasterData)
 else
   ChangeDoc(clmtEdit,MasterData);
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
Panel4:TO4Panel
Label1:TO4Label
Label2:TO4Label
Label26:TO4Label
eData:TO4DBEdit
eNumber:TO4DBEdit
eRespons:TO4DBEdit
rgCalcSum:TO4RadioGroup
nbList:TO4Notebook
dbgListData:TO4DBGrid
Panel2:TO4Panel
Panel6:TO4Panel
tbrSource:TO4ToolBar
tbSource:TO4ToolButton
Panel7:TO4Panel
tbrData:TO4ToolBar
ToolButton1:TO4ToolButton
tbRefresh:TO4ToolButton
tbParam:TO4ToolButton
dbgGood:TO4DBGrid
dbgStore:TO4DBGrid
Panel1:TO4Panel
Label35:TO4Label
eStores:TO4Edit
tsTable:TO4TabSet
BottomPanel:TO4Panel
ButtonPanel:TO4Panel
Panel8:TO4Panel
btOK:TO4Button
btCancel:TO4Button
Panel5:TO4Panel
tsSumms:TO4TabSet
nbSumms:TO4Notebook
Label3:TO4Label
Label15:TO4Label
Label19:TO4Label
Label34:TO4Label
Label4:TO4Label
Label5:TO4Label
eSumma:TO4DBEdit
eCurrencyDoc:TO4DBEdit
eCourseDoc:TO4DBEdit
eSummaV:TO4DBEdit
eSummaOptV:TO4DBEdit
eCnt:TO4DBEdit
ToolBar2:TO4ToolBar
ToolButton3:TO4ToolButton
GroupBox6:TO4GroupBox
Label21:TO4Label
Label13:TO4Label
eCurrency:TO4DBEdit
eCurs:TO4DBEdit
eSumVal:TO4DBEdit
bCourse:TO4Button
bPrice:TO4Button
GroupBox1:TO4GroupBox
Label7:TO4Label
Label14:TO4Label
btnTax:TO4Button
edTax:TO4Edit
TDS:TO4DocContentsSource
MDS:TO4DataSource
pmList:TO4PopupMenu
miLinkDict:TO4MenuItem
miDelRec:TO4MenuItem
miFresh:TO4MenuItem
MenuItem1:TO4MenuItem
MenuItem2:TO4MenuItem
MenuItem3:TO4MenuItem
miSort:TO4MenuItem
TVSGood:TO4TableValueSource
TVSStore:TO4TableValueSource
pmSort:TO4PopupMenu
miSortByCode:TO4MenuItem
miSortByName:TO4MenuItem
pmSave:TO4PopupMenu
MenuItem6:TO4MenuItem
