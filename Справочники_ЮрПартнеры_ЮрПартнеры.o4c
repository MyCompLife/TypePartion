interface

uses
  System, DispIntf, ConstNames, РаботаСПеременными, РаботаСОбъектами,
  РаботаСКомпонентамиVCL, РаботаСТаблицамиЗначений, РаботаСоСправочниками, Пользователи, РаботаСоСправочникамиCL;

implementation

var
  TblOwners : ICValueTable;
  MasterData, DetAdr, DetPhone, DetBankAcc, DetRepresenter,
  Regions, DetEmail, DetRespons, DetRegNumbers, AnalitPartnerRest : ICDictionary;
  UseLevels : Boolean;
  Opt : ICOptions;
  RegionsList : ICValueList;
  FieldName : string;

procedure MDS_VPABeforeOpen(Sender : TObject);
Var
  ActiveRegion : ICDictionary;
begin
  MasterData := MDS.GetMean;
  if IsNil(Opt) then
    Opt := CreateObject('ОпцииКлиента');
  UseLevels := VarAsBool(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption));
  RegionsList := CreateObject('СписокЗначений');
  Regions := CreateObject('Справочники.Регионы');
  RegionsList.AddValue(Trans('Все регионы'), Null);
  Regions.Select;
  while Regions.SelectNext do
    RegionsList.AddValue(Regions.Название, Regions); // или ('',S)
  RegionsList.UseControl(CtrlToVar(eRegion));
  RegionsList.CurIndex := 0;
  eRegion.Enabled := not GetUsersBlockedField('БлокировкаВыбораРегиона');
  ActiveRegion := GetUsersField('Регион');
  if not IsNil(ActiveRegion) then
    RegionsList.CurIndex := RegionsList.FindByValue(ActiveRegion)
end;

procedure Form_Open(Sender : TObject);
begin
  MasterData.Params[prmInterfaceType] := itMainForm;
  MakeStandartInterface(MasterData, Form, 'tbrData;tbrCtg', 'dbgData');
  TblOwners := CreateObject('ТаблицаЗначений');
  TblOwners.AddColumn('Название', vtcLink, 0);
  TblOwners.Open();
  DetPhone := SetDetailDict(MasterData, 'Телефоны', 'ПросмотрТелефонов', CtrlToVar(ntbLists.PageClass[0]));
  tsFilter.Down := GetFilterPanel(MasterData.GetSign);
  pFilter.Visible := tsFilter.Down;
end;

procedure GetTheOwners;
var
  DOwner : ICDictionary;
begin
  TblOwners.UseDataSource(0);
  TblOwners.Clear();
  TblOwners.CopyDataToServer;
  MasterData.SetSrvToClientPos;
  server.SGetTheOwners(MasterData.SrvMean, TblOwners.SrvMean);
  TblOwners.CopyDataFromServer;
  TblOwners.SrvMean.Clear;
  TblOwners.UseDataSource(CtrlToVar(TVSOwners));
end;

procedure tstLists_Change(Sender : TObject; NewTab : Integer; var AllowChange : Boolean);
begin
 case tstLists.Tabs.Strings[NewTab] of
  'Адреса' :
    if IsNil(DetAdr) then
      DetAdr := SetDetailDict(MasterData, 'Адреса', 'ПросмотрАдресов',
        CtrlToVar(ntbLists.PageClass[NewTab]));
  'Р/счета' :
    if IsNil(DetBankAcc) then
      DetBankAcc := SetDetailDict(MasterData, 'РасчСчета', 'ПросмотрРасчСчетов',
        CtrlToVar(ntbLists.PageClass[NewTab]));
  'Представители' :
    if IsNil(DetRepresenter) then
      DetRepresenter := SetDetailDict(MasterData, 'Представители', 'ПросмотрПредставителей',
        CtrlToVar(ntbLists.PageClass[NewTab]));
  'Аналитики взаиморасчетов' : 
    if IsNil(AnalitPartnerRest) then
      AnalitPartnerRest := SetDetailDict(MasterData, 'АналитикаВзаиморасчета', 'АналитикиВзаиморасчета',
        CtrlToVar(ntbLists.PageClass[NewTab]));
  'Ответственные лица' :
    if IsNil(DetRespons) then
      DetRespons := SetDetailDict(MasterData, 'ФизЛица', 'ПросмотрПредставителей',
        CtrlToVar(ntbLists.PageClass[NewTab]));
  'Является представителем' :
    GetTheOwners;
  'E-mail' :
    if IsNil(DetEmail) then
      DetEmail := SetDetailDict(MasterData, 'Email', 'ПросмотрEmail',
        CtrlToVar(ntbLists.PageClass[NewTab]));
  'Регистрационные номера' :
    if IsNil(DetRegNumbers) then
      DetRegNumbers := SetDetailDict(MasterData, 'РегНомера', 'ПросмотрРегНомеров',
        CtrlToVar(ntbLists.PageClass[NewTab]));
 end;
  ntbLists.PageIndex := NewTab;
end;

procedure miPrint_Click(Sender : TObject);
begin
  MasterData.PrintForm('', False, 0, Null)
end;

procedure miRefresh_Click(Sender : TObject);
begin
  MasterData.Refresh;
end;

procedure MDS_VPAAfterScroll(Sender : TObject);
begin
  MasterData.InteractiveUseLevels := UseLevels;
end;

procedure pmiDontUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := False;
end;

procedure pmiUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := True;
end;

procedure Form_Close(Sender : TObject);
begin
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption, UseLevels);
end;

procedure eRegion_Change(Sender: TObject);
begin
  if RegionsList.CurIndex > 0 then
    begin
      MasterData.CancelFieldFilter('Регион');
      MasterData.SetFieldFilter('Регион','=',RegionsList.GetValue(RegionsList.CurIndex),'','',null);
    end
   else
     MasterData.CancelFieldFilter('Регион');
  MasterData.Refresh;
end;

procedure MenuItem3_Click(Sender: TObject);
var
  Partn, Region : ICDictionary;
begin
  Region := CreateObject('Справочники.Регионы');
  Region.Select;
  Region.FindByCode('2',false);
  Partn := CreateObject('Справочники.ЮрПартнеры');
  Partn.Select;
  while Partn.SelectNext do
    begin   
      Partn.Edit;
      Partn.ТипЦены := 'ОптЦена';
      Partn.Регион := Region;
      Partn.Post;
      Partn.ApplyUpdates;
    end;
end;

procedure ToolButton1_Click(Sender: TObject);
var 
  Dic: ICDictionary;
  Cursor: TCursor;
begin
  Cursor := WaitCursorStart;
  Dic:= CreateObject('Справочники.ЮрПартнеры');
  Dic.Select;
  while Dic.SelectNext do
    begin
      Dic.Edit;        
      Dic.Логин := Dic.Код;
      Dic.Post;
      Dic.ApplyUpdates;
    end;
  WaitCursorFinish(Cursor);
end;

procedure ePartFilter_KeyDown(Sender: TObject; var Key: Integer);
begin
  FieldName := 'ПолноеНазвание';
  if key=13 then
    begin
      MasterData.SetFieldFilter(FieldName,'Like', '%' + ePartFilter.Text + '%','','',Null);
      MasterData.Refresh;
      form.ActiveControl := dbgData;
    end;
end;

procedure tbFilterApply_Click(Sender: TObject);
begin
  FieldName := 'ПолноеНазвание';
  MasterData.SetFieldFilter(FieldName,'Like', '%' + ePartFilter.Text + '%','','',Null);
  MasterData.Refresh;
  form.ActiveControl := dbgData;
end;

procedure tbGoodsFilterClear_Click(Sender: TObject);
begin
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  ePartFilter.Text := '';
end;

procedure tsFilter_Click(Sender: TObject);
begin
  pFilter.Visible := tsFilter.Down;
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  ePartFilter.Text := '';
  SetFilterPanel(MasterData.GetSign, tsFilter.Down);
end;

procedure tbSite_Click(Sender: TObject);
var
  Cursor: TCursor;
begin
  Cursor := WaitCursorStart;
  Server.CheckPartForSite;
  WaitCursorFinish(Cursor);
end;

procedure tsTypePartner_Change(Sender: TObject; NewTab: Integer; var AllowChange: Boolean);
begin
 case NewTab of
  0:
    begin
      MasterData.CancelFieldFilter('Поставщик');
      MasterData.CancelFieldFilter('Покупатель');
    end;
  1:
    begin
      MasterData.SetFieldFilter('Поставщик','=',true,'','',Null);
      MasterData.CancelFieldFilter('Покупатель');
    end;
  2:
    begin
      MasterData.SetFieldFilter('Покупатель','=',true,'','',Null);
      MasterData.CancelFieldFilter('Поставщик');
    end;
 end;
 MasterData.Refresh;
end;

{$D-}
procedure dbgData_GetImageIndex(Sender: TObject; var Index1, Index2: integer);
begin
  if MasterData.IsFocused then
    begin
      if VarAsBool(MasterData.ПометкаУдаление) then
       Index1 := 51;
    end;
end;
{$D+}

procedure miCheckDel_Click(Sender: TObject);
begin
 if MasterData.IsFocused then
   try
     MasterData.DisableControls;
     ChangeGoodToDelMark(MasterData);
     if VarAsBool(MasterData.ПометкаУдаление) then
       miCheckDel.Caption:='Снять отметку на удаление'
     else
       miCheckDel.Caption:='Установить отметку на удаление';
   finally
     MasterData.EnableControls;
   end;
end;

procedure miAllGoods_Click(Sender: TObject);
begin
 (Sender as TO4MenuItem).Checked := true;
 case (Sender as TO4MenuItem).Tag of
  0: MasterData.CancelFieldFilter('ПометкаУдаление');
  1: Masterdata.SetFieldFilter('ПометкаУдаление','=',-1,'','',Null);
  2: Masterdata.SetFieldFilter('ПометкаУдаление','<>',-1,'','',Null);
 end;
 Masterdata.Refresh;
end;

procedure tbGoodToDel_Click(Sender: TObject);
var x,y : integer;
begin
 tbGoodToDel.GetScreenPos(x,y);
 pmGoodsToDel.Popup(x,y+tbGoodToDel.Height);
end;

procedure MDS_VPATimedAfterScroll(Sender: TObject);
begin
  if MasterData.IsFocused then
   if not VarAsBool(MasterData.ПометкаУдаление) then
     miCheckDel.Caption:='Установить отметку на удаление'
   else
     miCheckDel.Caption:='Снять отметку на удаление';
end;

procedure miHistoryChangeObj_Click(Sender: TObject);
var P:ICProcessing;
begin
 if MasterData.IsFocused then
   begin
     P := CreateObject('Обработки.ИзмененияОбъектов');
     P.Execute('ДиалогИзмененияОбъектов',MasterData);
   end;
end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
splCtg:TO4Splitter
CtgPanel:TO4Panel
dbtCtg:TO4DBTreeView
tbrCtg:TO4ToolBar
tbAddLevel:TO4ToolButton
tbEditLevel:TO4ToolButton
tbDelLevel:TO4ToolButton
DataPanel:TO4Panel
splLists:TO4Splitter
tbrData:TO4ToolBar
tbAdd:TO4ToolButton
tbEdit:TO4ToolButton
tbDelete:TO4ToolButton
tbDelimiter1:TO4ToolButton
tbPrint:TO4ToolButton
tbRefresh:TO4ToolButton
tbGoodToDel:TO4ToolButton
tbSettings:TO4ToolButton
tbDelimiter2:TO4ToolButton
tsFilter:TO4ToolButton
ToolButton1:TO4ToolButton
ToolButton2:TO4ToolButton
tbSite:TO4ToolButton
ListsPanel:TO4Panel
tstLists:TO4TabSet
ntbLists:TO4Notebook
dbgOwners:TO4DBGrid
dmNotes:TO4DBMemo
Panel1:TO4Panel
Label2:TO4Label
eRegion:TO4Edit
pFilter:TO4Panel
CodePanel:TO4Panel
Label1:TO4Label
ePartFilter:TO4Edit
ToolBar1:TO4ToolBar
tbFilterApply:TO4ToolButton
ToolButton4:TO4ToolButton
tbGoodsFilterClear:TO4ToolButton
Panel2:TO4Panel
dbgData:TO4DBGrid
tsTypePartner:TO4TabSet
MDS:TO4DataSource
pmCtg:TO4PopupMenu
pmiAddLevel:TO4MenuItem
pmiAddSubLevel:TO4MenuItem
pmiEditLevel:TO4MenuItem
pmiDelLevel:TO4MenuItem
MenuItem4:TO4MenuItem
pmiUseLevel:TO4MenuItem
pmiDontUseLevel:TO4MenuItem
pmiUseNoLevel:TO4MenuItem
pmAddLevels:TO4PopupMenu
pmiAddBros:TO4MenuItem
pmiAddChild:TO4MenuItem
pmData:TO4PopupMenu
miAdd:TO4MenuItem
miEdit:TO4MenuItem
miDelete:TO4MenuItem
miDelimiter1:TO4MenuItem
miPrint:TO4MenuItem
miHistoryChangeObj:TO4MenuItem
miDelimiter2:TO4MenuItem
pmiSort:TO4MenuItem
miDelimiter3:TO4MenuItem
miRefresh:TO4MenuItem
miCheckDel:TO4MenuItem
miSettings:TO4MenuItem
MenuItem1:TO4MenuItem
MenuItem3:TO4MenuItem
TVSOwners:TO4TableValueSource
pmGoodsToDel:TO4PopupMenu
miAllGoods:TO4MenuItem
miGoodsToDel:TO4MenuItem
miWithoutGoodsToDel:TO4MenuItem
