interface

uses

  System, DispIntf, ConstNames, InitColors, Расчеты, РаботаСПеременными, XMLИмпортЭкспорт, РаботаСТаблицамиЗначенийCL;

implementation

const
  InsertCountLineNumber = 5;
  msgAdd = 'Добавлено ';
  msgRead = 'Прочитано ';
  msgRecordsToFile = ' записей в файле ';
  TxtExt = '.txt';
  ZipExt = '.zip';
  msgCompleted = 'Обработано ';
  msgFrom = ' из ';
  InRow_Separator = #30;
  OutRow_Separator = #0;
  InColumn_Separator = #9;
  OutColumn_Separator = ',';
  StrCommas = '''';
  StrDoubleCommas = '"';
  AndroidExportFileName = 'TmpFromCDB';
  AndroidExportUnionFileName = 'FromCDB';
  AndroidExportZipFileName = 'From1C';
  AndroidImportFileName = 'ToCDB';
  AndroidImportZipFileName = 'To1C';
  XMLExt = '.xml';
  cnfFarm = 1;
  cnfAlco = 2;
  DBVERSION = 4851;
  osWindowsMobile = 0;
  osAndroid = 1;
  PartnerSuffix = '_Partner_';
  ItemSuffix = '_Item_';
  AgentSuffix = '_Agent_';
  grItem = 1;
  grPartner = 2; 
  ItemsGroupZeroCode = 0;

var
  Means, ExportPath, FileExt, BaseName : string;
  IsCtg, UseGroup, UnitedNumbering : Boolean;
  CommercialAgents, CommercialAgentsGroup : ISDictionary;
  Log : string;
  OrderTable, OrderHeader, PhotoTbl, AgentsTable : ISValueTable;
  Text, FileName : String;
  ConfType  : integer;
  UnionPartnerDict, UnionItemsDict : Boolean;

procedure SetAndroidSettingsDictDefaultValues(AndroidSettingsDict : ISDictionary);server;
begin
  AndroidSettingsDict.Append;
  AndroidSettingsDict.ПарольДоступаКНастройкам := '1';
  AndroidSettingsDict.СпособОбмена := 0;
  AndroidSettingsDict.ПортСОД := '5555';
  AndroidSettingsDict.ОтображатьКодТовара := VarAsInt(True);
  AndroidSettingsDict.СрокАнализаДокументов := 30;
  AndroidSettingsDict.Post;
end;

procedure GetAndroidSettingsDict(var AndroidSettingsDict : ISDictionary);
begin
  if IsNil(AndroidSettingsDict) then
    begin
      AndroidSettingsDict := CreateObject('Справочники.НастройкиДляAndroid');
      if AndroidSettingsDict.Select then
        AndroidSettingsDict.SelectNext
      else
        SetAndroidSettingsDictDefaultValues(AndroidSettingsDict);
    end;
end;

function GetLogFromServer : string; server;
begin
  Result := Log;
end;

function GetExportFileName(ExportPath, MeanName : string; CommercialAgentsCode : Integer) : string;
begin
  Result := ExportPath + MeanName + '_' + BaseName + '_' + IntToStr(CommercialAgentsCode) + FileExt
end;

function GetCurrentDateTime : string;
begin
  Result := FormatDateTime('mm.dd.yyyy hh:nn:ss', CurrentDateTime)
end;

procedure CreateSrvObj(AExportPath, ABaseName : string; ACommercialAgentsGroup, ACommercialAgents : ISDictionary;
  AFileExt : string; AUseGroup : Boolean); server;
begin
  ExportPath := AExportPath;
  CommercialAgentsGroup := ACommercialAgentsGroup;
  CommercialAgents := ACommercialAgents;
  FileExt := AFileExt;
  UseGroup := AUseGroup;
  Log := '';
  BaseName := ABaseName;
end;

procedure EPFillCode(Mean : ISProcessing; var Success : Boolean);
var
  i, j, Total, TotalMean : Integer;
  MasterData : ISDictionary;
  StrMean, CodeFieldName : string;
begin
  TotalMean := WordCount(Means, ';');
  for i := 1 to TotalMean do
    begin
      StrMean := ExtractWord(i, Means, ';');
      MasterData := CreateObject(StrMean);
      MasterData.IncludeOnlyLevels(IsCtg);
      MasterData.Select;
      if (i = 1) or not UnitedNumbering then
        j := 1;
      Total := MasterData.RecordCount;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i) + Trans(msgFrom) +
        IntToStr(TotalMean), i, TotalMean);
      case MasterData.GetSign of
        'Товары' :
          CodeFieldName := 'Артикул'
        else
          CodeFieldName := 'Код'
      end;
      while MasterData.SelectNext do
        begin
          MasterData.Edit;
          MasterData._Default[CodeFieldName] := IntToStr(j);
          MasterData.Post;
          inc(j);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if j mod 100 = 0 then
            Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
              IntToStr(Total), j, Total)
        end;
    end;
  Success := True;
end;

function FillCode(AMeans : string; AIsCtg, AUnitedNumbering : Boolean) : Variant; server;
begin
  Means := AMeans;
  IsCtg := AIsCtg;
  UnitedNumbering := AUnitedNumbering;
  Result := EntryPoint(EPFillCode);
end;

function GetActivCnv(DIC : ISDictionary; FieldName : string) : string;
begin
  Result := '';
  case StrLowerCase(FieldName) of
    'банк.мфо' :
      if VarAsBool(DIC.@Банк.IsFocused) then
        Result := DIC.Банк.МФО;
    'банк.название' :
      if VarAsBool(DIC.@Банк.IsFocused) then
        Result := GetPartName(DIC.Банк, 0);
    'банк.город' :
      if VarAsBool(DIC.@Банк.IsFocused) and VarAsBool(DIC.Банк.@Город.IsFocused) then
        Result := DIC.Банк.Город.Название;
    'город.название' :
      if VarAsBool(DIC.@Город.IsFocused) then
        Result := DIC.Город.Название;
    'почтиндекс' :
      Result := DIC.ПочтИндекс;
    'кодгорода' :
      if VarAsBool(DIC.@Город.IsFocused) then
        Result := DIC.Город.ТелКод;
    else
      Result := DIC._Default[FieldName];
  end
end;  

   //**
procedure SaveDataToPaysHistoryCatalog(Partner : ISDictionary;  SumEndPer : Decimal;
                                        var XMLDoc, NodePaysByPartner : Variant; UseMarketObject : Boolean);
var
  NaklJournal, RetNaklJournal, PaysOut : ISJournal;
  NaklDoc : IsDocuments;
  SumPays, SumToPay : Decimal;
  NodePaysByPartnerITEM : OleVariant;

  AccsDoc : ISAccs;
  TblDoc : ISValueTable;
  NatCurrency : ISDictionary; 
  Constants : IS4VPAConst;
begin                     
  Constants := GetConstants;
  NatCurrency := CreateObject('Справочники.Валюты');
  NatCurrency := GetNatCurrency(NatCurrency);
  AccsDoc := CreateObject('Аккумуляторы.РасчетыПоДокументам');
  AccsDoc.ClearFieldBuffers;
  AccsDoc.ClearFieldFilters;
  AccsDoc.SetFieldFilter('Партнер',Partner);
  TblDoc := CreateObject('ValueTable');
  TblDoc.Open;
  AccsDoc.SaveGroupRestToValueTable(CurrentDateTime, 'Партнер;Валюта;Док;СумОбщВал;СумПрихВал', TblDoc);
  TblDoc.Select;
  while TblDoc.SelectNext do
    begin
      if TblDoc.СумОбщВал>0 then
        begin
          NodePaysByPartnerITEM := XMLDoc.CreateElement('ITEM');
          NodePaysByPartnerITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(TblDoc.Док.GetNumber)));
          //NodePaysByPartnerITEM.SetAttribute('DT', DateTimeToStr(TblDoc.Док.GetDate));
          NodePaysByPartnerITEM.SetAttribute('DT', FormatDateTime('yyyy-mm-dd', TblDoc.Док.GetDate) + 'T' + FormatDateTime('hh:nn:ss', TblDoc.Док.GetDate));
          NodePaysByPartnerITEM.SetAttribute('IsDeleted',VarAsStr(0));
          NodePaysByPartnerITEM.SetAttribute('IsPost',VarAsStr(1));
          //*NodePaysByPartnerITEM.SetAttribute('DocNumberPrefix','');
          if UseMarketObject then 
            begin 
              NodePaysByPartnerITEM.SetAttribute('A04', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Partner.Код)));
              if IsObjFocused(Partner._GetOwner) then
                NodePaysByPartnerITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Partner._GetOwner.CodeField)))
              else
                NodePaysByPartnerITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Partner.Код)));
            end
          else
            begin
              NodePaysByPartnerITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Partner.Код)));
            end;

          NodePaysByPartnerITEM.SetAttribute('A011', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(TblDoc.Док.GetNumber)));

          if IsObjFocused(TblDoc.Валюта) and not VarAsBool(TblDoc.Валюта.НацВалюта) then
            begin
              NodePaysByPartnerITEM.SetAttribute('A07', ReplaceOneStrWithAnother(FormatFloat('0.00',  TblDoc.СумОбщВал * NatCurrency.GetTimedValue('КурсНаличный',TblDoc.Док.GetDate)), ',', '.'));
              NodePaysByPartnerITEM.SetAttribute('A016', ReplaceOneStrWithAnother(FormatFloat('0.00',  TblDoc.СумПрихВал * NatCurrency.GetTimedValue('КурсНаличный',TblDoc.Док.GetDate)), ',', '.'));
            end
          else
            begin
              NodePaysByPartnerITEM.SetAttribute('A07', ReplaceOneStrWithAnother(FormatFloat('0.00',  TblDoc.СумОбщВал), ',', '.'));
              NodePaysByPartnerITEM.SetAttribute('A016', ReplaceOneStrWithAnother(FormatFloat('0.00',  TblDoc.СумПрихВал), ',', '.'));
            end; 

          NodePaysByPartner.AppendChild(NodePaysByPartnerITEM);
        end;
    end;


{

  PaysOut := CreateObject('Журналы.ЖурналПодчПлатежейОтп');
  PaysOut.SetDocMultiStateRange('1;2;');
  NaklJournal := CreateObject('Журналы.ЖурналНакладных');
  NaklJournal.SetDocMultiStateRange('1;2');
  RetNaklJournal := CreateObject('Журналы.ЖурналВозвратовОтПокупателя');
  RetNaklJournal.SetDocMultiStateRange('1;2');
  NaklJournal.SetDateRange(RoundDate(CurrentDate-365,rdDay,false),400000);
  NaklJournal.SetFieldFilter('Партнер','=',Partner,'','',Null);
  NaklJournal.SortByField('-ДатаДокумента');
  NaklJournal.Select;
  while NaklJournal.SelectNext do
    begin
      NaklDoc := NaklJournal.GetDoc;
      PaysOut.UseMaster(NaklDoc);
      RetNaklJournal.UseMaster(NaklDoc);
      SumPays := PaysOut.Total('СуммаВВалюте')+RetNaklJournal.Total('СуммаОпт');
      PaysOut.UseMaster(Null);
      RetNaklJournal.UseMaster(Null);
      SumToPay := NaklDoc.Сумма - SumPays;

      if SumToPay<>0 then
        begin
          NodePaysByPartnerITEM := XMLDoc.CreateElement('ITEM');
//          NodePaysByPartnerITEM.SetAttribute('Code', '11111111-1111-1111-1111-' + VarAsStr(NaklDoc.НомерДокумента));
          NodePaysByPartnerITEM.SetAttribute('Code',VarAsStr(NaklDoc.НомерДокумента));
          NodePaysByPartnerITEM.SetAttribute('Date', DateToStr(NaklDoc.ДатаДокумента));

        //  NodePaysByPartnerITEM.SetAttribute('Sum',  FormatFloat('0.00',  NaklDoc.Сумма));
        //  NodePaysByPartnerITEM.SetAttribute('ToPay',FormatFloat('0.00',  SumToPay));
        //  NodePaysByPartnerITEM.SetAttribute('Paid',FormatFloat('0.00',  SumPays));
          NodePaysByPartnerITEM.SetAttribute('Sum', ReplaceOneStrWithAnother(FormatFloat('0.00',  NaklDoc.Сумма), ',', '.'));
          NodePaysByPartnerITEM.SetAttribute('ToPay', ReplaceOneStrWithAnother(FormatFloat('0.00',  SumToPay), ',', '.'));
          NodePaysByPartnerITEM.SetAttribute('Paid', ReplaceOneStrWithAnother(FormatFloat('0.00',  SumPays), ',', '.'));

          NodePaysByPartnerITEM.SetAttribute('Partner', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Partner.Код)));
          NodePaysByPartner.AppendChild(NodePaysByPartnerITEM);
        end;
      SumEndPer := SumEndPer - SumToPay;
      if SumEndPer<=0 then exit;
    end;    }
end;

procedure ExportPartners(Mean : ISProcessing; ManPartner, Representative, ManPartnerDict,
  Groups, TLF, ADR : ISDictionary;
  TmpTbl : ISValueTable; AccsPart : ISAccs; Constants : IS4VPAConst;
  MeanName : string; UnionPartnerDict : Boolean; var i, j, k, jTotal : Integer;
  var TextFile, TextFileCtg, TextFileShops : TStringList;
  var Success : Boolean);
var
  MasterData, Ctg, TmpParent : ISDictionary;
  iTotal, ii : Integer;
  IsGroup : Boolean;
  StrLine, StrAddress, StrPhoneNumber, TmpStr : string;
begin
  MasterData := CreateObject(MeanName);
  MasterData.IncludeLevels(False);

  Representative.UseMaster(MasterData);
  TLF.UseMaster(MasterData);
  ADR.UseMaster(MasterData);
  ManPartner.UseMaster(MasterData);

  Ctg := CreateObject(MeanName);
  Ctg.IncludeOnlyLevels(True);
  Ctg.Select;
  jTotal := jTotal + Ctg.RecordCount;
  Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
    IntToStr(jTotal), j, jTotal);
  Groups.UseMaster(Ctg);

  while Ctg.SelectNext do
    begin
      if VarAsInt(Ctg.Код) = 0 then
        continue;
      if not UnionPartnerDict then
        begin
          if not UseGroup then
            if VarAsBool(CommercialAgentsGroup.@ГруппаПартнеров.IsFocused) then
              CommercialAgentsGroup := CommercialAgents.ГруппаПартнеров
            else
              break;
          IsGroup := True;
          if Groups.Select then
            while Groups.SelectNext do
              if IsObjEQ(CommercialAgentsGroup, Groups.@Группа, False) then
                begin
                  IsGroup := False;
                  break
                end;
          if IsGroup then
            continue;
        end;
      MasterData.UseParent(Ctg);
      MasterData.Select;
      TmpTbl.Clear;
      AccsPart.ClearFieldBuffers();
      AccsPart.ClearFieldFilters();
      AccsPart.SetCtgFieldFilter('Партнер', Ctg);
      AccsPart.IncludeZeroRest := False;
      AccsPart.AppendGroupRestToValueTable(CurrentDateTime, 'Партнер;СумОбщ', TmpTbl);
      TmpTbl.SortBy('Партнер');
      TmpTbl.Select;
      iTotal := MasterData.RecordCount;
      ii := 0;
      while MasterData.SelectNext do
        begin
          if VarAsInt(MasterData.Код) = 0 then
            continue;
          StrLine := '';
          StrLine := StrLine + IntToStr(MasterData.Код) + OutColumn_Separator;
          if MasterData.GetSign = 'ФизЛица' then
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.ПолноеНазвание, '''', StrDoubleCommas), 1, 60) + StrCommas + OutColumn_Separator
          else
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.NameField, '''', StrDoubleCommas), 1, 60) + StrCommas + OutColumn_Separator;
          if MasterData.HasField('ОПФ') and VarAsBool(MasterData.ОПФ.IsFocused) then
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.ОПФ.Value, '''', StrDoubleCommas), 1, 10) + StrCommas + OutColumn_Separator
          else
            StrLine := StrLine + StrCommas + StrCommas + OutColumn_Separator;
          TLF.Select;
          if TLF.FindByField('Активность', True, False) then
            StrPhoneNumber := '(' + GetActivCnv(TLF, 'КодГорода') + ') ' + GetActivCnv(TLF, 'Номер')
          else
            StrPhoneNumber := '';
          StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(StrPhoneNumber, '''', StrDoubleCommas), 1, 30) + StrCommas + OutColumn_Separator;
          ADR.Select;
          if ADR.FindByField('Активность', True, False) then
            StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес')
          else
            StrAddress := '';
          StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(StrAddress, '''', StrDoubleCommas), 1, 112) + StrCommas + OutColumn_Separator;
          ManPartner.Select;
          if ManPartner.SelectNext then
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(ManPartner.ПолноеНазвание, '''', StrDoubleCommas), 1, 100) + StrCommas + OutColumn_Separator
          else
            StrLine := StrLine + StrCommas + StrCommas + OutColumn_Separator;
          StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(VarAsDec(MasterData.Скидка)), ',', '.') + OutColumn_Separator;
          case VarAsInt(MasterData.ЦенаСправ) of
            0 :
              StrLine := StrLine + '1' + OutColumn_Separator; //розничная
            1 :
              StrLine := StrLine + '2' + OutColumn_Separator; //оптовая
            2 :
              StrLine := StrLine + '3' + OutColumn_Separator //другая
            else
              StrLine := StrLine + '1'+ OutColumn_Separator; //розничная
          end;
          if TmpTbl.Find(MasterData) then
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(VarAsDec(TmpTbl.СумОбщ)), ',', '.') + OutColumn_Separator
          else
            StrLine := StrLine + '0' + OutColumn_Separator;
          TmpStr := StrCopy(MasterData.Заметки, 1, 100);
          TmpStr := ReplaceOneStrWithAnother(TmpStr, '''', StrDoubleCommas);
          TmpStr := ReplaceOneStrWithAnother(TmpStr, #13#10, ' ');
          TmpStr := StrCopy(TmpStr, 1, 100);
          StrLine := StrLine + StrCommas + TmpStr + StrCommas + OutColumn_Separator;
          if Ctg.IsFocused then
            StrLine := StrLine + IntToStr(Ctg.Код)
          else
            StrLine := StrLine + '0';
          TextFile.Add(StrLine + OutRow_Separator);
          //магазины
          Representative.Select;
          while Representative.SelectNext do
            begin
              if VarAsInt(Representative.Код) = 0 then
                continue;
              ManPartnerDict := Representative.Название;
              StrLine := '';
              StrLine := StrLine + IntToStr(Representative.Код) + OutColumn_Separator;
              StrLine := StrLine + IntToStr(MasterData.Код) + OutColumn_Separator;
              StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(ManPartnerDict.ПолноеНазвание, '''', StrDoubleCommas), 1, 60) + StrCommas + OutColumn_Separator;
              TLF.UseMaster(ManPartnerDict);
              TLF.Select;
              if TLF.FindByField('Активность', True, False) then
                StrPhoneNumber := '(' + GetActivCnv(TLF, 'КодГорода') + ') ' + GetActivCnv(TLF, 'Номер')
              else
                StrPhoneNumber := '';
              StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(StrPhoneNumber, '''', StrDoubleCommas), 1, 30) + StrCommas + OutColumn_Separator;
              ADR.UseMaster(ManPartnerDict);
              ADR.Select;
              if ADR.FindByField('Активность', True, False) then
                StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес')
              else
                StrAddress := '';
              StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(StrAddress, '''', StrDoubleCommas), 1, 112) + StrCommas + OutColumn_Separator;
              ManPartner.UseMaster(ManPartnerDict);
              ManPartner.Select;
              if ManPartner.SelectNext then
                StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(ManPartner.ПолноеНазвание, '''', StrDoubleCommas), 1, 100) + StrCommas + OutColumn_Separator
              else
                StrLine := StrLine + StrCommas + StrCommas + OutColumn_Separator;
              TmpStr := StrCopy(ManPartnerDict.Заметки, 1, 100);
              TmpStr := ReplaceOneStrWithAnother(TmpStr, '''', StrDoubleCommas);
              TmpStr := ReplaceOneStrWithAnother(TmpStr, #13#10, ' ');
              TmpStr := StrCopy(TmpStr, 1, 100);
              StrLine := StrLine + StrCommas + TmpStr + StrCommas;
              TextFileShops.Add(StrLine + OutRow_Separator);
              inc(k)
            end;
          TLF.UseMaster(MasterData);
          ADR.UseMaster(MasterData);
          ManPartner.UseMaster(MasterData);
          inc(i);
          inc(ii);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if ii mod 10 = 0 then
            Mean.NotifyClientEx(2, Trans('Обработано ') + IntToStr(ii) + Trans(msgFrom) +
              IntToStr(iTotal), ii, iTotal);
        end;
      //категории
      StrLine := '';
      StrLine := StrLine + IntToStr(Ctg.Код) + OutColumn_Separator;
      StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(Ctg.NameField, '''', StrDoubleCommas), 1, 60) + StrCommas + OutColumn_Separator;
      TmpParent := Ctg.GetParent;
      if TmpParent.IsFocused then
        StrLine := StrLine + IntToStr(TmpParent.Код)
      else
        StrLine := StrLine + '0';
      TextFileCtg.Add(StrLine + OutRow_Separator);
      inc(j);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
        IntToStr(jTotal), j, jTotal);
    end;
end;

procedure EPExportCustomers(Mean : ISProcessing; var Success : Boolean);
var
  i, j, k, jTotal : Integer;
  PriceTypeDict, TLF, ADR, ManPartner, Groups, Representative, ManPartnerDict : ISDictionary;
  StrLine : string;
  TextFile, TextFileCtg, TextFileShops : TStringList;
  AccsPart : ISAccs;
  TmpTbl : ISValueTable;
  Constants : IS4VPAConst;
begin
  Log := '';
  TextFile := CreateStringList;
  TextFileCtg := CreateStringList;
  TextFileShops := CreateStringList;
  Success := True;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Insert');
    TextFile.Add('Customers');
    TextFile.Add('IDCustomer,Name,LawForm,Phone,Address,ContactPerson,Discount,IDPriceType,Balance,Notes,IDCustomerCtg');
    TextFile.Add('Integer,String,String,String,String,String,Decimal,Integer,Decimal,Text,Integer');

    TextFileCtg.Add(GetCurrentDateTime);
    TextFileCtg.Add('Insert');
    TextFileCtg.Add('CustomersCtg');
    TextFileCtg.Add('IDCustomerCtg,Name,IDParent');
    TextFileCtg.Add('Integer,String,Integer');

    TextFileShops.Add(GetCurrentDateTime);
    TextFileShops.Add('Insert');
    TextFileShops.Add('Shops');
    TextFileShops.Add('IDShop,IDCustomer,Name,Phone,Address,ContactPerson,Notes');
    TextFileShops.Add('Integer,Integer,String,String,String,String,Text');

    Representative := CreateObject('Справочники.Представители');
    TLF := CreateObject('Справочники.Телефоны');
    ADR := CreateObject('Справочники.Адреса');
    ManPartner := CreateObject('Справочники.ФизЛица');

    Constants := GetConstants;

    TmpTbl := CreateObject('ТаблицаЗначений');
    TmpTbl.AddColumn('Партнер', vtcLink, 0);
    TmpTbl.AddColumn('СумОбщ', vtcFft, 2);
    TmpTbl.Open;
    AccsPart := CreateObject('Аккумуляторы.РасчетыСПартнерами');

    Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
    i := 0;
    j := 0;
    k := 0;
    jTotal := 0;

    case VarAsInt(Constants.КлиентыДляКПК) of
      0 :
        ExportPartners(Mean, ManPartner, Representative, ManPartnerDict,
          Groups, TLF, ADR, TmpTbl, AccsPart, Constants, 'Справочники.ЮрПартнеры',
          VarAsBool(Constants.ПартнерыДляКПК), i, j, k, jTotal, TextFile, TextFileCtg, TextFileShops, Success);
      1 :
        ExportPartners(Mean, ManPartner, Representative, ManPartnerDict,
          Groups, TLF, ADR, TmpTbl, AccsPart, Constants, 'Справочники.ФизЛица',
          VarAsBool(Constants.ПартнерыДляКПК), i, j, k, jTotal, TextFile, TextFileCtg, TextFileShops, Success);
      2 :
        begin
          ExportPartners(Mean, ManPartner, Representative, ManPartnerDict,
            Groups, TLF, ADR, TmpTbl, AccsPart, Constants, 'Справочники.ЮрПартнеры',
            VarAsBool(Constants.ПартнерыДляКПК), i, j, k, jTotal, TextFile, TextFileCtg, TextFileShops, Success);
          if not Success then
            exit;
          ExportPartners(Mean, ManPartner, Representative, ManPartnerDict,
            Groups, TLF, ADR, TmpTbl, AccsPart, Constants, 'Справочники.ФизЛица',
            VarAsBool(Constants.ПартнерыДляКПК), i, j, k, jTotal, TextFile, TextFileCtg, TextFileShops, Success);
        end;
    end;
    if not Success then
      exit;
    TextFile.Insert(InsertCountLineNumber, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'Customers', CommercialAgentsGroup.Код));
    TextFileCtg.Insert(InsertCountLineNumber, VarAsStr(j));
    TextFileCtg.SaveToFile(GetExportFileName(ExportPath, 'CustomersCtg', CommercialAgentsGroup.Код));
    TextFileShops.Insert(InsertCountLineNumber, VarAsStr(k));
    TextFileShops.SaveToFile(GetExportFileName(ExportPath, 'Shops', CommercialAgentsGroup.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'Customers', CommercialAgentsGroup.Код) + #13#10;
    Log := Log + Trans(msgAdd) + IntToStr(j) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'CustomersCtg', CommercialAgentsGroup.Код) + #13#10;
    Log := Log + Trans(msgAdd) + IntToStr(k) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'Shops', CommercialAgentsGroup.Код) + #13#10;
  finally
    TextFile.Free;
    TextFileCtg.Free;
    TextFileShops.Free;
  end;
end;

function ExportCustomers : Variant; server;
begin
  Result := EntryPoint(EPExportCustomers);
end;

procedure EPExportItems(Mean : ISProcessing; var Success : Boolean);
var
  i, ii, j, k, iTotal, jTotal, ItemNameLength, FullItemNameLength : Integer;
  MasterData, TmpParent, Ctg, Groups, PackDict, Currency, TmpStore : ISDictionary;
  TextFile, TextFileCtg, TextFilePack : TStringList;
  StrLine, TmpStr, StrShortName : string;
  AccsGoodCurrent : ISAccs;
  Course, TmpCount : Decimal;
  IsGroup, UseShortName : Boolean;
  PackCollect : ISCollection;
  TmpTbl : ISValueTable;
  Constants : IS4VPAConst;
  Options : ISOptions;
  TmpCurrencyTbl : ISValueTable;
begin
  Log := '';
  TextFile := CreateStringList;
  TextFileCtg := CreateStringList;
  TextFilePack := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Insert');
    TextFile.Add('Items');
    TextFile.Add('IDItem,Code,Name,FullName,Unit,TaxRate,WarehouseQuantity,Description,' +
      'Weight,Price1,Price2,Price3,DocumentQuantity,IDItemCtg,DocumentDiscount,MinQuantity,ClientQuantity');
    TextFile.Add('Integer,String,String,String,String,Decimal,Decimal,Text,Decimal,Decimal,Decimal,' +
      'Decimal,Decimal,Integer,Decimal,Decimal,Decimal');
    TextFileCtg.Add(GetCurrentDateTime);
    TextFileCtg.Add('Insert');
    TextFileCtg.Add('ItemsCtg');
    TextFileCtg.Add('IDItemCtg,Name,IDParent');
    TextFileCtg.Add('Integer,String,Integer');
    TextFilePack.Add(GetCurrentDateTime);
    TextFilePack.Add('Insert');
    TextFilePack.Add('Packings');
    TextFilePack.Add('IDPacking,IDItem,Name,Quantity');
    TextFilePack.Add('Integer,Integer,String,Decimal');
    Constants := GetConstants;
    Options := GetOptions;
    TmpStore := Constants.СкладДляКПК;
    MasterData := CreateObject('Справочники.Товары');
    MasterData.IncludeLevels(False);
    PackDict := CreateObject('Справочники.Упаковки');
    PackDict.UseMaster(MasterData);
    AccsGoodCurrent := CreateObject('Аккумуляторы.ОстаткиТоваровНаСегодня');
    TmpTbl := CreateObject('ТаблицаЗначений');
    TmpTbl.AddColumn('Товар', vtcLink, 0);
    TmpTbl.AddColumn('КолОбщ', vtcFft, 5);
    TmpTbl.Open;
    Ctg := CreateObject('Справочники.Товары');
    Ctg.IncludeOnlyLevels(True);
    Ctg.Select;
    jTotal := Ctg.RecordCount;
    UseShortName := VarAsBool(Constants.ИспользоватьКраткоеНазвание);
    ItemNameLength := 30;
    FullItemNameLength := 70;
    Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
    Groups.UseMaster(Ctg);
    TmpCurrencyTbl := CreateObject('ТаблицаЗначений');
    TmpCurrencyTbl.AddColumn('Валюта', vtcLink, 0);
    TmpCurrencyTbl.AddColumn('Курс', vtcFFt, 6);
    TmpCurrencyTbl.Open;
    Currency := CreateObject('Справочники.Валюты');
    Currency.Select;
    while Currency.SelectNext do
      begin
        TmpCurrencyTbl.Append;
        Course := Currency.GetTimedValue(Constants.UsedCurs, CurrentDateTime);
        if Course <= 0 then
          Course := 1;
        TmpCurrencyTbl.Валюта := Currency;
        TmpCurrencyTbl.Курс := Course;
        TmpCurrencyTbl.Post;
      end;
    TmpCurrencyTbl.SortBy('Валюта');
    TmpCurrencyTbl.Select;
    i := 0;
    j := 0;
    k := 0;
    Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
    while Ctg.SelectNext do
      begin
        if VarAsInt(Ctg.Артикул) = 0 then
          continue;
        if not VarAsBool(Constants.ТоварыДляКПК) then
          begin
            if not UseGroup then
              if VarAsBool(CommercialAgentsGroup.@ГруппаТоваров.IsFocused) then
                CommercialAgentsGroup := CommercialAgents.ГруппаТоваров
              else
                break;
            IsGroup := True;
            if Groups.Select then
              while Groups.SelectNext do
                if IsObjEQ(CommercialAgentsGroup, Groups.@Группа, False) then
                  begin
                    IsGroup := False;
                    break
                  end;
            if IsGroup then
              continue;
          end;
        MasterData.UseParent(Ctg);
        MasterData.Select;
        TmpTbl.Clear;
        AccsGoodCurrent.ClearFieldBuffers();
        AccsGoodCurrent.ClearFieldFilters();
        AccsGoodCurrent.SetCtgFieldFilter('Товар', Ctg);
        AccsGoodCurrent.IncludeZeroRest := False;
        if VarAsBool(Constants.ТоварыДляКПК) then
          begin
            if TmpStore.IsFocused then
              AccsGoodCurrent.SetFieldFilter('Склад', TmpStore);
          end
        else
          if VarAsBool(CommercialAgentsGroup.@ГруппаТоваров.IsFocused) then
            begin
              CommercialAgentsGroup := CommercialAgentsGroup.ГруппаТоваров;
              if VarAsBool(CommercialAgentsGroup.@Склад.IsFocused) then
                AccsGoodCurrent.SetFieldFilter('Склад', CommercialAgentsGroup.@Склад);
            end;
        AccsGoodCurrent.AppendGroupRestToValueTable(RoundDate(CurrentDateTime, rdDay, True), 'Товар;КолОбщ', TmpTbl);
        TmpTbl.SortBy('Товар');
        TmpTbl.Select;
        iTotal := MasterData.RecordCount;
        ii := 0;
        while MasterData.SelectNext do
          begin
            if VarAsInt(MasterData.Артикул) = 0 then
              continue;
            TmpCount := 0;
            if TmpTbl.Find(MasterData) then
              TmpCount := TmpTbl.КолОбщ;
            if ((VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(Constants.КоличествоБольшеНуляКПК))
              or (not VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(CommercialAgents.КоличествоБольшеНуля)))
              and (TmpCount <= 0) then
              begin
                inc(ii);
                if Mean.Terminated then
                  begin
                    Success := False;
                    exit
                  end;
                if ii mod 10 = 0 then
                  Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
                    IntToStr(iTotal), ii, iTotal);
                continue;
              end;
            StrLine := '';
            StrLine := StrLine + IntToStr(MasterData.Артикул) + OutColumn_Separator;
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.Код, '''', StrDoubleCommas), 1, 20) + StrCommas + OutColumn_Separator;
            if UseShortName and (StrTrim(MasterData.КороткоеНазвание) <> '') then
              StrShortName := StrTrim(MasterData.КороткоеНазвание)
            else
              StrShortName := StrTrim(MasterData.НазвТовара);
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(StrShortName, '''', StrDoubleCommas), 1, ItemNameLength) + StrCommas + OutColumn_Separator;
            StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.НазвТовара, '''', StrDoubleCommas), 1, FullItemNameLength) + StrCommas + OutColumn_Separator;
            if VarAsBool(MasterData.ЕдИзм.IsFocused) then
              StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.ЕдИзм.Value, '''', StrDoubleCommas), 1, 10) + StrCommas + OutColumn_Separator
            else
              StrLine := StrLine + StrCommas + StrCommas + OutColumn_Separator;
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(MasterData.СтавкаНДС), ',', '.') + OutColumn_Separator;
            if TmpCount <> 0 then
              StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(VarAsDec(TmpCount)), ',', '.') + OutColumn_Separator
            else
              StrLine := StrLine + '0' + OutColumn_Separator;
            TmpStr := StrCopy(MasterData.Информация, 1, 100);
            TmpStr := ReplaceOneStrWithAnother(TmpStr, '''', StrDoubleCommas);
            TmpStr := ReplaceOneStrWithAnother(TmpStr, #13#10, ' ');
            TmpStr := StrCopy(TmpStr, 1, 100);
            StrLine := StrLine + StrCommas + TmpStr + StrCommas + OutColumn_Separator;
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(MasterData.Масса), ',', '.') + OutColumn_Separator;
            if TmpCurrencyTbl.Find(MasterData.@@ВалОтпЦены) then
              Course := TmpCurrencyTbl.Курс
            else
              Course := 1;
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.Цена * Course, 2)), ',', '.') + OutColumn_Separator;
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.ОптЦена * Course, 2)), ',', '.') + OutColumn_Separator;
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.ДрЦена * Course, 2)), ',', '.') + OutColumn_Separator;
            StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.НовЦена * Course, 2)), ',', '.') + OutColumn_Separator;
            StrLine := StrLine + '0' + OutColumn_Separator;
            if Ctg.IsFocused then
              StrLine := StrLine + IntToStr(Ctg.Артикул) + OutColumn_Separator
            else
              StrLine := StrLine + '0' + OutColumn_Separator;
            StrLine := StrLine + '0' + OutColumn_Separator;
            StrLine := StrLine + '0' + OutColumn_Separator;
            StrLine := StrLine + '0';
            TextFile.Add(StrLine + OutRow_Separator);
            //упаковки
            PackDict.Select;
            while PackDict.SelectNext do
              begin
                StrLine := '';
                StrLine := StrLine + IntToStr(k + 1) + OutColumn_Separator; //PackDict.Код
                StrLine := StrLine + IntToStr(MasterData.Артикул) + OutColumn_Separator;
                PackCollect := PackDict.НазвУпаковки;
                if VarAsBool(PackCollect.IsFocused) then
                  StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(PackCollect.Value, '''', StrDoubleCommas), 1, 10) + StrCommas + OutColumn_Separator
                else
                  StrLine := StrLine + StrCommas + StrCommas + OutColumn_Separator;
                StrLine := StrLine + ReplaceOneStrWithAnother(VarAsStr(PackDict.Количество), ',', '.');
                TextFilePack.Add(StrLine + OutRow_Separator);
                inc(k)
              end;
            inc(i);
            inc(ii);
            if Mean.Terminated then
              begin
                Success := False;
                exit
              end;
            if ii mod 10 = 0 then
              Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
                IntToStr(iTotal), ii, iTotal);
          end;
        //категории
        StrLine := '';
        StrLine := StrLine + IntToStr(Ctg.Артикул) + OutColumn_Separator;
        StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(Ctg.НазвТовара, '''', StrDoubleCommas), 1, 30) + StrCommas + OutColumn_Separator;
        TmpParent := Ctg.GetParent;
        if TmpParent.IsFocused then
          StrLine := StrLine + IntToStr(TmpParent.Артикул)
        else
          StrLine := StrLine + '0';
        TextFileCtg.Add(StrLine + OutRow_Separator);
        inc(j);
        if Mean.Terminated then
          begin
            Success := False;
            exit
          end;
        Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
      end;
    TextFile.Insert(InsertCountLineNumber, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(CommercialAgentsGroup.ПутьЭкспортаПК, 'Items', CommercialAgentsGroup.Код));
    TextFileCtg.Insert(InsertCountLineNumber, VarAsStr(j));
    TextFileCtg.SaveToFile(GetExportFileName(CommercialAgentsGroup.ПутьЭкспортаПК, 'ItemsCtg', CommercialAgentsGroup.Код));
    TextFilePack.Insert(InsertCountLineNumber, VarAsStr(k));
    TextFilePack.SaveToFile(GetExportFileName(CommercialAgentsGroup.ПутьЭкспортаПК, 'Packings', CommercialAgentsGroup.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'Items', CommercialAgentsGroup.Код) + #13#10;
    Log := Log + Trans(msgAdd) + IntToStr(j) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'ItemsCtg', CommercialAgentsGroup.Код) + #13#10;
    Log := Log + Trans(msgAdd) + IntToStr(k) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'Packings', CommercialAgentsGroup.Код) + #13#10;
  finally
    TextFile.Free;
    TextFileCtg.Free;
    TextFilePack.Free;
  end;
  Success := True;
end;

function ExportItems : Variant; server;
begin
  Result := EntryPoint(EPExportItems);
end;                

procedure AppendPriceType(PriceTypes : ISDictionary; Code : Integer; Name, FieldName : string;
  Active : Boolean);
begin
  PriceTypes.Append;
  PriceTypes.Код := Code;
  PriceTypes.Название := Name;
  PriceTypes.НазваниеПоля := FieldName;
  PriceTypes.Активность := Active;
  PriceTypes.Post;
end;

procedure EPExportPriceTypes(Mean : ISProcessing; var Success : Boolean);
var
  i, Total : Integer;
  MasterData, TmpParent : ISDictionary;
  TextFile : TStringList;
  StrLine : string;
begin
  Log := '';
  TextFile := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Insert');
    TextFile.Add('PriceTypes');
    TextFile.Add('IDPriceType,Name,Active,PriceFieldName');
    TextFile.Add('Integer,String,Integer,String');
    MasterData := CreateObject('Справочники.ТипыЦен');
    if MasterData.Select then
      begin
        MasterData.SortByField('Код');
        if not MasterData.FindByField('Активность', -1, False) and MasterData.SelectNext then
          begin
            MasterData.Edit;
            MasterData.Активность := -1;
            MasterData.Post;
          end
      end
    else
      begin
        AppendPriceType(MasterData, 1, 'Розничная', '1', True);
        AppendPriceType(MasterData, 2, 'Мелкий опт', '2', False);
        AppendPriceType(MasterData, 3, 'Крупный опт', '3', False);
      end;
    Total := MasterData.RecordCount;
    i := 0;
    MasterData.Select;
    while MasterData.SelectNext do
      begin
        if VarAsInt(MasterData.Код) = 0 then
          continue;
        StrLine := '';
        StrLine := StrLine + IntToStr(MasterData.Код) + OutColumn_Separator;
        StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.Название, '''', StrDoubleCommas), 1, 30) + StrCommas + OutColumn_Separator;
        StrLine := StrLine + VarAsStr(VarAsInt(MasterData.Активность)) + OutColumn_Separator;
        StrLine := StrLine + StrCommas + MasterData.НазваниеПоля + StrCommas;
        TextFile.Add(StrLine + OutRow_Separator);
        inc(i);
        if Mean.Terminated then
          begin
            Success := False;
            exit
          end;
        if i mod 10 = 0 then
          Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i) + Trans(msgFrom) +
            IntToStr(Total), i, Total)
      end;
    TextFile.Insert(InsertCountLineNumber, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'PriceTypes', CommercialAgentsGroup.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'PriceTypes', CommercialAgentsGroup.Код) + #13#10;
  finally
    TextFile.Free;
  end;
  Success := True;
end;

function ExportPriceTypes : Variant; server;
begin
  Result := EntryPoint(EPExportPriceTypes);
end;

procedure AddCommercialAgentToFile(CommercialAgents : ISDictionary; var TextFile : TStringList; var i : integer);
var
  StrLine : string;
begin
  StrLine := '';
  StrLine := StrLine + IntToStr(CommercialAgents.Код)+ OutColumn_Separator;
  StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(CommercialAgents.Логин, '''', StrDoubleCommas), 1, 10) + StrCommas + OutColumn_Separator;
  StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(CommercialAgents.Пароль, '''', StrDoubleCommas), 1, 10) + StrCommas + OutColumn_Separator;
  StrLine := StrLine + VarAsStr(VarAsInt(CommercialAgents.НастройкаЦены)) + OutColumn_Separator;
  StrLine := StrLine + VarAsStr(VarAsInt(CommercialAgents.Активность)) + OutColumn_Separator;
  StrLine := StrLine + VarAsStr(VarAsInt(CommercialAgents.НастройкаТипаЦеныИСкидок)) + OutColumn_Separator;
  StrLine := StrLine + VarAsStr(VarAsInt(CommercialAgents.ПересчетЦен));
  TextFile.Add(StrLine + OutRow_Separator);
  inc(i);
end;

procedure EPExportCommercialAgents(Mean : ISProcessing; var Success : Boolean);
var
  i, Total : Integer;
  MasterData, TmpParent : ISDictionary;
  TextFile : TStringList;
begin
  Log := '';
  TextFile := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Insert');
    TextFile.Add('CommercialAgents');
    TextFile.Add('IDCommercialAgent,Login,Password,PriceSetting,Active,PriceTypeAndDiscount,RecalcPriceAtAddDocByTempl');
    TextFile.Add('Integer,String,String,Integer,Integer,Integer,Integer');
    i := 0;
    case VarAsInt(CommercialAgents.ТипПередачиНаКПК) of
      0 :
        AddCommercialAgentToFile(CommercialAgents, TextFile, i);
      1 :
        begin
          TmpParent := CommercialAgents.GetParent;
          if TmpParent.IsFocused then
            begin
              MasterData := CreateObject('Справочники.ТорговыеАгенты');
              MasterData.UseParent(TmpParent);
              MasterData.SortByField('Логин');
              MasterData.Select;
              while MasterData.SelectNext do
                AddCommercialAgentToFile(MasterData, TextFile, i);
            end
          else
            AddCommercialAgentToFile(CommercialAgents, TextFile, i);
        end;
      2 :
        begin
          MasterData := CreateObject('Справочники.ТорговыеАгенты');
          MasterData.SortByField('Логин');
          MasterData.Select;
          while MasterData.SelectNext do
            AddCommercialAgentToFile(MasterData, TextFile, i);
        end;
    end;
    if Mean.Terminated then
      begin
        Success := False;
        exit
      end;
    if i mod 10 = 0 then
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i) + Trans(msgFrom) +
        IntToStr(Total), i, Total);
    TextFile.Insert(InsertCountLineNumber, VarAsStr(i));
    //всегда только 1 агент
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'CommercialAgents', CommercialAgents.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'CommercialAgents', CommercialAgents.Код) + #13#10;
  finally
    TextFile.Free;
  end;
  Success := True;
end;

function ExportCommercialAgents : Variant; server;
begin
  Result := EntryPoint(EPExportCommercialAgents);
end;

procedure EPExportRoute(Mean : ISProcessing; var Success : Boolean);
var
  i, j : Integer;
  MasterData : ISDocuments;
  MasterJournal : ISJournal;
  TextFile, TextFileTable : TStringList;
  StrLine, TmpStr : string;
begin
  Log := '';
  TextFile := CreateStringList;
  TextFileTable := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Insert');
    TextFile.Add('RouteHeader');
    TextFile.Add('IDRoute,DocumentNumber,DocumentDateTime,IDCommercialAgent,Comment');
    TextFile.Add('Integer,String,DateTime,Integer,Text');

    TextFileTable.Add(GetCurrentDateTime);
    TextFileTable.Add('Insert');
    TextFileTable.Add('RouteTable');
    TextFileTable.Add('IDRow,IDRoute,IDCustomer,IDShop');
    TextFileTable.Add('Integer,Integer,Integer,Integer');

    MasterJournal := CreateObject('Журналы.ЖурналМаршрутов');
    MasterJournal.CancelFieldFilter('ТорговыйАгент');
    MasterJournal.SetFieldFilter('ТорговыйАгент', '=', CommercialAgents, '', '', '');
    MasterJournal.SetDocStateRange(1);
    MasterJournal.Select;
    i := 0;
    j := 0;
    while MasterJournal.SelectNext do
      begin
        MasterData := MasterJournal.GetDoc;
        inc(i);
        StrLine := '';
        StrLine := StrLine + IntToStr(i)+ OutColumn_Separator;
        StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.НомерДокумента, '''', StrDoubleCommas), 1, 10) + StrCommas + OutColumn_Separator;
        StrLine := StrLine + StrCommas + FormatDateTime('mm.dd.yyyy hh:nn:ss', MasterData.ДатаДокумента) + StrCommas + OutColumn_Separator;
        StrLine := StrLine + IntToStr(MasterData.ТорговыйАгент.Код)+ OutColumn_Separator;
        TmpStr := StrCopy(MasterData.Заметки, 1, 200);
        TmpStr := ReplaceOneStrWithAnother(TmpStr, '''', StrDoubleCommas);
        TmpStr := ReplaceOneStrWithAnother(TmpStr, #13#10, ' ');
        TmpStr := StrCopy(TmpStr, 1, 200);
        StrLine := StrLine + StrCommas + TmpStr + StrCommas;
        TextFile.Add(StrLine + OutRow_Separator);
        if Mean.Terminated then
          begin
            Success := False;
            exit
          end;
        if i mod 10 = 0 then
          Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i), i, i);
        //табличная часть
        MasterData.SelectLines;
        while MasterData.SelectNextLine do
          begin
            inc(j);
            StrLine := '';
            StrLine := StrLine + IntToStr(j) + OutColumn_Separator;
            StrLine := StrLine + IntToStr(i) + OutColumn_Separator;
            StrLine := StrLine + IntToStr(MasterData.Партнер.Код) + OutColumn_Separator;
            if VarAsBool(MasterData.@ТорговаяТочка.IsFocused) then
              StrLine := StrLine + IntToStr(MasterData.ТорговаяТочка.Код)
            else
              StrLine := StrLine + '0';
            TextFileTable.Add(StrLine + OutRow_Separator);
          end;
      end;
    TextFile.Insert(InsertCountLineNumber, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'RouteHeader', CommercialAgents.Код));
    TextFileTable.Insert(InsertCountLineNumber, VarAsStr(j));
    TextFileTable.SaveToFile(GetExportFileName(ExportPath, 'RouteTable', CommercialAgents.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'RouteHeader', CommercialAgents.Код) + #13#10;
    Log := Log + Trans(msgAdd) + IntToStr(j) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'RouteTable', CommercialAgents.Код) + #13#10;
  finally
    TextFile.Free;
    TextFileTable.Free;
  end;
  Success := True;
end;

function ExportRoute : Variant; server;
begin
  Result := EntryPoint(EPExportRoute);
end;

procedure EPExportVisitResultTypes(Mean : ISProcessing; var Success : Boolean);
var
  i, Total : Integer;
  MasterData, TmpParent : ISDictionary;
  TextFile : TStringList;
  StrLine : string;
begin
  Log := '';
  TextFile := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Insert');
    TextFile.Add('VisitResultTypes');
    TextFile.Add('IDVisitResultType,Name');
    TextFile.Add('Integer,String');
    MasterData := CreateObject('Справочники.РезультатыПосещений');
    MasterData.Select;
    Total := MasterData.RecordCount;
    i := 0;
    while MasterData.SelectNext do
      begin
        if VarAsInt(MasterData.Код) = 0 then
          continue;
        StrLine := '';
        StrLine := StrLine + IntToStr(MasterData.Код) + OutColumn_Separator;
        StrLine := StrLine + StrCommas + StrCopy(ReplaceOneStrWithAnother(MasterData.Название, '''', StrDoubleCommas), 1, 30) + StrCommas;
        TextFile.Add(StrLine + OutRow_Separator);
        inc(i);
        if Mean.Terminated then
          begin
            Success := False;
            exit
          end;
        if i mod 10 = 0 then
          Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i) + Trans(msgFrom) +
            IntToStr(Total), i, Total)
      end;
    TextFile.Insert(InsertCountLineNumber, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'VisitResultTypes', CommercialAgentsGroup.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'VisitResultTypes', CommercialAgentsGroup.Код) + #13#10;
  finally
    TextFile.Free;
  end;
  Success := True;
end;

function ExportVisitResultTypes : Variant; server;
begin
  Result := EntryPoint(EPExportVisitResultTypes);
end;

procedure EPExportUpdateItems(Mean : ISProcessing; var Success : Boolean);
var
  i, ii, j, iTotal, jTotal : Integer;
  MasterData, Ctg, TmpParent, Groups, Currency, TmpStore : ISDictionary;
  TextFile : TStringList;
  StrLine : string;
  Constants : IS4VPAConst;
  IsGroup : Boolean;
  AccsGoodCurrent : ISAccs;
  TmpTbl, TmpCurrencyTbl : ISValueTable;
  Course, TmpCount : Decimal;
begin
  Log := '';
  TextFile := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Update');
    TextFile.Add('Items');
    TextFile.Add('WarehouseQuantity,Price1,Price2,Price3');
    TextFile.Add('Decimal,Decimal,Decimal,Decimal');
    TextFile.Add('IDItem');
    TextFile.Add('Integer');
    Constants := GetConstants;
    TmpStore := Constants.СкладДляКПК;
    AccsGoodCurrent := CreateObject('Аккумуляторы.ОстаткиТоваровНаСегодня');
    TmpTbl := CreateObject('ТаблицаЗначений');
    TmpTbl.AddColumn('Товар', vtcLink, 0);
    TmpTbl.AddColumn('КолОбщ', vtcFft, 5);
    TmpTbl.Open;
    TmpCurrencyTbl := CreateObject('ТаблицаЗначений');
    TmpCurrencyTbl.AddColumn('Валюта', vtcLink, 0);
    TmpCurrencyTbl.AddColumn('Курс', vtcFFt, 6);
    TmpCurrencyTbl.Open;
    Currency := CreateObject('Справочники.Валюты');
    Currency.Select;
    while Currency.SelectNext do
      begin
        TmpCurrencyTbl.Append;
        Course := Currency.GetTimedValue(Constants.UsedCurs, CurrentDateTime);
        if Course <= 0 then
          Course := 1;
        TmpCurrencyTbl.Валюта := Currency;
        TmpCurrencyTbl.Курс := Course;
        TmpCurrencyTbl.Post;
      end;
    TmpCurrencyTbl.SortBy('Валюта');
    TmpCurrencyTbl.Select;
    MasterData := CreateObject('Справочники.Товары');
    Ctg := CreateObject('Справочники.Товары');
    Ctg.IncludeOnlyLevels(True);
    Ctg.Select;
    jTotal := Ctg.RecordCount;
    Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
    Groups.UseMaster(Ctg);
    i := 0;
    j := 0;
    Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
    while Ctg.SelectNext do
      begin
        if VarAsInt(Ctg.Артикул) = 0 then
          continue;
        if not VarAsBool(Constants.ТоварыДляКПК) then
          begin
            IsGroup := True;
            if Groups.Select then
              while Groups.SelectNext do
                if IsObjEQ(CommercialAgentsGroup, Groups.@Группа, False) then
                  begin
                    IsGroup := False;
                    break
                  end;
            if IsGroup then
              continue;
          end;
        MasterData.UseParent(Ctg);
        MasterData.Select;
        TmpTbl.Clear;
        AccsGoodCurrent.ClearFieldBuffers();
        AccsGoodCurrent.ClearFieldFilters();
        AccsGoodCurrent.SetCtgFieldFilter('Товар', Ctg);
        if VarAsBool(Constants.ТоварыДляКПК) then
          begin
            if TmpStore.IsFocused then
              AccsGoodCurrent.SetFieldFilter('Склад', TmpStore);
          end
        else
          if VarAsBool(CommercialAgents.@Склад.IsFocused) then
            AccsGoodCurrent.SetFieldFilter('Склад', CommercialAgents.@Склад);
        AccsGoodCurrent.IncludeZeroRest := False;
        AccsGoodCurrent.AppendGroupRestToValueTable(RoundDate(CurrentDateTime, rdDay, True), 'Товар;КолОбщ', TmpTbl);
        TmpTbl.SortBy('Товар');
        TmpTbl.Select;
        iTotal := MasterData.RecordCount;
        ii := 0;
        while MasterData.SelectNext do
          begin
            if VarAsInt(MasterData.Артикул) = 0 then
              continue;
            TmpCount := 0;
            if TmpTbl.Find(MasterData) then
              TmpCount := TmpTbl.КолОбщ;
            if ((VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(Constants.КоличествоБольшеНуляКПК))
              or (not VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(CommercialAgents.КоличествоБольшеНуля)))
              and (TmpCount <= 0) then
              begin
                inc(ii);
                if Mean.Terminated then
                  begin
                    Success := False;
                    exit
                  end;
                if ii mod 10 = 0 then
                  Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
                    IntToStr(iTotal), ii, iTotal);
                continue;
              end;

            if TmpCount <> 0 then
              StrLine := ReplaceOneStrWithAnother(VarAsStr(VarAsDec(TmpCount)), ',', '.')
            else
              StrLine := '0';
            TextFile.Add(StrLine + OutRow_Separator);
            if TmpCurrencyTbl.Find(MasterData.@@ВалОтпЦены) then
              Course := TmpCurrencyTbl.Курс
            else
              Course := 1;
            StrLine := '';
            StrLine := ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.Цена * Course, 2)), ',', '.');
            TextFile.Add(StrLine + OutRow_Separator);
            StrLine := '';
            StrLine := ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.ОптЦена * Course, 2)), ',', '.');
            TextFile.Add(StrLine + OutRow_Separator);
            StrLine := '';
            StrLine := ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.ДрЦена * Course, 2)), ',', '.');
            TextFile.Add(StrLine + OutRow_Separator);
            StrLine := '';
            StrLine := ReplaceOneStrWithAnother(VarAsStr(RoundFloat(MasterData.НовЦена * Course, 2)), ',', '.');
            TextFile.Add(StrLine + OutRow_Separator);

            StrLine := '';
            StrLine := IntToStr(MasterData.Артикул);
            TextFile.Add(StrLine + OutRow_Separator);
            inc(i);
            inc(ii);
            if Mean.Terminated then
              begin
                Success := False;
                exit
              end;
            if ii mod 10 = 0 then
              Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
                IntToStr(iTotal), ii, iTotal);
          end;
        inc(j);
        if Mean.Terminated then
          begin
            Success := False;
            exit
          end;
        Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
      end;
    TextFile.Insert(InsertCountLineNumber + 2, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'UpdateItems', CommercialAgentsGroup.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'UpdateItems', CommercialAgentsGroup.Код) + #13#10;
  finally
    TextFile.Free;
  end;
  Success := True;
end;

function ExportUpdateItems : Variant; server;
begin
  Result := EntryPoint(EPExportUpdateItems);
end;

procedure UpdatePartners(Mean : ISProcessing; Groups : ISDictionary;
  TmpTbl : ISValueTable; AccsPart : ISAccs; Constants : IS4VPAConst;
  MeanName : string; UnionPartnerDict : Boolean;
  var i : Integer; var TextFile : TStringList;
  var Success : Boolean);
var
  MasterData, Ctg : ISDictionary;
  j, jTotal, ii, iTotal : Integer;
  IsGroup : Boolean;
  StrLine : string;
begin
  Success := True;
  MasterData := CreateObject(MeanName);
  Ctg := CreateObject(MeanName);
  Ctg.IncludeOnlyLevels(True);
  Ctg.Select;
  jTotal := Ctg.RecordCount;

  Groups.UseMaster(Ctg);
  j := 0;
  Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
  while Ctg.SelectNext do
    begin
      if VarAsInt(Ctg.Код) = 0 then
        continue;
      if not UnionPartnerDict then
        begin
          IsGroup := True;
          if Groups.Select then
            while Groups.SelectNext do
              if IsObjEQ(CommercialAgentsGroup, Groups.@Группа, False) then
                begin
                  IsGroup := False;
                  break
                end;
          if IsGroup then
            continue;
        end;
      MasterData.UseParent(Ctg);
      MasterData.Select;
      TmpTbl.Clear;
      AccsPart.ClearFieldBuffers();
      AccsPart.ClearFieldFilters();
      AccsPart.SetCtgFieldFilter('Партнер', Ctg);
      AccsPart.IncludeZeroRest := False;
      AccsPart.AppendGroupRestToValueTable(CurrentDateTime, 'Партнер;СумОбщ', TmpTbl);
      TmpTbl.SortBy('Партнер');
      TmpTbl.Select;
      iTotal := MasterData.RecordCount;
      ii := 0;
      while MasterData.SelectNext do
        begin
          if VarAsInt(MasterData.Код) = 0 then
            continue;
          StrLine := '';
          if TmpTbl.Find(MasterData) then
            StrLine := ReplaceOneStrWithAnother(VarAsStr(VarAsDec(TmpTbl.СумОбщ)), ',', '.')
          else
            StrLine := '0';
          TextFile.Add(StrLine + OutRow_Separator);
          StrLine := IntToStr(MasterData.Код);
          TextFile.Add(StrLine + OutRow_Separator);
          inc(i);
          inc(ii);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if ii mod 10 = 0 then
            Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
              IntToStr(iTotal), ii, iTotal);
        end;
      inc(j);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
    end;
end;


procedure EPExportUpdateCustomers(Mean : ISProcessing; var Success : Boolean);
var
  i : Integer;
  Groups : ISDictionary;
  TextFile : TStringList;
  AccsPart : ISAccs;
  TmpTbl : ISValueTable;
  Constants : IS4VPAConst;
begin
  Log := '';
  TextFile := CreateStringList;
  try
    TextFile.Add(GetCurrentDateTime);
    TextFile.Add('Update');
    TextFile.Add('Customers');
    TextFile.Add('Balance');
    TextFile.Add('Decimal');
    TextFile.Add('IDCustomer');
    TextFile.Add('Integer');

    Constants := GetConstants;

    TmpTbl := CreateObject('ТаблицаЗначений');
    TmpTbl.AddColumn('Партнер', vtcLink, 0);
    TmpTbl.AddColumn('СумОбщ', vtcFft, 2);
    TmpTbl.Open;
    AccsPart := CreateObject('Аккумуляторы.РасчетыСПартнерами');
    Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');

    i := 0;
    case VarAsInt(Constants.КлиентыДляКПК) of
      0 :
        UpdatePartners(Mean, Groups, TmpTbl, AccsPart, Constants, 'Справочники.ЮрПартнеры',
          VarAsBool(Constants.ПартнерыДляКПК), i, TextFile, Success);
      1 :
        UpdatePartners(Mean, Groups, TmpTbl, AccsPart, Constants, 'Справочники.ФизЛица',
          VarAsBool(Constants.ПартнерыДляКПК), i, TextFile, Success);
      2 :
        begin
          UpdatePartners(Mean, Groups, TmpTbl, AccsPart, Constants, 'Справочники.ЮрПартнеры',
            VarAsBool(Constants.ПартнерыДляКПК), i, TextFile, Success);
          if not Success then
            exit;
          UpdatePartners(Mean, Groups, TmpTbl, AccsPart, Constants, 'Справочники.ФизЛица',
            VarAsBool(Constants.ПартнерыДляКПК), i, TextFile, Success);
        end;
    end;

    if not Success then
      exit;
    TextFile.Insert(InsertCountLineNumber + 2, VarAsStr(i));
    TextFile.SaveToFile(GetExportFileName(ExportPath, 'UpdateCustomers', CommercialAgentsGroup.Код));
    Log := Log + Trans(msgAdd) + IntToStr(i) + Trans(msgRecordsToFile) + GetExportFileName(ExportPath, 'UpdateCustomers', CommercialAgentsGroup.Код) + #13#10;
  finally
    TextFile.Free;
  end;
  Success := True;
end;

function ExportUpdateCustomers : Variant; server;
begin
  Result := EntryPoint(EPExportUpdateCustomers);
end;

function DeleteFirstAndLastSymbols(Text : string; Symbol : string = '''') : string;
var
  TextLength : Integer;
begin
  Result := Text;
  TextLength := StrLength(Text);
  if (TextLength >= 2) and (Result[1] = Symbol) and (Result[StrLength(Text)] = Symbol) then
    begin
      StrDelete(Result, StrLength(Text), 1);
      StrDelete(Result, 1, 1);
    end;
end;

procedure EPGetOrderTable(Mean : ISProcessing; var Success : Boolean); server;
var
  j : integer;
  Line, HeaderFileName, HeaderStrDateTime : String;
  TmpQuantity : Decimal;
  HeaderAgentCode : Integer;
  HeaderFileDateTime : DateTime;
  Total : integer;
begin
  Success := False;
  Total := WordCount(Text, InRow_Separator) - 1;
  HeaderFileName := StrTrim(ExtractWord(2, Text, InRow_Separator));
  HeaderAgentCode := VarAsInt(ExtractWord(3, HeaderFileName, '_'));
  HeaderStrDateTime := ExtractWord(4, HeaderFileName, '_');
  HeaderFileDateTime := EncodeDate(2000 + StrToInt(StrCopy(HeaderStrDateTime, 5, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 3, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 1, 2)));
  HeaderFileDateTime := HeaderFileDateTime +
                    EncodeTime(StrToInt(StrCopy(HeaderStrDateTime, 7, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 9, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 11, 2)));
  for j := 3 to Total do
    begin
      if (j - 3) mod 10 = 0 then
        Mean.NotifyClientEx(1, Trans(msgCompleted) +  IntToStr(j - 3) + Trans(msgFrom) + IntToStr(Total), j-3, Total);
      if Mean.Terminated then
        exit;
      Line := StrTrim(ExtractWord(j, Text, InRow_Separator));
      TmpQuantity := StrToDec(ReplaceOneStrWithAnother(ExtractWord(6, Line, InColumn_Separator), '.', ','));
      if TmpQuantity > 0 then
        begin
          OrderTable.Append;
          OrderTable.HeaderAgentCode := HeaderAgentCode;
          OrderTable.HeaderFileDateTime := HeaderFileDateTime;
          OrderTable.IDRequest := VarAsInt(ExtractWord(2, Line, InColumn_Separator));
          OrderTable.IDItem := VarAsInt(ExtractWord(3, Line, InColumn_Separator));
          OrderTable.Quantity := TmpQuantity;
          OrderTable.Price := StrToDec(ReplaceOneStrWithAnother(ExtractWord(7, Line, InColumn_Separator), '.', ','));
          OrderTable.RowDiscount := StrToDec(ReplaceOneStrWithAnother(ExtractWord(9, Line, InColumn_Separator), '.', ','));
          OrderTable.PriceWithoutDiscount := StrToDec(ReplaceOneStrWithAnother(ExtractWord(10, Line, InColumn_Separator), '.', ','));
          OrderTable.Weight := StrToDec(ReplaceOneStrWithAnother(ExtractWord(13, Line, InColumn_Separator), '.', ','));
          OrderTable.Post;
        end;
    end;
  Success := True;
end;

function GetOrderTable(AOrderTable : ISValueTable; AText : String) : Variant; server;
begin
  OrderTable := AOrderTable;
  Text := AText;
  Result := EntryPoint(EPGetOrderTable);
end;

procedure EPGetOrderHeader(Mean : ISProcessing; var Success : Boolean); server;
var
  j : integer;
  Line, HeaderFileName, HeaderStrDateTime : String;
  TmpQuantity : Decimal;
  HeaderAgentCode : Integer;
  HeaderFileDateTime : DateTime;
  Total : integer;
begin
  Success := False;
  Total := WordCount(Text, InRow_Separator) - 1;
  if StrPos('.', FileName) > 0 then
    HeaderFileName := ExtractWord(1, FileName, '.')
  else
    HeaderFileName := FileName;
  HeaderAgentCode := VarAsInt(ExtractWord(3, HeaderFileName, '_'));
  HeaderStrDateTime := ExtractWord(4, HeaderFileName, '_');
  HeaderFileDateTime := EncodeDate(2000 + StrToInt(StrCopy(HeaderStrDateTime, 5, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 3, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 1, 2)));
  HeaderFileDateTime := HeaderFileDateTime +
                    EncodeTime(StrToInt(StrCopy(HeaderStrDateTime, 7, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 9, 2)),
                               StrToInt(StrCopy(HeaderStrDateTime, 11, 2)));

  for j := 2 to Total do
    begin
      if (j - 2) mod 10 = 0 then
        Mean.NotifyClientEx(1, Trans(msgCompleted) +  IntToStr(j - 2) + Trans(msgFrom) + IntToStr(Total), j-2, Total);
      if Mean.Terminated then
        exit;
      Line := StrTrim(ExtractWord(j, Text, InRow_Separator));
      OrderHeader.Append;
      OrderHeader.HeaderAgentCode := HeaderAgentCode;
      OrderHeader.HeaderFileDateTime := HeaderFileDateTime;
      OrderHeader.IDRequest := VarAsInt(ExtractWord(1, Line, InColumn_Separator));
      OrderHeader.DocumentNumber := DeleteFirstAndLastSymbols(ExtractWord(2, Line, InColumn_Separator));
      OrderHeader.DocumentDateTime := StrToDateTime(ExtractWord(2, ExtractWord(3, Line, InColumn_Separator), ''''));
      OrderHeader.IDCustomer := VarAsInt(ExtractWord(4, Line, InColumn_Separator));
      OrderHeader.IDShop := VarAsInt(ExtractWord(5, Line, InColumn_Separator));
      OrderHeader.IDCommercialAgent := VarAsInt(ExtractWord(6, Line, InColumn_Separator));
      OrderHeader.Comment := DeleteFirstAndLastSymbols(ExtractWord(11, Line, InColumn_Separator));
      OrderHeader.Note := VarAsInt(ExtractWord(13, Line, InColumn_Separator));
      OrderHeader.Post;
    end;
  Success := True;
end;

function GetOrderHeader(AOrderHeader : ISValueTable; AText, AFileName : String) : Variant; server;
begin
  OrderHeader := AOrderHeader;
  Text := AText;
  FileName := AFileName;
  Result := EntryPoint(EPGetOrderHeader);
end;

function DeleteChar(Value : String) : String;
var
  i : Integer;
begin
  i := 1;
  while i < StrLength(Value) do
    if StrCopy(Value, i, 1) <> '+' then
      begin
        try
          StrToInt(StrCopy(Value, i, 1));
          inc(i);
        except
          StrDelete(Value, i, 1);
        end;
      end
    else
      inc(i);
  Result := Value;
end;

function GetStrSalesCount(SalesTblByPeriod : ISValueTable; SalesHistoryPeriodsCount : integer) : string;
var
  i : integer;
begin
  Result := '';
  for i := 1 to SalesHistoryPeriodsCount do
    Result := Result + ' ' + FormatFloat('0.#', SalesTblByPeriod._Default['Количество' + IntToStr(i)]);
  if StrLength(Result) > 0 then
    StrDelete(Result, 1, 1);
end;

procedure SaveDataToSalesHistoryCatalog(SalesTbl, SalesTblByPeriod : ISValueTable;
                                        XMLDoc, NodeSalesHistoryITEM, NodeSalesHistoryELEMENTS : Variant;
                                        MasterData : ISDictionary;
                                        GroupColumnsNames : String;
                                        SalesHistoryPeriodsCount, SalesHistoryPeriodInterval : integer;
                                        DateFrom, DateTo : DateTime;
                                        var SalesCounter : integer);
var
  i : integer;
begin
  for i := 1 to SalesHistoryPeriodsCount do
    begin
      DateTo := DateFrom + SalesHistoryPeriodInterval - 0.0001;
      SalesTbl.SetRange(DateFrom, DateTo);
      SalesTbl.Select;
      SalesTbl.AppendTo('Товар;Количество=Количество' + IntToStr(i), SalesTblByPeriod);
      DateFrom := DateTo + 0.0001;
    end;
  SalesTblByPeriod.GroupBy('Товар', GroupColumnsNames);
  SalesTblByPeriod.DoGetLinks('Артикул=Товар.Артикул');

  SalesTblByPeriod.Select;
  while SalesTblByPeriod.SelectNext do
    begin
      inc(SalesCounter);
      NodeSalesHistoryITEM := XMLDoc.CreateElement('ITEM');
      NodeSalesHistoryITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  SalesCounter));
      NodeSalesHistoryITEM.SetAttribute('IsDeleted', 0);
      NodeSalesHistoryITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  MasterData.Код));
      NodeSalesHistoryITEM.SetAttribute('A04', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  SalesTblByPeriod.Артикул));
      NodeSalesHistoryITEM.SetAttribute('A07', GetStrSalesCount(SalesTblByPeriod, SalesHistoryPeriodsCount));
      NodeSalesHistoryELEMENTS.AppendChild(NodeSalesHistoryITEM);
    end;
end;

procedure ExportAndroidPartners(Mean: ISProcessing; MeanName : string; CustomersGroup, TLF, ADR,
                                Representative, ManPartner, AndroidSettingsDict : ISDictionary;
                                var XMLDoc, NodeELEMENTS, NodeCustomersELEMENTS, NodeContactELEMENTS,
                                NodeShopsELEMENTS, NodeContactManELEMENTS, NodeSalesHistoryELEMENTS : OLEVariant;
                                var i, j, k, jTotal, SalesCounter : Integer; var Success : Boolean);
var
  MasterData, Ctg, TmpParent, ManPartnerDict, Groups, RealPartner, TmpPartner, TmpRegion : ISDictionary;
  iTotal, ii, ManPartnerCode, SalesHistoryPeriodsCount, SalesHistoryPeriodInterval : Integer;
  TmpStr, StrPhoneNumber, StrAddress, DocSuffix, TmpColumnName, GroupColumnsNames, TmpSums : string;
  TmpTbl, TmpSalesTbl, SalesTbl, SalesTblByPeriod : ISValueTable;
  AccsPart : ISAccs;
  NodeITEM, NodeCustomersITEM, NodeContactITEM, NodeShopsITEM, NodeContactManITEM, NodeSalesHistoryITEM, NodePaysByPartner : OLEVariant;
  IsGroup, UseSalesHistory, UseRealPartner : Boolean;
  NaklJournal, RetNaklJournal : ISJournal;
  DateFrom, DateTo : DateTime;
  Constants : IS4VPAConst;
  Options : ISOptions;

begin
  Success := False;

  UseSalesHistory := AndroidSettingsDict.ИспользоватьИсториюПродаж;
  UseRealPartner := AndroidSettingsDict.ИспользоватьРеализаторов;
  if UseSalesHistory then
    begin
      case ConfType of
        cnfFarm :
          DocSuffix := 'Фарм';
        cnfAlco :
          DocSuffix := 'Алко';
      end;
      NaklJournal := CreateObject('Журналы.ЖурналНакладных' + DocSuffix);
      NaklJournal.SetDocMultiStateRange('1;2');
      RetNaklJournal := CreateObject('Журналы.ЖурналВозвратовОтПокупателя' + DocSuffix);
      RetNaklJournal.SetDocMultiStateRange('1;2');
      SalesTbl := CreateObject('ТаблицаЗначений');
      SalesTbl.AddColumn('Товар', vtcLink, 0);
      SalesTbl.AddColumn('ДатаДокумента', vtcDate, 0);
      SalesTbl.AddColumn('Количество', vtcFft, 1);
      SalesTbl.Open;
      TmpSalesTbl := CreateObject('ТаблицаЗначений');
      SalesTbl.CopyColumnsTo(TmpSalesTbl);
      SalesTblByPeriod := CreateObject('ТаблицаЗначений');
      SalesTblByPeriod.AddColumn('Партнер', vtcLink, 0);
      SalesTblByPeriod.AddColumn('Товар', vtcLink, 0);
      SalesHistoryPeriodsCount := AndroidSettingsDict.КоличествоИнтерваловИсторииПродаж;
      if SalesHistoryPeriodsCount <> 0 then
        SalesHistoryPeriodInterval := Trunc(AndroidSettingsDict.КоличествоДнейИсторииПродаж / SalesHistoryPeriodsCount)
      else
        SalesHistoryPeriodInterval := 0;
      for ii := 1 to SalesHistoryPeriodsCount do
        begin
          TmpColumnName := 'Количество' + IntToStr(ii);
          SalesTblByPeriod.AddColumn(TmpColumnName, vtcFft, 1);
          GroupColumnsNames := GroupColumnsNames +  ';' + TmpColumnName;
        end;
      SalesTblByPeriod.AddColumn('Количество', vtcString, 100);
      SalesTblByPeriod.AddColumn('Артикул', vtcInteger, 0);
      SalesTblByPeriod.Open;
      if StrLength(GroupColumnsNames) > 0 then
        StrDelete(GroupColumnsNames, 1, 1);
    end;
  if UseRealPartner then
    begin
      RealPartner := CreateObject('Справочники.Реализаторы');
      RealPartner.Select;
    end;
  MasterData := CreateObject(MeanName);
  MasterData.IncludeLevels(False);

  Representative.UseMaster(MasterData);
  TLF.UseMaster(MasterData);
  ADR.UseMaster(MasterData);
  ManPartner.UseMaster(MasterData);

  Ctg := CreateObject(MeanName);
  Ctg.IncludeOnlyLevels(True);
  Ctg.SortByName;
  Ctg.Select;
  Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
  Groups.UseMaster(Ctg);
  TmpTbl := CreateObject('ТаблицаЗначений');
  TmpTbl.AddColumn('Партнер', vtcLink, 0);
  TmpTbl.AddColumn('Валюта', vtcLink, 0);
  TmpTbl.AddColumn('СумОбщ', vtcFft, 2);
  TmpTbl.Open;
  AccsPart := CreateObject('Аккумуляторы.РасчетыСПартнерами');

  jTotal := jTotal + Ctg.RecordCount;
  Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
    IntToStr(jTotal), j, jTotal);

  while Ctg.SelectNext do
    begin
      if VarAsInt(Ctg.Код) = 0 then
        continue;
      if not UnionPartnerDict then
        begin
          IsGroup := True;
          if Groups.Select then
            while Groups.SelectNext do
              if IsObjEQ(CustomersGroup, Groups.@Группа, False) then
                begin
                  IsGroup := False;
                  break
                end;
          if IsGroup then
            continue;
        end;
      MasterData.UseParent(Ctg);
// Фильтр на регион для справочника Юр.Партнеры -> Добавлено 04.12.2015 Андрухов
      Constants := GetConstants;
      TmpRegion := Constants.РегионДляКПК;
//      if IsObjFocused(TmpRegion) and MasterData.HasField('Регион') then
      if not IsNull(TmpRegion) and TmpRegion.IsFocused and MasterData.HasField('Регион') then
        MasterData.SetFieldFilter('Регион','=',TmpRegion,'','',Null);
//-------------------------------------------------
      MasterData.Select;

      TmpTbl.Clear;
      AccsPart.ClearFieldBuffers();
      AccsPart.ClearFieldFilters();
      AccsPart.SetCtgFieldFilter('Партнер', Ctg);
      AccsPart.IncludeZeroRest := False;
      AccsPart.AppendGroupRestToValueTable(CurrentDateTime, 'Партнер;Валюта;СумОбщВал=СумОбщ', TmpTbl);
//      AccsPart.AppendGroupRestToValueTable(CurrentDateTime, 'Партнер;СумОбщ', TmpTbl);
//      AccsPart.AppendGroupRestToValueTable(400000, 'Партнер;СумОбщВал=СумОбщ', TmpTbl);

      TmpTbl.SortBy('Партнер');
      TmpTbl.Select;

      DateTo := RoundDate(CurrentDateTime, rdDay, True);
      DateFrom := DateTo - AndroidSettingsDict.КоличествоДнейИсторииПродаж;
      if UseSalesHistory then
        begin
          RetNaklJournal.SetDateRange(DateFrom, DateTo);
          NaklJournal.SetDateRange(DateFrom, DateTo);
        end;

      iTotal := MasterData.RecordCount;
      ii := 0;
      while MasterData.SelectNext do
        begin
          if VarAsInt(MasterData.Код) = 0 then
            continue;
          if UseSalesHistory then
            begin
              TmpPartner := MasterData;
              if UseRealPartner and RealPartner.FindByField('Партнер', MasterData, False) then
                TmpPartner := RealPartner;
              RetNaklJournal.SetRangeByField('Партнер', TmpPartner);
              RetNaklJournal.Select;
              RetNaklJournal.SaveDocsDataToValueTable('ДатаДокумента', 'Товар;Количество', TmpSalesTbl);
              TmpSalesTbl.GroupBy('Товар;ДатаДокумента', 'Количество');
              TmpSalesTbl.DoCalculation('Количество', '-Количество');
              TmpSalesTbl.AppendTo('Товар;ДатаДокумента;Количество', SalesTbl);
              TmpSalesTbl.Clear;
              NaklJournal.SetRangeByField('Партнер', TmpPartner);
              NaklJournal.SetFieldFilter('Отпуск', '=', 1, '', '', null);
              NaklJournal.Select;
              NaklJournal.SaveDocsDataToValueTable('ДатаДокумента', 'Товар;Количество', TmpSalesTbl);
              TmpSalesTbl.GroupBy('Товар;ДатаДокумента', 'Количество');
              TmpSalesTbl.AppendTo('Товар;ДатаДокумента;Количество', SalesTbl);
              TmpSalesTbl.Clear;
              SalesTbl.SortBy('ДатаДокумента');
              SaveDataToSalesHistoryCatalog(SalesTbl, SalesTblByPeriod,
                                            XMLDoc, NodeSalesHistoryITEM, NodeSalesHistoryELEMENTS,
                                            MasterData, GroupColumnsNames, SalesHistoryPeriodsCount, SalesHistoryPeriodInterval,
                                            DateFrom, DateTo, SalesCounter);
              SalesTbl.Clear;
              SalesTblByPeriod.Clear;
            end;
          NodeCustomersITEM := XMLDoc.CreateElement('ITEM');
          NodeCustomersITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
          NodeCustomersITEM.SetAttribute('IsDeleted', 0);
          StrPhoneNumber := '';
          StrAddress := '';
          TLF.Select;
          if TLF.FindByField('Активность', True, False) then
            StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
          ADR.Select;
          if ADR.FindByField('Активность', True, False) then
            StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
          if StrAddress <> '' then
            begin
              NodeContactITEM := XMLDoc.CreateElement('ITEM');
              NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('200000000000', VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
              NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
              NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
              NodeContactELEMENTS.AppendChild(NodeContactITEM);
            end;
          if StrPhoneNumber <> '' then
            begin
              NodeContactITEM := XMLDoc.CreateElement('ITEM');
              NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('100000000000', VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
              NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
              NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
              NodeContactELEMENTS.AppendChild(NodeContactITEM);
            end;
          //Наименование
          NodeCustomersITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(MasterData.ПолноеНазвание), 1, 100));
          //Скидка
          if  VarAsBool(MasterData.ГруппаСкидки.IsFocused) then
            NodeCustomersITEM.SetAttribute('A05', MasterData.ГруппаСкидки.СкидкаНадбавка)
          else
            NodeCustomersITEM.SetAttribute('A05', 0);
//            NodeCustomersITEM.SetAttribute('A06', '');//Статус
//            NodeCustomersITEM.SetAttribute('A08', '');//ОсновнойДоговор
          //ТипЦены
          Case VarAsStr(MasterData.ТипЦены) of
            'Цена':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  1));
            'ОптЦена':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  2));
            'КрОптЦена':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  3));
            'ЦенаМаг':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  4));

          end;


//          NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.ЦенаСправ) + 1));
//            NodeCustomersITEM.SetAttribute('A010', '');//ЗапретПродаж
//            NodeCustomersITEM.SetAttribute('A011', '');//Категория
          //НаименованиеПолное
          NodeCustomersITEM.SetAttribute('A012', StrCopy(ChangeSymbolsForXML(MasterData.ПолноеНазвание), 1, 255));
          //Долг
// Мультивалюта -> Добавлено 04.12.2015 Андрухов
          TmpTbl.SetRange(MasterData,MasterData);
          TmpTbl.Select;
          if TmpTbl.LineCount>0 then
            begin
              TmpSums:='';
              while TmpTbl.SelectNext do
                if VarAsDec(TmpTbl.СумОбщ)<>0 then
                  begin
                    TmpSums := TmpSums+DecToStr(TmpTbl.СумОбщ,2)+' '+TmpTbl.Валюта.CodeField+#13;
                  end;
              if TmpSums<>'' then
                begin
                  StrDelete(TmpSums,StrLength(TmpSums),1);
                  NodeCustomersITEM.SetAttribute('A015', TmpSums);
                end
              else
                NodeCustomersITEM.SetAttribute('A015', '0,00');

            end
          else
            NodeCustomersITEM.SetAttribute('A015', '0,00');
          TmpTbl.CancelRange;

          {
          if TmpTbl.Find(MasterData) then
            NodeCustomersITEM.SetAttribute('A015', TmpTbl.СумОбщ)
          else
            NodeCustomersITEM.SetAttribute('A015', 0);

            }


//---------------------------------------------------------------

//            NodeCustomersITEM.SetAttribute('A016', '');//Долгота
//            NodeCustomersITEM.SetAttribute('A017', '');//Широта
//            NodeCustomersITEM.SetAttribute('A018', '');//ИспользоватьПерсональныеЦены
          //Группа
          NodeCustomersITEM.SetAttribute('GrpID0', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Код)));
          NodeCustomersELEMENTS.AppendChild(NodeCustomersITEM);
          ManPartnerCode := 0;
          ManPartner.Select;
          while ManPartner.SelectNext do
            begin
              inc(ManPartnerCode);
              NodeContactManITEM := XMLDoc.CreateElement('ITEM');
              NodeContactManITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
              NodeContactManITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(ManPartner.ПолноеНазвание), 1, 75));
              NodeContactManITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
              NodeContactManITEM.SetAttribute('A05', StrCopy(ChangeSymbolsForXML(ManPartner.Заметки), 1, 250));
              NodeContactManELEMENTS.AppendChild(NodeContactManITEM);
              StrPhoneNumber := '';
              StrAddress := '';
              TLF.UseMaster(ManPartner);
              TLF.Select;
              if TLF.FindByField('Активность', True, False) then
                StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
              ADR.UseMaster(ManPartner);
              ADR.Select;
              if ADR.FindByField('Активность', True, False) then
                StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
              if StrAddress <> '' then
                begin
                  NodeContactITEM := XMLDoc.CreateElement('ITEM');
                  NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('400000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
                  NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
                  NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
                  NodeContactELEMENTS.AppendChild(NodeContactITEM);
                end;
              if StrPhoneNumber <> '' then
                begin
                  NodeContactITEM := XMLDoc.CreateElement('ITEM');
                  NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('300000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
                  NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
                  NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
                  NodeContactELEMENTS.AppendChild(NodeContactITEM);
                end;
            end;

          TLF.UseMaster(MasterData);
          ADR.UseMaster(MasterData);
          ManPartner.UseMaster(MasterData);
          inc(i);
          inc(ii);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if ii mod 10 = 0 then
            Mean.NotifyClientEx(2, Trans('Обработано ') + IntToStr(ii) + Trans(msgFrom) +
              IntToStr(iTotal), ii, iTotal);
        end;

                  //магазины
          if VarAsBool(AndroidSettingsDict.ИспользоватьТорговыеТочки) then
            begin
              k := 0;
              Representative.Select;
              while Representative.SelectNext do
                begin
                  if VarAsInt(Representative.Код) = 0 then
                    continue;
                  ManPartnerDict := Representative.Название;
                  NodeShopsITEM := XMLDoc.CreateElement('ITEM');
                  NodeShopsITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                  NodeShopsITEM.SetAttribute('IsDeleted', 0);
                  //Наименование
                  NodeShopsITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(ManPartnerDict.ПолноеНазвание), 1, 150));
                  NodeShopsITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
                  NodeShopsITEM.SetAttribute('A07', StrCopy(ChangeSymbolsForXML(ManPartnerDict.Заметки), 1, 250));
                  NodeShopsITEM.SetAttribute('A08', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.ЦенаСправ) + 1));
                  NodeShopsITEM.SetAttribute('A011', 0);
                  NodeShopsELEMENTS.AppendChild(NodeShopsITEM);
                  StrPhoneNumber := '';
                  StrAddress := '';
                  TLF.UseMaster(ManPartnerDict);
                  TLF.Select;
                  if TLF.FindByField('Активность', True, False) then
                    StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
                  ADR.UseMaster(ManPartnerDict);
                  ADR.Select;
                  if ADR.FindByField('Активность', True, False) then
                    StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
                  if StrAddress <> '' then
                    begin
                      NodeContactITEM := XMLDoc.CreateElement('ITEM');
                      NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('600000000000', Representative.Код + MasterData.Код*1000));
    //                  NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
                      NodeContactITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                      NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
                      NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
                      NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
                      NodeContactELEMENTS.AppendChild(NodeContactITEM);
                    end;
                  if StrPhoneNumber <> '' then
                    begin
                      NodeContactITEM := XMLDoc.CreateElement('ITEM');
                      NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('500000000000', Representative.Код + MasterData.Код*1000));
    //                  NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
                      NodeContactITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                      NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
                      NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
                      NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
                      NodeContactELEMENTS.AppendChild(NodeContactITEM);
                    end;
                  ManPartner.UseMaster(ManPartnerDict);
                  ManPartnerCode := 0;
                  ManPartner.Select;
                  while ManPartner.SelectNext do
                    begin
                      inc(ManPartnerCode);
                      NodeContactManITEM := XMLDoc.CreateElement('ITEM');
                      NodeContactManITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('100000000000', Representative.Код*1000 + ManPartnerCode));
                      NodeContactManITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(ManPartner.ПолноеНазвание), 1, 75));
                      NodeContactManITEM.SetAttribute('A04', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                      NodeContactManITEM.SetAttribute('A05', StrCopy(ChangeSymbolsForXML(ManPartner.Заметки), 1, 250));
                      NodeContactManELEMENTS.AppendChild(NodeContactManITEM);
                      StrPhoneNumber := '';
                      StrAddress := '';
                      TLF.UseMaster(ManPartner);
                      TLF.Select;
                      if TLF.FindByField('Активность', True, False) then
                        StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
                      ADR.UseMaster(ManPartner);
                      ADR.Select;
                      if ADR.FindByField('Активность', True, False) then
                        StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
                      if StrAddress <> '' then
                        begin
                          NodeContactITEM := XMLDoc.CreateElement('ITEM');
                          NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('800000000000', Representative.Код*1000 + ManPartnerCode));
                          NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('100000000000', Representative.Код*1000 + ManPartnerCode));
                          NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
                          NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
                          NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
                          NodeContactELEMENTS.AppendChild(NodeContactITEM);
                        end;
                      if StrPhoneNumber <> '' then
                        begin
                          NodeContactITEM := XMLDoc.CreateElement('ITEM');
                          NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('700000000000', Representative.Код*1000 + ManPartnerCode));
                          NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('100000000000', Representative.Код*1000 + ManPartnerCode));
                          NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
                          NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
                          NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
                          NodeContactELEMENTS.AppendChild(NodeContactITEM);
                        end;
                    end;
                  inc(k)
                end;
            end;

      //категории
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Код)));
      NodeITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(Ctg.NameField), 1, 150));
      TmpParent := Ctg.GetParent;
      if TmpParent.IsFocused then
        NodeITEM.SetAttribute('ParId', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(TmpParent.Код)))
      else
        NodeITEM.SetAttribute('ParId', '');
      NodeELEMENTS.AppendChild(NodeITEM);
      inc(j);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
        IntToStr(jTotal), j, jTotal);
    end;
  Success := True;
end;
//==============================================================
procedure ExportAndroidPartnersNew(Mean: ISProcessing; MeanName : string; ExpAgent, TLF, ADR,
                                Representative, ManPartner, AndroidSettingsDict : ISDictionary;
                                var XMLDoc, NodeELEMENTS, NodeCustomersELEMENTS, NodeContactELEMENTS,
                                NodeShopsELEMENTS, NodeContactManELEMENTS, NodeSalesHistoryELEMENTS,NodePaysByPartner : OLEVariant;
                                var i, j, k, jTotal, SalesCounter : Integer; var Success : Boolean);
var
  MasterData, Ctg, TmpParent, ManPartnerDict, Groups, RealPartner, TmpPartner, TmpRegion : ISDictionary;
  iTotal, ii, ManPartnerCode, SalesHistoryPeriodsCount, SalesHistoryPeriodInterval : Integer;
  TmpStr, StrPhoneNumber, StrAddress, DocSuffix, TmpColumnName, GroupColumnsNames, TmpSums : string;
  TmpTbl, TmpSalesTbl, SalesTbl, SalesTblByPeriod : ISValueTable;
  AccsPart : ISAccs;
  NodeITEM, NodeCustomersITEM, NodeContactITEM, NodeShopsITEM, NodeContactManITEM, NodeSalesHistoryITEM : OLEVariant;
  IsGroup, UseSalesHistory, UseRealPartner : Boolean;
  NaklJournal, RetNaklJournal : ISJournal;
  DateFrom, DateTo : DateTime;
  Constants : IS4VPAConst;
  Options : ISOptions;
  CustomersGroup  : ISDictionary;
  PartnerTbl, PartnerTmpTbl : ISValueTable;
  StrPartners, PartCodeField, PartNameField, OnePartStr : String;
  RegCount : Integer;
begin
  PartnerTbl := CreateObject('ValueTable');
  PartnerTbl.AddColumn('Партнер', VtcLink,0);
  PartnerTbl.Open;
  PartnerTmpTbl := CreateObject('ValueTable');
  PartnerTmpTbl.Open;

  Success := False;

  UseSalesHistory := AndroidSettingsDict.ИспользоватьИсториюПродаж;
  UseRealPartner := AndroidSettingsDict.ИспользоватьРеализаторов;

  if not isNil(ExpAgent) and not IsNull(ExpAgent) and ExpAgent.IsFocused then
    CustomersGroup:= ExpAgent.ГруппаПартнеров;

  if UseSalesHistory then
    begin
      case ConfType of
        cnfFarm :
          DocSuffix := 'Фарм';
        cnfAlco :
          DocSuffix := 'Алко';
      end;
      NaklJournal := CreateObject('Журналы.ЖурналНакладных' + DocSuffix);
      NaklJournal.SetDocMultiStateRange('1;2');
      RetNaklJournal := CreateObject('Журналы.ЖурналВозвратовОтПокупателя' + DocSuffix);
      RetNaklJournal.SetDocMultiStateRange('1;2');
      SalesTbl := CreateObject('ТаблицаЗначений');
      SalesTbl.AddColumn('Товар', vtcLink, 0);
      SalesTbl.AddColumn('ДатаДокумента', vtcDate, 0);
      SalesTbl.AddColumn('Количество', vtcFft, 1);
      SalesTbl.Open;
      TmpSalesTbl := CreateObject('ТаблицаЗначений');
      SalesTbl.CopyColumnsTo(TmpSalesTbl);
      SalesTblByPeriod := CreateObject('ТаблицаЗначений');
      SalesTblByPeriod.AddColumn('Партнер', vtcLink, 0);
      SalesTblByPeriod.AddColumn('Товар', vtcLink, 0);
      SalesHistoryPeriodsCount := AndroidSettingsDict.КоличествоИнтерваловИсторииПродаж;
      if SalesHistoryPeriodsCount <> 0 then
        SalesHistoryPeriodInterval := Trunc(AndroidSettingsDict.КоличествоДнейИсторииПродаж / SalesHistoryPeriodsCount)
      else
        SalesHistoryPeriodInterval := 0;
      for ii := 1 to SalesHistoryPeriodsCount do
        begin
          TmpColumnName := 'Количество' + IntToStr(ii);
          SalesTblByPeriod.AddColumn(TmpColumnName, vtcFft, 1);
          GroupColumnsNames := GroupColumnsNames +  ';' + TmpColumnName;
        end;
      SalesTblByPeriod.AddColumn('Количество', vtcString, 100);
      SalesTblByPeriod.AddColumn('Артикул', vtcInteger, 0);
      SalesTblByPeriod.Open;
      if StrLength(GroupColumnsNames) > 0 then
        StrDelete(GroupColumnsNames, 1, 1);
    end;
  if UseRealPartner then
    begin
      RealPartner := CreateObject('Справочники.Реализаторы');
      RealPartner.Select;
    end;
  MasterData := CreateObject(MeanName);
  MasterData.IncludeLevels(False);

  Representative.UseMaster(MasterData);
  TLF.UseMaster(MasterData);
  ADR.UseMaster(MasterData);
  ManPartner.UseMaster(MasterData);

  Ctg := CreateObject(MeanName);
  Ctg.IncludeOnlyLevels(True);
  Ctg.SortByName;
  Ctg.Select;
  Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
  Groups.UseMaster(Ctg);
  TmpTbl := CreateObject('ТаблицаЗначений');
  TmpTbl.AddColumn('Партнер', vtcLink, 0);
  TmpTbl.AddColumn('Валюта', vtcLink, 0);
  TmpTbl.AddColumn('СумОбщ', vtcFft, 2);
  TmpTbl.Open;
  AccsPart := CreateObject('Аккумуляторы.РасчетыСПартнерами');

  jTotal := jTotal + Ctg.RecordCount;
  Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
    IntToStr(jTotal), j, jTotal);

  while Ctg.SelectNext do
    begin
      if VarAsInt(Ctg.Код) = 0 then
        continue;
      if not UnionPartnerDict and Not IsNull(CustomersGroup) and CustomersGroup.IsFocused then
        begin
          IsGroup := True;
          if Groups.Select then
            while Groups.SelectNext do
              if IsObjEQ(CustomersGroup, Groups.@Группа, False) then
                begin
                  IsGroup := False;
                  break
                end;
          if IsGroup then
            continue;
        end;
      MasterData.UseParent(Ctg);
// Фильтр на регион для справочника Юр.Партнеры -> Добавлено 04.12.2015 Андрухов
      Constants := GetConstants;

{
      if UnionPartnerDict then
        TmpRegion := Constants.РегионДляКПК
      else
        TmpRegion := ExpAgent.РегионЭкспорта ;
//      if IsObjFocused(TmpRegion) and MasterData.HasField('Регион') then
      if not IsNull(TmpRegion) and TmpRegion.IsFocused and MasterData.HasField('Регион') then
        MasterData.SetFieldFilter('Регион','=',TmpRegion,'','',Null);
}
      if UnionPartnerDict then
        StrPartners := Constants.РегионДляКПК
      else
        StrPartners := ExpAgent.РегионыЭкспорта ;
      if StrPartners<>'' then
        begin
          PartnerTbl.Clear;
          PartnerTmpTbl.Clear;

          MasterData.Select;
          MasterData.SaveToValueTable('',PartnerTmpTbl,0,MasterData.RecordCount);
          PartnerTmpTbl.UpdateObjNames;
          TmpRegion:= CreateObject('Справочники.Регионы');
          PartnerTmpTbl.SortBy('Регион');
          PartnerTmpTbl.Select;
          TmpRegion.Select;
          For RegCount:=1 to WordCount(StrPartners,';') do
            Begin
              PartnerTmpTbl.CancelRange;
              OnePartStr := ExtractWord(RegCount,StrPartners,';');
              PartCodeField := StrCopy(OnePartStr,1,StrPos(' ',OnePartStr)-1);
              PartNameField := StrCopy(OnePartStr,StrPos(' ',OnePartStr)+1, StrLength(OnePartStr)-StrPos(' ',OnePartStr));
              if TmpRegion.FindByCodeName(PartCodeField,PartNameField) then
                begin
                  PartnerTmpTbl.SetRange(TmpRegion,TmpRegion);
                  PartnerTmpTbl.Select;
                  PartnerTmpTbl.AppendTo('SELF=Партнер',PartnerTbl);
                end;
            end;

          Nil(TmpRegion);
        end
      else
        begin
          PartnerTbl.Clear;
          PartnerTmpTbl.Clear;

          MasterData.Select;
          MasterData.SaveToValueTable('',PartnerTmpTbl,0,MasterData.RecordCount);
          PartnerTmpTbl.UpdateObjNames;

          PartnerTmpTbl.Select;
          PartnerTmpTbl.AppendTo('SELF=Партнер',PartnerTbl);
        end;

{        //      if IsObjFocused(TmpRegion) and MasterData.HasField('Регион') then
      if not IsNull(TmpRegion) and TmpRegion.IsFocused and MasterData.HasField('Регион') then
        MasterData.SetFieldFilter('Регион','=',TmpRegion,'','',Null);
}




//-------------------------------------------------
//      MasterData.Select;
      PartnerTbl.Select;

      TmpTbl.Clear;
      AccsPart.ClearFieldBuffers();
      AccsPart.ClearFieldFilters();
      AccsPart.SetCtgFieldFilter('Партнер', Ctg);
      AccsPart.IncludeZeroRest := False;
      AccsPart.AppendGroupRestToValueTable(CurrentDateTime, 'Партнер;Валюта;СумОбщВал=СумОбщ', TmpTbl);
//      AccsPart.AppendGroupRestToValueTable(CurrentDateTime, 'Партнер;СумОбщ', TmpTbl);
//      AccsPart.AppendGroupRestToValueTable(400000, 'Партнер;СумОбщВал=СумОбщ', TmpTbl);

      TmpTbl.SortBy('Партнер');
      TmpTbl.Select;

      DateTo := RoundDate(CurrentDateTime, rdDay, True);
      DateFrom := DateTo - AndroidSettingsDict.КоличествоДнейИсторииПродаж;
      if UseSalesHistory then
        begin
          RetNaklJournal.SetDateRange(DateFrom, DateTo);
          NaklJournal.SetDateRange(DateFrom, DateTo);
        end;

//      iTotal := MasterData.RecordCount;
      iTotal := PartnerTbl.LineCount ;
      ii := 0;
//      while MasterData.SelectNext do
      while PartnerTbl.SelectNext do
        begin 
          MasterData := PartnerTbl.Партнер;
          if VarAsInt(MasterData.Код) = 0 then
            continue;
          if UseSalesHistory then
            begin
              TmpPartner := MasterData;
              if UseRealPartner and RealPartner.FindByField('Партнер', MasterData, False) then
                TmpPartner := RealPartner;
              RetNaklJournal.SetRangeByField('Партнер', TmpPartner);
              RetNaklJournal.Select;
              RetNaklJournal.SaveDocsDataToValueTable('ДатаДокумента', 'Товар;Количество', TmpSalesTbl);
              TmpSalesTbl.GroupBy('Товар;ДатаДокумента', 'Количество');
              TmpSalesTbl.DoCalculation('Количество', '-Количество');
              TmpSalesTbl.AppendTo('Товар;ДатаДокумента;Количество', SalesTbl);
              TmpSalesTbl.Clear;
              NaklJournal.SetRangeByField('Партнер', TmpPartner);
              NaklJournal.SetFieldFilter('Отпуск', '=', 1, '', '', null);
              NaklJournal.Select;
              NaklJournal.SaveDocsDataToValueTable('ДатаДокумента', 'Товар;Количество', TmpSalesTbl);
              TmpSalesTbl.GroupBy('Товар;ДатаДокумента', 'Количество');
              TmpSalesTbl.AppendTo('Товар;ДатаДокумента;Количество', SalesTbl);
              TmpSalesTbl.Clear;
              SalesTbl.SortBy('ДатаДокумента');
              SaveDataToSalesHistoryCatalog(SalesTbl, SalesTblByPeriod,
                                            XMLDoc, NodeSalesHistoryITEM, NodeSalesHistoryELEMENTS,
                                            MasterData, GroupColumnsNames, SalesHistoryPeriodsCount, SalesHistoryPeriodInterval,
                                            DateFrom, DateTo, SalesCounter);
              SalesTbl.Clear;
              SalesTblByPeriod.Clear;
            end;
          NodeCustomersITEM := XMLDoc.CreateElement('ITEM');
          NodeCustomersITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
          NodeCustomersITEM.SetAttribute('IsDeleted', 0);
          StrPhoneNumber := '';
          StrAddress := '';
          TLF.Select;
          if TLF.FindByField('Активность', True, False) then
            StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
          ADR.Select;
          if ADR.FindByField('Активность', True, False) then
            StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
          if StrAddress <> '' then
            begin
              NodeContactITEM := XMLDoc.CreateElement('ITEM');
              NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('200000000000', VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
              NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
              NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
              NodeContactELEMENTS.AppendChild(NodeContactITEM);
            end;
          if StrPhoneNumber <> '' then
            begin
              NodeContactITEM := XMLDoc.CreateElement('ITEM');
              NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('100000000000', VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
              NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
              NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
              NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
              NodeContactELEMENTS.AppendChild(NodeContactITEM);
            end;
          //Наименование
          NodeCustomersITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(MasterData.ПолноеНазвание), 1, 100));
          //Скидка
          if  VarAsBool(MasterData.ГруппаСкидки.IsFocused) then
            NodeCustomersITEM.SetAttribute('A05', MasterData.ГруппаСкидки.СкидкаНадбавка)
          else
            NodeCustomersITEM.SetAttribute('A05', 0);
//            NodeCustomersITEM.SetAttribute('A06', '');//Статус
//            NodeCustomersITEM.SetAttribute('A08', '');//ОсновнойДоговор
          //ТипЦены
          Case VarAsStr(MasterData.ТипЦены) of
            'Цена':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  1));
            'ОптЦена':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  2));
            'КрОптЦена':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  3));
            'ЦенаМаг':
                   NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  4));

          end;


//          NodeCustomersITEM.SetAttribute('A09', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.ЦенаСправ) + 1));
//            NodeCustomersITEM.SetAttribute('A010', '');//ЗапретПродаж
//            NodeCustomersITEM.SetAttribute('A011', '');//Категория
          //НаименованиеПолное
          NodeCustomersITEM.SetAttribute('A012', StrCopy(ChangeSymbolsForXML(MasterData.ПолноеНазвание), 1, 255));
          //Долг
// Мультивалюта -> Добавлено 04.12.2015 Андрухов
          TmpTbl.SetRange(MasterData,MasterData);
          TmpTbl.Select;
          if TmpTbl.LineCount>0 then
            begin
              TmpSums:='';
              while TmpTbl.SelectNext do
               // if VarAsDec(TmpTbl.СумОбщ)<>0 then
                  begin
//**
                 //   if VarAsDec(TmpTbl.СумОбщ)>0 then
                      SaveDataToPaysHistoryCatalog(MasterData, VarAsDec(TmpTbl.СумОбщ),XMLDoc,NodePaysByPartner, AndroidSettingsDict.ИспользоватьТорговыеТочки);

                    TmpSums := TmpSums+DecToStr(TmpTbl.СумОбщ,2)+' '+TmpTbl.Валюта.CodeField+#13;
                  end;
              if TmpSums<>'' then
                begin
                  StrDelete(TmpSums,StrLength(TmpSums),1);
                  NodeCustomersITEM.SetAttribute('A015', TmpSums);
                end
              else
                NodeCustomersITEM.SetAttribute('A015', '0,00');

            end
          else
            NodeCustomersITEM.SetAttribute('A015', '0,00');
          TmpTbl.CancelRange;
{
          if TmpTbl.Find(MasterData) then
            NodeCustomersITEM.SetAttribute('A015', TmpTbl.СумОбщ)
          else
            NodeCustomersITEM.SetAttribute('A015', 0);
}
//---------------------------------------------------------------

//            NodeCustomersITEM.SetAttribute('A016', '');//Долгота
//            NodeCustomersITEM.SetAttribute('A017', '');//Широта
//            NodeCustomersITEM.SetAttribute('A018', '');//ИспользоватьПерсональныеЦены
          //Группа
          NodeCustomersITEM.SetAttribute('GrpID0', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Код)));
          NodeCustomersELEMENTS.AppendChild(NodeCustomersITEM);
          ManPartnerCode := 0;
          ManPartner.Select;
          while ManPartner.SelectNext do
            begin
              inc(ManPartnerCode);
              NodeContactManITEM := XMLDoc.CreateElement('ITEM');
              NodeContactManITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
              NodeContactManITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(ManPartner.ПолноеНазвание), 1, 75));
              NodeContactManITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
              NodeContactManITEM.SetAttribute('A05', StrCopy(ChangeSymbolsForXML(ManPartner.Заметки), 1, 250));
              NodeContactManELEMENTS.AppendChild(NodeContactManITEM);
              StrPhoneNumber := '';
              StrAddress := '';
              TLF.UseMaster(ManPartner);
              TLF.Select;
              if TLF.FindByField('Активность', True, False) then
                StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
              ADR.UseMaster(ManPartner);
              ADR.Select;
              if ADR.FindByField('Активность', True, False) then
                StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
              if StrAddress <> '' then
                begin
                  NodeContactITEM := XMLDoc.CreateElement('ITEM');
                  NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('400000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
                  NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
                  NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
                  NodeContactELEMENTS.AppendChild(NodeContactITEM);
                end;
              if StrPhoneNumber <> '' then
                begin
                  NodeContactITEM := XMLDoc.CreateElement('ITEM');
                  NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('300000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000', VarAsInt(MasterData.Код)*1000 + ManPartnerCode));
                  NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
                  NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
                  NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
                  NodeContactELEMENTS.AppendChild(NodeContactITEM);
                end;
            end;   
            
          //магазины
            if VarAsBool(AndroidSettingsDict.ИспользоватьТорговыеТочки) then
              begin
                k := 0;     
                Representative.UseMaster(MasterData);
                Representative.Select;
                while Representative.SelectNext do
                  begin
                    if VarAsInt(Representative.Код) = 0 then
                      continue;
                    ManPartnerDict := Representative.Название;
                    NodeShopsITEM := XMLDoc.CreateElement('ITEM');
                    NodeShopsITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                    NodeShopsITEM.SetAttribute('IsDeleted', 0);
                    //Наименование
                    NodeShopsITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(ManPartnerDict.ПолноеНазвание), 1, 150));
                    NodeShopsITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
                    NodeShopsITEM.SetAttribute('A07', StrCopy(ChangeSymbolsForXML(ManPartnerDict.Заметки), 1, 250));
                    NodeShopsITEM.SetAttribute('A08', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.ЦенаСправ) + 1));
                    NodeShopsITEM.SetAttribute('A011', 0);
                    NodeShopsELEMENTS.AppendChild(NodeShopsITEM);
                    StrPhoneNumber := '';
                    StrAddress := '';
                    TLF.UseMaster(ManPartnerDict);
                    TLF.Select;
                    if TLF.FindByField('Активность', True, False) then
                      StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
                    ADR.UseMaster(ManPartnerDict);
                    ADR.Select;
                    if ADR.FindByField('Активность', True, False) then
                      StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
                    if StrAddress <> '' then
                      begin
                        NodeContactITEM := XMLDoc.CreateElement('ITEM');
                        NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('600000000000', Representative.Код + MasterData.Код*1000));
        //                  NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
                        NodeContactITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                        NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
                        NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
                        NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
                        NodeContactELEMENTS.AppendChild(NodeContactITEM);
                      end;
                    if StrPhoneNumber <> '' then
                      begin
                        NodeContactITEM := XMLDoc.CreateElement('ITEM');
                        NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('500000000000', Representative.Код + MasterData.Код*1000));
        //                  NodeContactITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
                        NodeContactITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                        NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
                        NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
                        NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
                        NodeContactELEMENTS.AppendChild(NodeContactITEM);
                      end;
                    ManPartner.UseMaster(ManPartnerDict);
                    ManPartnerCode := 0;
                    ManPartner.Select;
                    while ManPartner.SelectNext do
                      begin
                        inc(ManPartnerCode);
                        NodeContactManITEM := XMLDoc.CreateElement('ITEM');
                        NodeContactManITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('100000000000', Representative.Код*1000 + ManPartnerCode));
                        NodeContactManITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(ManPartner.ПолноеНазвание), 1, 75));
                        NodeContactManITEM.SetAttribute('A04', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Representative.Код)));
                        NodeContactManITEM.SetAttribute('A05', StrCopy(ChangeSymbolsForXML(ManPartner.Заметки), 1, 250));
                        NodeContactManELEMENTS.AppendChild(NodeContactManITEM);
                        StrPhoneNumber := '';
                        StrAddress := '';
                        TLF.UseMaster(ManPartner);
                        TLF.Select;
                        if TLF.FindByField('Активность', True, False) then
                          StrPhoneNumber := DeleteChar(GetActivCnv(TLF, 'КодГорода') + GetActivCnv(TLF, 'Номер'));
                        ADR.UseMaster(ManPartner);
                        ADR.Select;
                        if ADR.FindByField('Активность', True, False) then
                          StrAddress := GetActivCnv(ADR, 'Город.Название') + ', ' + GetActivCnv(ADR, 'Адрес');
                        if StrAddress <> '' then
                          begin
                            NodeContactITEM := XMLDoc.CreateElement('ITEM');
                            NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('800000000000', Representative.Код*1000 + ManPartnerCode));
                            NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('100000000000', Representative.Код*1000 + ManPartnerCode));
                            NodeContactITEM.SetAttribute('A04', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
                            NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
                            NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrAddress), 1, 250));
                            NodeContactELEMENTS.AppendChild(NodeContactITEM);
                          end;
                        if StrPhoneNumber <> '' then
                          begin
                            NodeContactITEM := XMLDoc.CreateElement('ITEM');
                            NodeContactITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('700000000000', Representative.Код*1000 + ManPartnerCode));
                            NodeContactITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('100000000000', Representative.Код*1000 + ManPartnerCode));
                            NodeContactITEM.SetAttribute('A04', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
                            NodeContactITEM.SetAttribute('A05', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
                            NodeContactITEM.SetAttribute('A06', StrCopy(ChangeSymbolsForXML(StrPhoneNumber), 1, 250));
                            NodeContactELEMENTS.AppendChild(NodeContactITEM);
                          end;
                      end;
                    inc(k)
                  end;
              end;

          TLF.UseMaster(MasterData);
          ADR.UseMaster(MasterData);
          ManPartner.UseMaster(MasterData);
          inc(i);
          inc(ii);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if ii mod 10 = 0 then
            Mean.NotifyClientEx(2, Trans('Обработано ') + IntToStr(ii) + Trans(msgFrom) +
              IntToStr(iTotal), ii, iTotal);
        end;


      //категории
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Код)));
      NodeITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(Ctg.NameField), 1, 150));
      TmpParent := Ctg.GetParent;
      if TmpParent.IsFocused then
        NodeITEM.SetAttribute('ParId', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(TmpParent.Код)))
      else
        NodeITEM.SetAttribute('ParId', '');
      NodeELEMENTS.AppendChild(NodeITEM);
      inc(j);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) +
        IntToStr(jTotal), j, jTotal);
    end;
  Success := True;
end;



//==============================================================



procedure ExportAndroidCustomers(Mean : ISProcessing; CustomersGroup : ISDictionary; var Success : Boolean);
var
  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeGROUPS, NodeGROUP, NodeELEMENTS, NodeITEM,
  NodeCustomersELEMENTS, NodeCustomersITEM, NodeContactCATALOG, NodeContactELEMENTS, NodeContactITEM,
  NodeShopsCATALOG, NodeShopsELEMENTS, NodeContactManCATALOG, NodeContactManELEMENTS,
  NodeSalesHistoryCATALOG, NodeSalesHistoryELEMENTS, pi : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
  Constants : IS4VPAConst;
  i, j, k, jTotal, SalesCounter : Integer;
  TLF, ADR, Representative, ManPartner, AndroidSettingsDict : ISDictionary;
  CustomersGroupSuffix : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  CustomersGroupSuffix := '';
  if IsObjFocused(CustomersGroup) then
   CustomersGroupSuffix := PartnerSuffix + VarAsStr(CustomersGroup.Код);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + CustomersGroupSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;

  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', '9450980F-FB59-47E3-BAE2-AA3C58441B1A');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.Контрагенты');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeGROUPS := XMLDoc.CreateElement('GROUPS');
  NodeCATALOG.AppendChild(NodeGROUPS);
  NodeGROUP := XMLDoc.CreateElement('GROUP');
  NodeGROUP.SetAttribute('GUID', '1E18C8DB-08F6-47DA-874B-100D6E109AB8');
  NodeGROUP.SetAttribute('Comment', 'Элементы группировки по иерархии');
  NodeGROUPS.AppendChild(NodeGROUP);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeGROUP.AppendChild(NodeELEMENTS);

  NodeCustomersELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCATALOG.AppendChild(NodeCustomersELEMENTS);

  NodeContactCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeContactCATALOG.SetAttribute('GUID', '85B62882-0156-4881-85BA-B8FEF05C867B');
  NodeContactCATALOG.SetAttribute('Comment', 'Справочник.КонтактнаяИнформация');
  NodeContactCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeContactCATALOG);
  NodeContactELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeContactCATALOG.AppendChild(NodeContactELEMENTS);

  NodeShopsCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeShopsCATALOG.SetAttribute('GUID', 'D3DBB02E-681E-4FC2-AD0E-8EF1234E9F48');
  NodeShopsCATALOG.SetAttribute('Comment', 'Справочник.ТорговыеТочки');
  NodeShopsCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeShopsCATALOG);
  NodeShopsELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeShopsCATALOG.AppendChild(NodeShopsELEMENTS);

  NodeContactManCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeContactManCATALOG.SetAttribute('GUID', 'CF387A58-4655-41B5-A460-85884D1F20D0');
  NodeContactManCATALOG.SetAttribute('Comment', 'Справочник.КонтактныеЛица');
  NodeContactManCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeContactManCATALOG);
  NodeContactManELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeContactManCATALOG.AppendChild(NodeContactManELEMENTS);

  NodeSalesHistoryCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeSalesHistoryCATALOG.SetAttribute('GUID', 'AF9FAA26-9638-41C5-BFCE-9514E670EF2E');
  NodeSalesHistoryCATALOG.SetAttribute('Comment', 'Справочник.ИсторияПродаж');
  NodeSalesHistoryCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeSalesHistoryCATALOG);
  NodeSalesHistoryELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeSalesHistoryELEMENTS.SetAttribute('Comment', 'Элементы справочника ИсторияПродаж');
  NodeSalesHistoryCATALOG.AppendChild(NodeSalesHistoryELEMENTS);

  i := 0;
  j := 0;
  k := 0;
  jTotal := 0;
  SalesCounter := 0;
  Representative := CreateObject('Справочники.Представители');
  TLF := CreateObject('Справочники.Телефоны');
  ADR := CreateObject('Справочники.Адреса');
  ManPartner := CreateObject('Справочники.ФизЛица');
  GetAndroidSettingsDict(AndroidSettingsDict);
  case VarAsInt(Constants.КлиентыДляКПК) of
    0 :
      ExportAndroidPartners(Mean, 'Справочники.ЮрПартнеры', CustomersGroup, TLF, ADR,
                            Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                            NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                            NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, i, j, k, jTotal, SalesCounter, Success);
    1 :
      ExportAndroidPartners(Mean, 'Справочники.ФизЛица', CustomersGroup, TLF, ADR,
                            Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                            NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                            NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, i, j, k, jTotal, SalesCounter, Success);
    2 :
      begin
        ExportAndroidPartners(Mean, 'Справочники.ЮрПартнеры', CustomersGroup, TLF, ADR,
                              Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                              NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                              NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, i, j, k, jTotal, SalesCounter, Success);
        if not Success then
          exit;
        ExportAndroidPartners(Mean, 'Справочники.ФизЛица', CustomersGroup, TLF, ADR,
                              Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                              NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                              NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, i, j, k, jTotal, SalesCounter, Success);
      end;
  end;
  XMLDoc.save(XMLDocFullName);
end;

procedure ExportAndroidCustomersNew(Mean : ISProcessing; CustomersGroup : ISDictionary; var Success : Boolean);
var
  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeGROUPS, NodeGROUP, NodeELEMENTS, NodeITEM,
  NodeCustomersELEMENTS, NodeCustomersITEM, NodeContactCATALOG, NodeContactELEMENTS, NodeContactITEM,
  NodeShopsCATALOG, NodeShopsELEMENTS, NodeContactManCATALOG, NodeContactManELEMENTS, NodeDOCUMENT,
  NodeSalesHistoryCATALOG, NodeSalesHistoryELEMENTS, pi, NodePaysByPartner, NodeDOCUMENTS : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
  Constants : IS4VPAConst;
  i, j, k, jTotal, SalesCounter : Integer;
  TLF, ADR, Representative, ManPartner, AndroidSettingsDict : ISDictionary;
  CustomersGroupSuffix : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  CustomersGroupSuffix := '';
  if IsObjFocused(CustomersGroup) then
   CustomersGroupSuffix := PartnerSuffix + VarAsStr(CustomersGroup.Код);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + CustomersGroupSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;

  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', '9450980F-FB59-47E3-BAE2-AA3C58441B1A');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.Контрагенты');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeGROUPS := XMLDoc.CreateElement('GROUPS');
  NodeCATALOG.AppendChild(NodeGROUPS);
  NodeGROUP := XMLDoc.CreateElement('GROUP');
  NodeGROUP.SetAttribute('GUID', '1E18C8DB-08F6-47DA-874B-100D6E109AB8');
  NodeGROUP.SetAttribute('Comment', 'Элементы группировки по иерархии');
  NodeGROUPS.AppendChild(NodeGROUP);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeGROUP.AppendChild(NodeELEMENTS);

  NodeCustomersELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCATALOG.AppendChild(NodeCustomersELEMENTS);

  NodeContactCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeContactCATALOG.SetAttribute('GUID', '85B62882-0156-4881-85BA-B8FEF05C867B');
  NodeContactCATALOG.SetAttribute('Comment', 'Справочник.КонтактнаяИнформация');
  NodeContactCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeContactCATALOG);
  NodeContactELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeContactCATALOG.AppendChild(NodeContactELEMENTS);

  NodeShopsCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeShopsCATALOG.SetAttribute('GUID', 'D3DBB02E-681E-4FC2-AD0E-8EF1234E9F48');
  NodeShopsCATALOG.SetAttribute('Comment', 'Справочник.ТорговыеТочки');
  NodeShopsCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeShopsCATALOG);
  NodeShopsELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeShopsCATALOG.AppendChild(NodeShopsELEMENTS);

  NodeContactManCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeContactManCATALOG.SetAttribute('GUID', 'CF387A58-4655-41B5-A460-85884D1F20D0');
  NodeContactManCATALOG.SetAttribute('Comment', 'Справочник.КонтактныеЛица');
  NodeContactManCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeContactManCATALOG);
  NodeContactManELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeContactManCATALOG.AppendChild(NodeContactManELEMENTS);

  NodeSalesHistoryCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeSalesHistoryCATALOG.SetAttribute('GUID', 'AF9FAA26-9638-41C5-BFCE-9514E670EF2E');
  NodeSalesHistoryCATALOG.SetAttribute('Comment', 'Справочник.ИсторияПродаж');
  NodeSalesHistoryCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeSalesHistoryCATALOG);
  NodeSalesHistoryELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeSalesHistoryELEMENTS.SetAttribute('Comment', 'Элементы справочника ИсторияПродаж');
  NodeSalesHistoryCATALOG.AppendChild(NodeSalesHistoryELEMENTS);

  NodeDOCUMENTS := XMLDoc.CreateElement('DOCUMENTS');
  NodeDOCUMENT := XMLDoc.CreateElement('DOCUMENT');
  NodeDOCUMENT.SetAttribute('GUID', 'A93AADFA-2A35-40FE-B88A-3768825CDD31');
  NodeDOCUMENT.SetAttribute('Comment', 'Документ "Долг"');
  NodeDOCUMENTS.AppendChild(NodeDOCUMENT);
  NodePaysByPartner := XMLDoc.CreateElement('ELEMENTS');
  NodeDOCUMENT.AppendChild(NodePaysByPartner);
  NodeDATA.AppendChild(NodeDOCUMENTS);

  i := 0;
  j := 0;
  k := 0;
  jTotal := 0;
  SalesCounter := 0;
  Representative := CreateObject('Справочники.Представители');
  TLF := CreateObject('Справочники.Телефоны');
  ADR := CreateObject('Справочники.Адреса');
  ManPartner := CreateObject('Справочники.ФизЛица');
  GetAndroidSettingsDict(AndroidSettingsDict);
  case VarAsInt(Constants.КлиентыДляКПК) of
    0 :
      ExportAndroidPartnersNew(Mean, 'Справочники.ЮрПартнеры', CustomersGroup, TLF, ADR,
                            Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                            NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                            NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, NodePaysByPartner, i, j, k, jTotal, SalesCounter, Success);
    1 :
      ExportAndroidPartnersNew(Mean, 'Справочники.ФизЛица', CustomersGroup, TLF, ADR,
                            Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                            NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                            NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, NodePaysByPartner, i, j, k, jTotal, SalesCounter, Success);
    2 :
      begin
        ExportAndroidPartnersNew(Mean, 'Справочники.ЮрПартнеры', CustomersGroup, TLF, ADR,
                              Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                              NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                              NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, NodePaysByPartner, i, j, k, jTotal, SalesCounter, Success);
        if not Success then
          exit;
        ExportAndroidPartnersNew(Mean, 'Справочники.ФизЛица', CustomersGroup, TLF, ADR,
                              Representative, ManPartner, AndroidSettingsDict, XMLDoc, NodeELEMENTS,
                              NodeCustomersELEMENTS, NodeContactELEMENTS, NodeShopsELEMENTS,
                              NodeContactManELEMENTS, NodeSalesHistoryELEMENTS, NodePaysByPartner, i, j, k, jTotal, SalesCounter, Success);
      end;
  end;
  XMLDoc.save(XMLDocFullName);
end;

procedure ExportAndroidItems(Mean : ISProcessing; ItemsGroup : ISDictionary; var Success : Boolean);
var
  i, ii, j, k, iTotal, jTotal, ItemNameLength, FullItemNameLength, ItemsGroupCode : Integer;
  MasterData, TmpParent, Ctg, Groups, PackDict, Currency, TmpStore, AndroidSettingsDict : ISDictionary;
  StrLine, TmpStr, StrShortName : string;
  AccsGoodCurrent : ISAccs;
  Course, InCourse, TmpCount : Decimal;
  IsGroup, UseShortName : Boolean;
  PackCollect : ISCollection;
  TmpTbl : ISValueTable;
  Constants : IS4VPAConst;
  Options : ISOptions;
  TmpCurrencyTbl : ISValueTable;
  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeGROUPS, NodeGROUP, NodeELEMENTS,
  NodeITEM, NodeITEMELEMENTS, NodeITEMITEM, NodeUnitCATALOG, NodeUnitELEMENTS, NodeUnitITEM,
  NodePhotoCATALOG, NodePhotoELEMENTS, NodePhotoITEM, NodePicturesCATALOG, NodePicturesELEMENTS,
  NodePicturesITEM, pi : OLEVariant;
  XMLDocPath, XMLDocFullName, ItemsGroupSuffix : String;
begin
  Constants := GetConstants;
  GetAndroidSettingsDict(AndroidSettingsDict);
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  ItemsGroupSuffix := '';
  if IsObjFocused(ItemsGroup) then
    begin
      ItemsGroupSuffix := ItemSuffix + VarAsStr(ItemsGroup.Код);
      ItemsGroupCode := ItemsGroup.Код;
    end
  else
    ItemsGroupCode := ItemsGroupZeroCode;
  XMLDocFullName := XMLDocPath + AndroidExportFileName + ItemsGroupSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;
  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', 'D6D52ADA-0F38-4112-AF3C-2F1E425A43D1');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.Номенклатура');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeGROUPS := XMLDoc.CreateElement('GROUPS');
  NodeCATALOG.AppendChild(NodeGROUPS);
  NodeGROUP := XMLDoc.CreateElement('GROUP');
  NodeGROUP.SetAttribute('GUID', '8E502A85-8DD4-41CF-A7A4-17AB50872D36');
  NodeGROUP.SetAttribute('Comment', 'Элементы группировки по иерархии');
  NodeGROUPS.AppendChild(NodeGROUP);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeGROUP.AppendChild(NodeELEMENTS);

  NodeITEMELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeITEMELEMENTS.SetAttribute('Comment', 'Элементы справочника Номенклатура');
  NodeCATALOG.AppendChild(NodeITEMELEMENTS);

  NodeUnitCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeUnitCATALOG.SetAttribute('GUID', '80452C60-B442-4DA9-A048-42F63270CA14');
  NodeUnitCATALOG.SetAttribute('Comment', 'Справочник.ЕдиницыИзмерения');
  NodeUnitCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeUnitCATALOG);
  NodeUnitELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeUnitELEMENTS.SetAttribute('Comment', 'Элементы справочника ЕдиницыИзмерения');
  NodeUnitCATALOG.AppendChild(NodeUnitELEMENTS);


  NodePhotoCATALOG := XMLDoc.CreateElement('CATALOG');
  NodePhotoCATALOG.SetAttribute('GUID', 'E01CF3A3-6765-4FD3-801C-CCDBF85C78FC');
  NodePhotoCATALOG.SetAttribute('Comment', 'Справочник.ФотоCправочников');
  NodePhotoCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodePhotoCATALOG);
  NodePhotoELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodePhotoELEMENTS.SetAttribute('Comment', 'Элементы справочника ФотоCправочников');
  NodePhotoCATALOG.AppendChild(NodePhotoELEMENTS);

  NodePicturesCATALOG := XMLDoc.CreateElement('PICTURES');
  NodePicturesCATALOG.SetAttribute('KILLALL', '1');
  NodeDATA.AppendChild(NodePicturesCATALOG);
  NodePicturesELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodePicturesELEMENTS.SetAttribute('Comment', 'Элементы справочника ФотоCправочников');
  NodePicturesCATALOG.AppendChild(NodePicturesELEMENTS);

  Options := GetOptions;
  TmpStore := Constants.СкладДляКПК;
  MasterData := CreateObject('Справочники.Товары');
  MasterData.IncludeLevels(False);
  PackDict := CreateObject('Справочники.Упаковки');
  PackDict.UseMaster(MasterData);
  AccsGoodCurrent := CreateObject('Аккумуляторы.ОстаткиТоваровНаСегодня');
  TmpTbl := CreateObject('ТаблицаЗначений');
  TmpTbl.AddColumn('Товар', vtcLink, 0);
  TmpTbl.AddColumn('КолОбщ', vtcFft, 5);
  TmpTbl.Open;
  Ctg := CreateObject('Справочники.Товары');
  Ctg.IncludeOnlyLevels(True);
  Ctg.SortByName;
  Ctg.Select;
  jTotal := Ctg.RecordCount;
  UseShortName := VarAsBool(Constants.ИспользоватьКраткоеНазвание);
  ItemNameLength := 30;
  FullItemNameLength := 70;
  Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
  Groups.UseMaster(Ctg);
  TmpCurrencyTbl := CreateObject('ТаблицаЗначений');
  TmpCurrencyTbl.AddColumn('Валюта', vtcLink, 0);
  TmpCurrencyTbl.AddColumn('Курс', vtcFFt, 6);
  TmpCurrencyTbl.Open;
  Currency := CreateObject('Справочники.Валюты');
  Currency.Select;
  while Currency.SelectNext do
    begin
      TmpCurrencyTbl.Append;
      Course := Currency.GetTimedValue(Constants.UsedCurs, CurrentDateTime);
      if Course <= 0 then
        Course := 1;
      TmpCurrencyTbl.Валюта := Currency;
      TmpCurrencyTbl.Курс := Course;
      TmpCurrencyTbl.Post;
    end;
  TmpCurrencyTbl.SortBy('Валюта');
  TmpCurrencyTbl.Select;
  i := 0;
  j := 0;
  k := 0;
  Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
  while Ctg.SelectNext do
    begin
      if VarAsInt(Ctg.Артикул) = 0 then
        continue;
      if not UnionItemsDict then
        begin
          IsGroup := True;
          if Groups.Select then
            while Groups.SelectNext do
              if IsObjEQ(ItemsGroup, Groups.@Группа, False) then
                begin
                  IsGroup := False;
                  break
                end;
          if IsGroup then
            continue;
        end;
      MasterData.UseParent(Ctg);
      MasterData.Select;
      TmpTbl.Clear;
      AccsGoodCurrent.ClearFieldBuffers();
      AccsGoodCurrent.ClearFieldFilters();
      AccsGoodCurrent.SetCtgFieldFilter('Товар', Ctg);
      AccsGoodCurrent.IncludeZeroRest := False;
      if VarAsBool(Constants.ТоварыДляКПК) then
        begin
          if TmpStore.IsFocused then
            AccsGoodCurrent.SetFieldFilter('Склад', TmpStore);
        end
      else
        if VarAsBool(ItemsGroup.@Склад.IsFocused) then
          AccsGoodCurrent.SetFieldFilter('Склад', ItemsGroup.@Склад);
//      AccsGoodCurrent.AppendGroupRestToValueTable(RoundDate(CurrentDateTime, rdDay, True), 'Товар;КолОбщ', TmpTbl);
      AccsGoodCurrent.AppendGroupRestToValueTable(400000, 'Товар;КолОбщ', TmpTbl);

      TmpTbl.SortBy('Товар');
      TmpTbl.Select;

      iTotal := MasterData.RecordCount;
      ii := 0;
      while MasterData.SelectNext do
        begin
          if VarAsInt(MasterData.Артикул) = 0 then
            continue;
          TmpCount := 0;
          if TmpTbl.Find(MasterData) then
            TmpCount := TmpTbl.КолОбщ;
          if ((VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(Constants.КоличествоБольшеНуляКПК))
            or (not VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(ItemsGroup.КоличествоБольшеНуля)))
            and (TmpCount <= 0) then
            begin
              inc(ii);
              if Mean.Terminated then
                begin
                  Success := False;
                  exit
                end;
              if ii mod 10 = 0 then
                Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
                  IntToStr(iTotal), ii, iTotal);
              continue;
            end;
          if TmpCurrencyTbl.Find(MasterData.@@Валюта) then
            Course := TmpCurrencyTbl.Курс
          else
            Course := 1;
          if TmpCurrencyTbl.Find(MasterData.@@Валюта) then
            InCourse := TmpCurrencyTbl.Курс
          else
            InCourse := 1;

          NodeITEMITEM := XMLDoc.CreateElement('ITEM');
          NodeITEMITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
          NodeITEMITEM.SetAttribute('IsDeleted', 0);
          //Код
          NodeITEMITEM.SetAttribute('Code', StrCopy(ChangeSymbolsForXML(MasterData.Код), 1, 16));
          //Наименование
          if UseShortName and (StrTrim(MasterData.КороткоеНазвание) <> '') then
            StrShortName := StrTrim(MasterData.КороткоеНазвание)
          else
            StrShortName := StrTrim(MasterData.НазвТовара);
          NodeITEMITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(StrShortName), 1, 50));
//            NodeITEMITEM.SetAttribute('A013','');//ЕдиницаХраненияОстатков
//            NodeITEMITEM.SetAttribute('A039','');//ЕдиницаОтгрузки
//            NodeITEMITEM.SetAttribute('A010','');//МинимальныйОстаток
          //Остаток
          NodeITEMITEM.SetAttribute('A011', RoundDec(VarAsDec(TmpCount), 3));
          //СтавкаНДС
          NodeITEMITEM.SetAttribute('A04', VarAsDec(MasterData.СтавкаНДС));
//            NodeITEMITEM.SetAttribute('A08',''); //УчетПоХарактеристикам
          NodeITEMITEM.SetAttribute('A014','1');//Весовой - всегда можно вводить дробное количество
//            NodeITEMITEM.SetAttribute('A015','');//Услуга
//            NodeITEMITEM.SetAttribute('A038','');//Акция
          NodeITEMITEM.SetAttribute('A037', Abs(VarAsInt(RoundDec(VarAsDec(TmpCount), 3) > 0)));//ЕстьОстатки
          //Цена0
          NodeITEMITEM.SetAttribute('A020', RoundFloat(MasterData.Цена * Course, 2));
          //Цена1
          NodeITEMITEM.SetAttribute('A021', RoundFloat(MasterData.ОптЦена * Course, 2));
          //Цена2
          NodeITEMITEM.SetAttribute('A022', RoundFloat(MasterData.КрОптЦена * Course, 2));
          //Цена3
          NodeITEMITEM.SetAttribute('A023', RoundFloat(MasterData.ЦенаМаг * Course, 2));

          //НаименованиеПолное         A035
          NodeITEMITEM.SetAttribute('A035', StrCopy(ChangeSymbolsForXML(MasterData.НазвТовара), 1, 255));
//            NodeITEMITEM.SetAttribute('A036','');//ОграничениеСкидки
          //МинимальнаяЦена
          NodeITEMITEM.SetAttribute('A040', RoundFloat(VarAsDec(MasterData.ВхЦена), 2));
//            NodeITEMITEM.SetAttribute('A041','');//ОстатокНаБорту
          NodeITEMITEM.SetAttribute('A042', StrCopy(ChangeSymbolsForXML(MasterData.Информация), 1, 255));//ПодробноеОписание
//            NodeITEMITEM.SetAttribute('A044','');//ПорядокВФайлеВыгрузки
//            NodeITEMITEM.SetAttribute('A045','');//Алкоголь
//            NodeITEMITEM.SetAttribute('A046','');//ДатаРозлива
//            NodeITEMITEM.SetAttribute('A048','');//ЦеноваяГруппа
          //Группа
          if Ctg.IsFocused then
            NodeITEMITEM.SetAttribute('GrpID0', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Артикул)));
//            NodeITEMITEM.SetAttribute('GrpID1','');//Категория
          NodeUnitITEM := XMLDoc.CreateElement('ITEM');
          NodeUnitITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('100000000000',  VarAsInt(MasterData.Артикул)));//ед.измерения такая же как и артикул
          NodeUnitITEM.SetAttribute('IsDeleted', 0);
          PackCollect := MasterData.ЕдИзм;
          if VarAsBool(PackCollect.IsFocused) then
            NodeUnitITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(PackCollect.Value), 1, 50));
          NodeUnitITEM.SetAttribute('A02', 1);
          NodeUnitITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
          NodeUnitELEMENTS.AppendChild(NodeUnitITEM);
          //БазоваяЕдиница
          NodeITEMITEM.SetAttribute('A06', '11111111-1111-1111-1111-' + FormatFloat('100000000000',  VarAsInt(MasterData.Артикул)));//ед.измерения такая же как и артикул
          if PackDict.Select then
            begin
              while PackDict.SelectNext do
                begin
                  NodeUnitITEM := XMLDoc.CreateElement('ITEM');
                  NodeUnitITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(k + 1)));
                  NodeUnitITEM.SetAttribute('IsDeleted', 0);
                  PackCollect := PackDict.НазвУпаковки;
                  if VarAsBool(PackCollect.IsFocused) then
                    NodeUnitITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(PackCollect.Value), 1, 50));
                  NodeUnitITEM.SetAttribute('A02', RoundDec(PackDict.Количество, 3));
                  NodeUnitITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
                  NodeUnitELEMENTS.AppendChild(NodeUnitITEM);
                  inc(k);
                end;
            end;
          if VarAsBool(AndroidSettingsDict.ПередаватьФотографииТоваров) and (MasterData.Фото <> '') then
            begin
              NodePhotoITEM := XMLDoc.CreateElement('ITEM');
              NodePhotoITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePhotoITEM.SetAttribute('IsDeleted', 0);
              NodePhotoITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePhotoITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePhotoELEMENTS.AppendChild(NodePhotoITEM);
              NodePicturesITEM := XMLDoc.CreateElement('ITEM');
              NodePicturesITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePicturesITEM.SetAttribute('FileName', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)) + '.jpg');
              NodePicturesELEMENTS.AppendChild(NodePicturesITEM);
              PhotoTbl.Append;
              PhotoTbl.Фото := MasterData.Фото;
              PhotoTbl.GUID := '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул));
              PhotoTbl.Группа := ItemsGroupCode;
              PhotoTbl.Post;
              NodeITEMITEM.SetAttribute('A043', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
            end;
          NodeITEMELEMENTS.AppendChild(NodeITEMITEM);
          inc(i);
          inc(ii);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if ii mod 10 = 0 then
            Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
              IntToStr(iTotal), ii, iTotal);
        end;
      //категории
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Артикул)));
      NodeITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(Ctg.НазвТовара), 1, 150));
      TmpParent := Ctg.GetParent;
      if TmpParent.IsFocused then
        NodeITEM.SetAttribute('ParId', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(TmpParent.Артикул)))
      else
        NodeITEM.SetAttribute('ParId', '');
      NodeELEMENTS.AppendChild(NodeITEM);
      inc(j);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
    end;
  XMLDoc.save(XMLDocFullName);
  Success := True;
end;


procedure ExportAndroidItemsNew(Mean : ISProcessing; ExpAgent : ISDictionary; var Success : Boolean);
var
  i, ii, j, k, iTotal, jTotal, ItemNameLength, FullItemNameLength, ItemsGroupCode : Integer;
  MasterData, TmpParent, Ctg, Groups, PackDict, Currency, TmpStore, AndroidSettingsDict, ItemsGroup : ISDictionary;
  StrLine, TmpStr, StrShortName : string;
  AccsGoodCurrent : ISAccs;
  Course, InCourse, TmpCount : Decimal;
  IsGroup, UseShortName : Boolean;
  PackCollect : ISCollection;
  TmpTbl : ISValueTable;
  Constants : IS4VPAConst;
  Options : ISOptions;
  TmpCurrencyTbl : ISValueTable;

  TmpStoreTbl : IsValueTable;
  TmpStoreLst : IsValueList;

  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeGROUPS, NodeGROUP, NodeELEMENTS,
  NodeITEM, NodeITEMELEMENTS, NodeITEMITEM, NodeUnitCATALOG, NodeUnitELEMENTS, NodeUnitITEM,
  NodePhotoCATALOG, NodePhotoELEMENTS, NodePhotoITEM, NodePicturesCATALOG, NodePicturesELEMENTS,
  NodePicturesITEM, pi : OLEVariant;
  XMLDocPath, XMLDocFullName, ItemsGroupSuffix : String; 
  
  StrStores : String;   
  OneStoreStr, StoreCodeField, StoreNameField : String;
  StorCount : Integer;
begin
  Constants := GetConstants;
  GetAndroidSettingsDict(AndroidSettingsDict);
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  ItemsGroupSuffix := '';
  if IsObjFocused(ExpAgent) then
    begin
      ItemsGroupSuffix := ItemSuffix + VarAsStr(ExpAgent.Код);
      ItemsGroupCode := ExpAgent.Код; 
      ItemsGroup := ExpAgent.ГруппаТоваров;
    end
  else
    ItemsGroupCode := ItemsGroupZeroCode;
  XMLDocFullName := XMLDocPath + AndroidExportFileName + ItemsGroupSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;
  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', 'D6D52ADA-0F38-4112-AF3C-2F1E425A43D1');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.Номенклатура');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeGROUPS := XMLDoc.CreateElement('GROUPS');
  NodeCATALOG.AppendChild(NodeGROUPS);
  NodeGROUP := XMLDoc.CreateElement('GROUP');
  NodeGROUP.SetAttribute('GUID', '8E502A85-8DD4-41CF-A7A4-17AB50872D36');
  NodeGROUP.SetAttribute('Comment', 'Элементы группировки по иерархии');
  NodeGROUPS.AppendChild(NodeGROUP);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeGROUP.AppendChild(NodeELEMENTS);

  NodeITEMELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeITEMELEMENTS.SetAttribute('Comment', 'Элементы справочника Номенклатура');
  NodeCATALOG.AppendChild(NodeITEMELEMENTS);

  NodeUnitCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeUnitCATALOG.SetAttribute('GUID', '80452C60-B442-4DA9-A048-42F63270CA14');
  NodeUnitCATALOG.SetAttribute('Comment', 'Справочник.ЕдиницыИзмерения');
  NodeUnitCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeUnitCATALOG);
  NodeUnitELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeUnitELEMENTS.SetAttribute('Comment', 'Элементы справочника ЕдиницыИзмерения');
  NodeUnitCATALOG.AppendChild(NodeUnitELEMENTS);


  NodePhotoCATALOG := XMLDoc.CreateElement('CATALOG');
  NodePhotoCATALOG.SetAttribute('GUID', 'E01CF3A3-6765-4FD3-801C-CCDBF85C78FC');
  NodePhotoCATALOG.SetAttribute('Comment', 'Справочник.ФотоCправочников');
  NodePhotoCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodePhotoCATALOG);
  NodePhotoELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodePhotoELEMENTS.SetAttribute('Comment', 'Элементы справочника ФотоCправочников');
  NodePhotoCATALOG.AppendChild(NodePhotoELEMENTS);

  NodePicturesCATALOG := XMLDoc.CreateElement('PICTURES');
  NodePicturesCATALOG.SetAttribute('KILLALL', '1');
  NodeDATA.AppendChild(NodePicturesCATALOG);
  NodePicturesELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodePicturesELEMENTS.SetAttribute('Comment', 'Элементы справочника ФотоCправочников');
  NodePicturesCATALOG.AppendChild(NodePicturesELEMENTS);

  Options := GetOptions;
//  TmpStore := Constants.СкладДляКПК;
  MasterData := CreateObject('Справочники.Товары');
  MasterData.IncludeLevels(False);
  PackDict := CreateObject('Справочники.Упаковки');
  PackDict.UseMaster(MasterData);
  AccsGoodCurrent := CreateObject('Аккумуляторы.ОстаткиТоваровНаСегодня');
  TmpTbl := CreateObject('ТаблицаЗначений');
  TmpTbl.AddColumn('Товар', vtcLink, 0);
  TmpTbl.AddColumn('КолОбщ', vtcFft, 5);
  TmpTbl.Open;
  Ctg := CreateObject('Справочники.Товары');
  Ctg.IncludeOnlyLevels(True);
  Ctg.SortByName;
  Ctg.Select;
  jTotal := Ctg.RecordCount;
  UseShortName := VarAsBool(Constants.ИспользоватьКраткоеНазвание);
  ItemNameLength := 30;
  FullItemNameLength := 70;
  Groups := CreateObject('Справочники.ГруппыТАДляКатегорий');
  Groups.UseMaster(Ctg);
  TmpCurrencyTbl := CreateObject('ТаблицаЗначений');
  TmpCurrencyTbl.AddColumn('Валюта', vtcLink, 0);
  TmpCurrencyTbl.AddColumn('Курс', vtcFFt, 6);
  TmpCurrencyTbl.Open;
  Currency := CreateObject('Справочники.Валюты');
  Currency.Select;
  while Currency.SelectNext do
    begin
      TmpCurrencyTbl.Append;
      Course := Currency.GetTimedValue(Constants.UsedCurs, CurrentDateTime);
      if Course <= 0 then
        Course := 1;
      TmpCurrencyTbl.Валюта := Currency;
      TmpCurrencyTbl.Курс := Course;
      TmpCurrencyTbl.Post;
    end;
  TmpCurrencyTbl.SortBy('Валюта');
  TmpCurrencyTbl.Select;
  i := 0;
  j := 0;
  k := 0;
  Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
  while Ctg.SelectNext do
    begin
      if VarAsInt(Ctg.Артикул) = 0 then
        continue;
      if not UnionItemsDict and ItemsGroup.IsFocused then
        begin
          IsGroup := True;
          if Groups.Select then
            while Groups.SelectNext do
              if IsObjEQ(ItemsGroup, Groups.@Группа, False) then
                begin
                  IsGroup := False;
                  break
                end;
          if IsGroup then
            continue;
        end;
      MasterData.UseParent(Ctg);
      MasterData.Select;
      TmpTbl.Clear;
      AccsGoodCurrent.ClearFieldBuffers();
      AccsGoodCurrent.ClearFieldFilters();
      AccsGoodCurrent.SetCtgFieldFilter('Товар', Ctg);
      AccsGoodCurrent.IncludeZeroRest := False;



{
      if VarAsBool(Constants.ТоварыДляКПК) then
        begin
          if TmpStore.IsFocused then
            AccsGoodCurrent.SetFieldFilter('Склад', TmpStore);
        end
      else
//        if VarAsBool(ItemsGroup.@Склад.IsFocused) then
//          AccsGoodCurrent.SetFieldFilter('Склад', ItemsGroup.@Склад);
        begin
          if ExpAgent.IsFocused and not VarAsBool(ExpAgent.ВсеСклады) then
            begin
              TmpStoreTbl := CreateTblFromBLOBS(ExpAgent.СкладыЭкспорта); //распаковка таблицы
              TmpStoreTbl.Select;
              if IsNil(TmpStoreTbl) and (TmpStoreTbl.LineCount>0) then
                begin
                  TmpStoreLst := CreateObject('ValueList');
                  TmpStoreTbl.UpdateObjNames;
                  TmpStoreTbl.GroupToList('Склад',TmpStoreLst);
                  AccsGoodCurrent.SetFieldFilter('Склад', TmpStoreLst);
                end;

            end;
        end;
}

      if VarAsBool(Constants.ТоварыДляКПК) then
        StrStores := Constants.СкладДляКПК
      else
        StrStores := ExpAgent.СкладыЭкспорта ;

      if StrStores<>'' then
        begin
          TmpStoreLst := CreateObject('ValueList');

          TmpStore:= CreateObject('Справочники.Склады');
          TmpStore.Select;
          For StorCount:=1 to WordCount(StrStores,';') do
            Begin
              OneStoreStr := ExtractWord(StorCount,StrStores,';');
              StoreCodeField := StrCopy(OneStoreStr,1,StrPos(' ',OneStoreStr)-1);
              StoreNameField := StrCopy(OneStoreStr,StrPos(' ',OneStoreStr)+1, StrLength(OneStoreStr)-StrPos(' ',OneStoreStr));
              if TmpStore.FindByCodeName(StoreCodeField,StoreNameField) then
                TmpStoreLst.AddValue(TmpStore.NameField,TmpStore);
            end;
          AccsGoodCurrent.SetFieldFilter('Склад', TmpStoreLst);
          Nil(TmpStoreLst);
          Nil(TmpStore);
        end;



      AccsGoodCurrent.AppendGroupRestToValueTable(RoundDate(CurrentDateTime, rdDay, True), 'Товар;КолОбщ', TmpTbl);

      TmpTbl.SortBy('Товар');
      TmpTbl.Select;

      iTotal := MasterData.RecordCount;
      ii := 0;
      while MasterData.SelectNext do
        begin
          if VarAsInt(MasterData.Артикул) = 0 then
            continue;
          TmpCount := 0;
          if TmpTbl.Find(MasterData) then
            TmpCount := TmpTbl.КолОбщ;
          if ((VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(Constants.КоличествоБольшеНуляКПК))
            or (not VarAsBool(Constants.ТоварыДляКПК) and VarAsBool(ExpAgent.КоличествоБольшеНуля)))
            and (TmpCount <= 0) then
            begin
              inc(ii);
              if Mean.Terminated then
                begin
                  Success := False;
                  exit
                end;
              if ii mod 10 = 0 then
                Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
                  IntToStr(iTotal), ii, iTotal);
              continue;
            end;
{          if TmpCurrencyTbl.Find(MasterData.@@Валюта) then
            Course := TmpCurrencyTbl.Курс
          else
            Course := 1;
}
          if TmpCurrencyTbl.Find(MasterData.@@ВалютаВхЦена) then
            InCourse := TmpCurrencyTbl.Курс
          else
            InCourse := 1;

          NodeITEMITEM := XMLDoc.CreateElement('ITEM');
          NodeITEMITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
          NodeITEMITEM.SetAttribute('IsDeleted', 0);
          //Код
          NodeITEMITEM.SetAttribute('Code', StrCopy(ChangeSymbolsForXML(MasterData.Код), 1, 16));
          //Наименование
          if UseShortName and (StrTrim(MasterData.КороткоеНазвание) <> '') then
            StrShortName := StrTrim(MasterData.КороткоеНазвание)
          else
            StrShortName := StrTrim(MasterData.НазвТовара);
          NodeITEMITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(StrShortName), 1, 50));
//            NodeITEMITEM.SetAttribute('A013','');//ЕдиницаХраненияОстатков
//            NodeITEMITEM.SetAttribute('A039','');//ЕдиницаОтгрузки
//            NodeITEMITEM.SetAttribute('A010','');//МинимальныйОстаток
          //Остаток
          NodeITEMITEM.SetAttribute('A011', RoundDec(VarAsDec(TmpCount), 3));
          //СтавкаНДС
          NodeITEMITEM.SetAttribute('A04', VarAsDec(MasterData.СтавкаНДС));
//            NodeITEMITEM.SetAttribute('A08',''); //УчетПоХарактеристикам
          NodeITEMITEM.SetAttribute('A014','1');//Весовой - всегда можно вводить дробное количество
//            NodeITEMITEM.SetAttribute('A015','');//Услуга
//            NodeITEMITEM.SetAttribute('A038','');//Акция
          NodeITEMITEM.SetAttribute('A037', Abs(VarAsInt(RoundDec(VarAsDec(TmpCount), 3) > 0)));//ЕстьОстатки
          //Цена0
          if TmpCurrencyTbl.Find(MasterData.@@ВалютаЦена) then
            Course := TmpCurrencyTbl.Курс
          else
            Course := 1;
          NodeITEMITEM.SetAttribute('A020', RoundFloat(MasterData.Цена * Course, 2));
          //Цена1
          if TmpCurrencyTbl.Find(MasterData.@@ВалютаОптЦена) then
            Course := TmpCurrencyTbl.Курс
          else
            Course := 1;
          NodeITEMITEM.SetAttribute('A021', RoundFloat(MasterData.ОптЦена * Course, 2));
          //Цена2
          if TmpCurrencyTbl.Find(MasterData.@@ВалютаКрОптЦена) then
            Course := TmpCurrencyTbl.Курс
          else
            Course := 1;
          NodeITEMITEM.SetAttribute('A022', RoundFloat(MasterData.КрОптЦена * Course, 2));

          //НаименованиеПолное         A035
          NodeITEMITEM.SetAttribute('A035', StrCopy(ChangeSymbolsForXML(MasterData.НазвТовара), 1, 255));
//            NodeITEMITEM.SetAttribute('A036','');//ОграничениеСкидки
          //МинимальнаяЦена
          NodeITEMITEM.SetAttribute('A040', RoundFloat(VarAsDec(MasterData.ВхЦена), 2));
//            NodeITEMITEM.SetAttribute('A041','');//ОстатокНаБорту
          NodeITEMITEM.SetAttribute('A042', StrCopy(ChangeSymbolsForXML(MasterData.Информация), 1, 255));//ПодробноеОписание
//            NodeITEMITEM.SetAttribute('A044','');//ПорядокВФайлеВыгрузки
//            NodeITEMITEM.SetAttribute('A045','');//Алкоголь
//            NodeITEMITEM.SetAttribute('A046','');//ДатаРозлива
//            NodeITEMITEM.SetAttribute('A048','');//ЦеноваяГруппа
          //Группа
          if Ctg.IsFocused then
            NodeITEMITEM.SetAttribute('GrpID0', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Артикул)));
//            NodeITEMITEM.SetAttribute('GrpID1','');//Категория
          NodeUnitITEM := XMLDoc.CreateElement('ITEM');
          NodeUnitITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('100000000000',  VarAsInt(MasterData.Артикул)));//ед.измерения такая же как и артикул
          NodeUnitITEM.SetAttribute('IsDeleted', 0);
          PackCollect := MasterData.ЕдИзм;
          if VarAsBool(PackCollect.IsFocused) then
            NodeUnitITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(PackCollect.Value), 1, 50));
          NodeUnitITEM.SetAttribute('A02', 1);
          NodeUnitITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
          NodeUnitELEMENTS.AppendChild(NodeUnitITEM);
          //БазоваяЕдиница
          NodeITEMITEM.SetAttribute('A06', '11111111-1111-1111-1111-' + FormatFloat('100000000000',  VarAsInt(MasterData.Артикул)));//ед.измерения такая же как и артикул
          if PackDict.Select then
            begin
              while PackDict.SelectNext do
                begin
                  NodeUnitITEM := XMLDoc.CreateElement('ITEM');
                  NodeUnitITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(k + 1)));
                  NodeUnitITEM.SetAttribute('IsDeleted', 0);
                  PackCollect := PackDict.НазвУпаковки;
                  if VarAsBool(PackCollect.IsFocused) then
                    NodeUnitITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(PackCollect.Value), 1, 50));
                  NodeUnitITEM.SetAttribute('A02', RoundDec(PackDict.Количество, 3));
                  NodeUnitITEM.SetAttribute('A03', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
                  NodeUnitELEMENTS.AppendChild(NodeUnitITEM);
                  inc(k);
                end;
            end;
          if VarAsBool(AndroidSettingsDict.ПередаватьФотографииТоваров) and (MasterData.Фото <> '') then
            begin
              NodePhotoITEM := XMLDoc.CreateElement('ITEM');
              NodePhotoITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePhotoITEM.SetAttribute('IsDeleted', 0);
              NodePhotoITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePhotoITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePhotoELEMENTS.AppendChild(NodePhotoITEM);
              NodePicturesITEM := XMLDoc.CreateElement('ITEM');
              NodePicturesITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
              NodePicturesITEM.SetAttribute('FileName', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)) + '.jpg');
              NodePicturesELEMENTS.AppendChild(NodePicturesITEM);
              PhotoTbl.Append;
              PhotoTbl.Фото := MasterData.Фото;
              PhotoTbl.GUID := '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул));
              PhotoTbl.Группа := ItemsGroupCode;
              PhotoTbl.Post;
              NodeITEMITEM.SetAttribute('A043', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Артикул)));
            end;
          NodeITEMELEMENTS.AppendChild(NodeITEMITEM);
          inc(i);
          inc(ii);
          if Mean.Terminated then
            begin
              Success := False;
              exit
            end;
          if ii mod 10 = 0 then
            Mean.NotifyClientEx(2, Trans(msgCompleted) + IntToStr(ii) + Trans(msgFrom) +
              IntToStr(iTotal), ii, iTotal);
        end;
      //категории
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(Ctg.Артикул)));
      NodeITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(Ctg.НазвТовара), 1, 150));
      TmpParent := Ctg.GetParent;
      if TmpParent.IsFocused then
        NodeITEM.SetAttribute('ParId', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(TmpParent.Артикул)))
      else
        NodeITEM.SetAttribute('ParId', '');
      NodeELEMENTS.AppendChild(NodeITEM);
      inc(j);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(j) + Trans(msgFrom) + IntToStr(jTotal), j, jTotal);
    end;
  XMLDoc.save(XMLDocFullName);
  Success := True;
end;




procedure GetFixedDocuments(Mean : ISProcessing; JournalName, JournalMultiState : String; CommercialAgents : ISDictionary;
                            var XMLDoc, NodeITEM, NodeCONFIRMATIONS : OLEVariant; var Success : boolean);
var
  i, iTotal : integer;
  OrderJournals : ISJournal;
  DocSuffix : string;
  OrderTbl : ISValueTable;
  AndroidSettingsDict : ISDictionary;
begin
  GetAndroidSettingsDict(AndroidSettingsDict);
  case JournalName of
    'ЖурналСчетовНаПродажу', 'ЖурналНакладных' :
      case ConfType of
        cnfFarm :
          DocSuffix := 'Фарм';
        cnfAlco :
          DocSuffix := 'Алко';
      end;
  end;
  OrderJournals := CreateObject('Журналы.' + JournalName + DocSuffix);
  if OrderJournals.HasField('AndroidGUID') then
    begin
      OrderJournals.SetDateRange(CurrentDate - AndroidSettingsDict.СрокАнализаДокументов, RoundDate(CurrentDate, rdDay, True));
      OrderJournals.SetDocMultiStateRange(JournalMultiState);
      OrderJournals.SetFieldFilter('Ответственный', '=', CommercialAgents.@Служащий, '', '', '');
      OrderJournals.Select;
      OrderTbl := CreateObject('ТаблицаЗначений');
      iTotal := OrderJournals.RecordCount;
      if iTotal <> 0 then
        begin
          OrderJournals.SaveToValueTable('Сумма;AndroidGUID', OrderTbl, 1, iTotal);
          OrderTbl.Select;
          i := 0;
          iTotal := OrderTbl.LineCount;
          while OrderTbl.SelectNext do
            begin
              if (VarAsStr(OrderTbl.AndroidGUID) <> '') and (StrLength(OrderTbl.AndroidGUID) = 36) then
                begin
                  NodeITEM := XMLDoc.CreateElement('ITEM');
                  NodeITEM.SetAttribute('GUID', OrderTbl.AndroidGUID);
                  NodeCONFIRMATIONS.AppendChild(NodeITEM);
                end;
              inc(i);
              if Mean.Terminated then
                begin
                  Success := False;
                  exit
                end;
              Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i) + Trans(msgFrom) + IntToStr(iTotal), i, iTotal);
            end;
        end;
    end;
end;

procedure ExportAndroidOrders(Mean : ISProcessing; CommercialAgents : ISDictionary; var Success : Boolean);
var
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeDOCUMENTS, NodeDOCUMENT, NodeITEM, NodeCONFIRMATIONS, pi : OLEVariant;
  XMLDocPath, XMLDocFullName, CommercialAgentsSuffix : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  CommercialAgentsSuffix := '';
  if IsObjFocused(CommercialAgents) then
   CommercialAgentsSuffix := AgentSuffix + VarAsStr(CommercialAgents.Код);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + CommercialAgentsSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);
    end;   

  NodeDOCUMENTS := XMLDoc.CreateElement('DOCUMENTS');
  NodeDOCUMENTS.SetAttribute('Comment', 'Документы');
  NodeDATA.AppendChild(NodeDOCUMENTS);

  NodeDOCUMENT := XMLDoc.CreateElement('DOCUMENT');
  NodeDOCUMENT.SetAttribute('GUID', 'E01E1F5C-D6E4-46E8-B923-3758B0D79BDE');
  NodeDOCUMENT.SetAttribute('Comment', 'Подтверждения документов "Заказ покупателя"');
  NodeDOCUMENTS.AppendChild(NodeDOCUMENT);
  NodeCONFIRMATIONS := XMLDoc.CreateElement('CONFIRMATIONS');
  NodeDOCUMENT.AppendChild(NodeCONFIRMATIONS);

  case VarAsInt(Constants.ТипДокументаКПК) of
    0 :
      GetFixedDocuments(Mean, 'ЖурналСчетовНаПродажу', '0;1;2;3;4', CommercialAgents, XMLDoc, NodeITEM, NodeCONFIRMATIONS,
                        Success);
    1 :
      GetFixedDocuments(Mean, 'ЖурналНакладных', '0;1;2', CommercialAgents, XMLDoc, NodeITEM, NodeCONFIRMATIONS,
                        Success);
    2 :
      GetFixedDocuments(Mean, 'ЖурналЧеков', '0;1', CommercialAgents, XMLDoc, NodeITEM, NodeCONFIRMATIONS,
                        Success);
  end;
  GetFixedDocuments(Mean, 'ЖурналПлатежей', '0;1;2', CommercialAgents, XMLDoc, NodeITEM, NodeCONFIRMATIONS,
                    Success);
  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportAndroidRoute(Mean : ISProcessing; CommercialAgents : ISDictionary; var Success : Boolean);
var
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeDOCUMENTS, NodeDOCUMENT, NodeELEMENTS, NodeITEM, NodeTABLES, NodeTABLE, NodeTABLEITEM, pi : OLEVariant;
  XMLDocPath, XMLDocFullName, CommercialAgentsSuffix : String;
  MasterJournal : ISJournal;
  MasterData : ISDocuments;
  i, j : integer;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  CommercialAgentsSuffix := '';
  if IsObjFocused(CommercialAgents) then
   CommercialAgentsSuffix := AgentSuffix + VarAsStr(CommercialAgents.Код);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + CommercialAgentsSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);
    end;
  NodeDOCUMENTS := XMLDoc.CreateElement('DOCUMENTS');
  NodeDOCUMENTS.SetAttribute('Comment', 'Документы');
  NodeDATA.AppendChild(NodeDOCUMENTS);

  NodeDOCUMENT := XMLDoc.CreateElement('DOCUMENT');
  NodeDOCUMENT.SetAttribute('GUID', '43920FA1-745D-4499-84AF-7000672CEEFF');
  NodeDOCUMENT.SetAttribute('Comment', 'Документ "Маршрут"');
  NodeDOCUMENT.SetAttribute('KILLALL', '1');
  NodeDOCUMENTS.AppendChild(NodeDOCUMENT);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeDOCUMENT.AppendChild(NodeELEMENTS);

  MasterJournal := CreateObject('Журналы.ЖурналМаршрутов');
  MasterJournal.CancelFieldFilter('ТорговыйАгент');
  MasterJournal.SetFieldFilter('ТорговыйАгент', '=', CommercialAgents, '', '', '');
  MasterJournal.SetDocStateRange(1);
  MasterJournal.Select;
  i := 0;
  j := 0;
  while MasterJournal.SelectNext do
    begin
      MasterData := MasterJournal.GetDoc;
      inc(i);
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(i)));
      NodeITEM.SetAttribute('DT', FormatDateTime('yyyy-mm-dd', MasterData.ДатаДокумента) + 'T' + FormatDateTime('hh:nn:ss', MasterData.ДатаДокумента));
      NodeITEM.SetAttribute('DocNumber', StrCopy(ChangeSymbolsForXML(MasterData.НомерДокумента), 1, 16));
      NodeELEMENTS.AppendChild(NodeITEM);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      if i mod 10 = 0 then
        Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i), i, i);
      //табличная часть
      NodeTABLES := XMLDoc.CreateElement('TABLES');
      NodeITEM.AppendChild(NodeTABLES);  
      NodeTABLE := XMLDoc.CreateElement('TABLE');
      NodeTABLE.SetAttribute('GUID', 'ED832712-A167-4B9E-87F1-5127E6F70814');
      NodeTABLES.AppendChild(NodeTABLE);
      MasterData.SelectLines;
      while MasterData.SelectNextLine do
        begin
          inc(j);
          NodeTABLEITEM := XMLDoc.CreateElement('ITEM');
          NodeTABLEITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(i)*1000 + j));
          NodeTABLEITEM.SetAttribute('DocID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(i)));
          NodeTABLEITEM.SetAttribute('A01', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Партнер.Код)));
          if VarAsBool(MasterData.@ТорговаяТочка.IsFocused) then
            NodeTABLEITEM.SetAttribute('A02', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.ТорговаяТочка.Код)));
          NodeTABLEITEM.SetAttribute('A03', TimeToStr(MasterData.ВремяПосещения));
          NodeTABLEITEM.SetAttribute('A04', StrCopy(ChangeSymbolsForXML(MasterData.Коментарий), 1, 255));
          NodeTABLE.AppendChild(NodeTABLEITEM);
        end;
    end;
  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportAndroidPriceTypes(Mean : ISProcessing; var Success : Boolean);
var
  i, Total : Integer;
  MasterData, TmpParent : ISDictionary;
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeELEMENTS, NodeITEM,  pi : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;
  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', '00F1FFE7-E16E-4FF4-9EF1-B8D0C54BDF59');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.ТипыЦен');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCATALOG.AppendChild(NodeELEMENTS);
  MasterData := CreateObject('Справочники.ТипыЦен');
  if MasterData.Select then
    begin
      MasterData.SortByField('Код');
      if not MasterData.FindByField('Активность', -1, False) and MasterData.SelectNext then
        begin
          MasterData.Edit;
          MasterData.Активность := -1;
          MasterData.Post;
        end
    end
  else
    begin
      AppendPriceType(MasterData, 1, 'Розничная', '1', True);
      AppendPriceType(MasterData, 2, 'Оптовая', '2', False);
      AppendPriceType(MasterData, 3, 'Крупный опт', '3', False);
      AppendPriceType(MasterData, 4, 'Магазин', '4', False);
    end;
  Total := MasterData.RecordCount;
  i := 0;
  MasterData.Select;
  while MasterData.SelectNext do
    begin
      if VarAsInt(MasterData.Код) = 0 then
        continue;
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(MasterData.Код)));
      //Код
      NodeITEM.SetAttribute('Code', VarAsStr(VarAsInt(MasterData.Код) - 1));
      //Наименование
      NodeITEM.SetAttribute('Name', StrCopy(ChangeSymbolsForXML(VarAsStr(MasterData.Название)), 1, 50));
      //ЦенаВключаетНДС
      NodeITEM.SetAttribute('A02', 1);
      NodeELEMENTS.AppendChild(NodeITEM);
      inc(i);
      if Mean.Terminated then
        begin
          Success := False;
          exit
        end;
      if i mod 10 = 0 then
        Mean.NotifyClientEx(1, Trans(msgCompleted) + IntToStr(i) + Trans(msgFrom) +
          IntToStr(Total), i, Total)
    end;
  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportAndroidFirms(Mean : ISProcessing; var Success : Boolean);
var
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeELEMENTS, pi : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;
  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', '0E3CBAEA-5467-45CD-8C86-FB1777DA435B');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.Организации');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCATALOG.AppendChild(NodeELEMENTS);

  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportAndroidContactInformationTypes(Mean : ISProcessing; var Success : Boolean);
var
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeCATALOGS, NodeCATALOG, NodeELEMENTS, NodeITEM, pi : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeCATALOGS := XMLDoc.SelectSingleNode('/DATA/CATALOGS');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);

      NodeCATALOGS := XMLDoc.CreateElement('CATALOGS');
      NodeCATALOGS.SetAttribute('Comment', 'Справочники');
      NodeDATA.AppendChild(NodeCATALOGS);
    end;
  NodeCATALOG := XMLDoc.CreateElement('CATALOG');
  NodeCATALOG.SetAttribute('GUID', '564E0ECA-C498-4D28-83D7-4BDEAEC558E2');
  NodeCATALOG.SetAttribute('Comment', 'Справочник.ВидыКонтактнойИнформации');
  NodeCATALOG.SetAttribute('KILLALL', '1');
  NodeCATALOGS.AppendChild(NodeCATALOG);
  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCATALOG.AppendChild(NodeELEMENTS);

  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(1)));
  NodeITEM.SetAttribute('A03', 'Контрагенты');
  NodeITEM.SetAttribute('A02', '8FC8F351-14F0-48EB-952A-38BB313B28D5');
  NodeITEM.SetAttribute('Name', 'Телефон юр.лица');
  NodeELEMENTS.AppendChild(NodeITEM);
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
  NodeITEM.SetAttribute('A03', 'Контрагенты');
  NodeITEM.SetAttribute('A02', 'A4D0F540-64ED-4F3E-B2BB-818DA38F5AB2');
  NodeITEM.SetAttribute('Name', 'Фактический адрес юр.лица');
  NodeELEMENTS.AppendChild(NodeITEM);

  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportAndroidConstants(Mean : ISProcessing; var Success : Boolean);
var
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeCONSTANTS, NodeELEMENTS, NodeITEM, pi : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
  DicPriceTypes, AndroidSettingsDict : ISDictionary;
begin
  GetAndroidSettingsDict(AndroidSettingsDict);
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);
    end;
  NodeCONSTANTS := XMLDoc.CreateElement('CONSTANTS');
  NodeDATA.AppendChild(NodeCONSTANTS);

  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCONSTANTS.AppendChild(NodeELEMENTS);
  //B75CC8AC-8789-4069-A19C-590D832CACD1 //ИдентификаторСОД
  //79C698DB-3C55-465E-ACFE-4741ACDD5655 //ИдентификаторАгента
  //13FAF2A0-3D1E-469E-BC53-CDADA6AC1375 //ОсновнаяОрганизация
  //C21ED754-43D4-423D-BDB6-8D2F36B9F8D1 //ПрефиксТорговогоАгента
  //ВидимостьВкладокЖурнала
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '61A474B1-21D0-4047-B2D5-7213A7294050');
  NodeITEM.SetAttribute('Value', 'Заказы');
  NodeELEMENTS.AppendChild(NodeITEM);
  //E56E66FD-F605-4DBC-8D5E-444C1A772DB2 //РежимВыбораЗакладок
  //ПарольДоступаКНастройкам
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'DDEDCE5E-7A69-4858-BC89-F48E3E44A8EF');
  NodeITEM.SetAttribute('Value',  StrCopy(ChangeSymbolsForXML(VarAsStr(AndroidSettingsDict.ПарольДоступаКНастройкам)), 1, 50));
  NodeELEMENTS.AppendChild(NodeITEM);
  //7E69129D-E06D-4539-A756-30A9D02DAE84 //ОсновнаяНастройкаОбмена
  //E90ABE90-F7DF-402C-BACE-97F003422CB7 //КаталогПрямогоОбмена
  //344436BC-3E1B-42D7-B453-496D61EAE2D8 //ПапкаХраненияКартинок
  //ВалютаУчета
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'D2B5508C-7453-4A52-B803-A846992A485D');
  NodeITEM.SetAttribute('Value', 'грн.');
  NodeELEMENTS.AppendChild(NodeITEM);
  //ADB99DF4-739B-4E6F-AEA9-E751B55CB18A //ПредставлениеВалюты
  //ИспользоватьВидыОплат
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '8886E1E1-FCDA-4EA0-85F8-DF3D3DD8A5E3');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ТочностьКоличества
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '27952AB3-1365-4B56-A0EF-34EC0133E5D3');
  NodeITEM.SetAttribute('Value', 3);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ТочностьЦены
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '5D54ED85-FDEA-4027-8ECD-129C27BDBF64');
  NodeITEM.SetAttribute('Value', 2);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ТочностьСкидки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'A978F039-3F17-4705-B7F6-16C580C9AC5F');
  NodeITEM.SetAttribute('Value', 2);
  NodeELEMENTS.AppendChild(NodeITEM);
  //МногоскладскойУчет
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '63B7D515-CE1D-4F91-B65E-1293495A07E1');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //86BA5DAD-16D0-46B8-9D8D-3EAB2CF08685 //ОсновнойСклад
  //448B6FAB-5E21-479C-9A9A-63E8ECED59B9 //МобильныйСклад
  //72889BFF-CC95-4C2E-9C4E-0D28E2EFBF7C //ТорговляСКолес
  //СкрыватьСписокСкладов
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '018DD98C-D617-4D35-B5C0-EFDABF6B37A2');
  NodeITEM.SetAttribute('Value', 1);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОсновнойТипЦены
  DicPriceTypes := CreateObject('Справочники.ТипыЦен');
  DicPriceTypes.Select;
  if DicPriceTypes.FindByField('Активность', -1, False) then
    begin
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', '7BC85296-F536-411E-AAA9-74AD5C7ADEA2');
      NodeITEM.SetAttribute('Value', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(DicPriceTypes.Код)));
      NodeELEMENTS.AppendChild(NodeITEM);
    end;
  //0A253E8B-9043-414B-8026-0C9369F781AD //МинимальныйТипЦены

  //РежимСортировки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'F24DA797-1374-410D-A8E2-28645772B81C');
  NodeITEM.SetAttribute('Value', 'Наименование');//пишет что по умолчанию но не работает
  NodeELEMENTS.AppendChild(NodeITEM);
  //НадписьКод
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '7268AF8A-6532-4AD0-BC63-3832F3C0D96F');
  NodeITEM.SetAttribute('Value', 'Код');
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтображатьКолонкуФото
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '32798A23-C58F-4C7A-8C3D-36E5A60184D3');
  if VarAsBool(AndroidSettingsDict.ПередаватьФотографииТоваров) then
    NodeITEM.SetAttribute('Value', 1)
  else
    NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьПланыПродаж
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'C26639D8-F729-4C9F-ABB4-7154AE9C632B');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //50F284E8-BCD6-47D4-8DD1-181D9592CB20 //ОсновнойПланПродаж
  //ОтображатьКодВТЧ
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'B8EE5418-9597-42FB-A738-1574975EC6F6');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(VarAsBool(AndroidSettingsDict.ОтображатьКодТовара))));
  NodeELEMENTS.AppendChild(NodeITEM);
  //B917AF50-AF2B-43C1-A111-CC8822B180C2 //ИспользоватьТипЦеныВТЧ
  //404D1878-4456-4095-BFD5-EAF93F6C0E1B //ОсновнойАлгоритмАвтозаполнения
  //ПоказыватьРекомендованныйЗаказ
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'E4D51F85-CC81-402C-9F14-A8EAA07B945F');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //РедактироватьДатуДокумента
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'FAF41508-AB25-4E1B-9BBD-F80634A3D264');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //485EDECC-E0A9-4E1A-9091-7C71D8E6FF08 //ТипСортировкиЕдиницИзмерения
  //8B2B7025-24EB-4F34-8237-9BD39B88ABD7 //НаправлениеСортировки
  //ПроверятьЗаполнениеОрганизации
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'DC63708B-9257-48DC-9F16-D9846AC7D5FE');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ПроверятьЗаполнениеКонтрагента
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'B8396958-7D13-4633-A6C3-C8D639CBF9E6');
  NodeITEM.SetAttribute('Value', 1);
  NodeELEMENTS.AppendChild(NodeITEM);
  //СоздаватьКонтрагентов
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '73355324-F463-428A-91D2-2868DD35A168');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //РедактироватьКонтрагентов
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '5616D1E9-BFA3-40FC-BABA-852D16B5E774');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИдентификаторФактическогоАдреса
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '1B3D41B2-EB00-4F25-A476-6A668C5E69F0');
  NodeITEM.SetAttribute('Value', '11111111-1111-1111-1111-' + FormatFloat('000000000000',  VarAsInt(2)));
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтображатьАдресКонтрагентаВОднойСтроке
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '4C6B29D4-3D61-43C7-A063-A63823E55069');
  NodeITEM.SetAttribute('Value', 0); //возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //СкрыватьКонтактныхЛиц
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '3D35F9D9-94B7-4A3F-9E0B-5C5A32B0E977');
  NodeITEM.SetAttribute('Value', 0);//возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтключитьФункционалЗвонков
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '195BCCD6-F8EA-481E-A411-1D33A52CFE49');
  NodeITEM.SetAttribute('Value', 0);//возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьТорговыеТочки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '8C52BBBF-8BBB-447D-B18B-06860D372818');
  if VarAsBool(AndroidSettingsDict.ИспользоватьТорговыеТочки) then
    NodeITEM.SetAttribute('Value', 1)
  else
    NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ПроверятьЗаполнениеТорговойТочки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'F984E263-B838-489E-A1D4-F775DB7EDE98');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //F2E1AFA7-292C-42D4-950D-7DA550D2FDA4 //НадписьКонтрагент
  //5728ED47-0DBC-48A9-B37C-E7808766C48C //НадписьТорговаяТочка
  //СоздаватьТорговыеТочки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'B69EC9A6-565F-4E3E-844F-0060C5975FED');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //РедактироватьТорговыеТочки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'F52E3C06-48D6-4809-AE16-13C61E78EABD');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьДоговоры
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'B201164E-E265-4C1D-B3D0-0579BCD1FDA6');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ПроверятьЗаполнениеДоговора
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '56649629-21E4-4116-AEC6-E794F12C62FE');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //СоздаватьДоговоры
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'ABC5B73A-F477-406B-89C5-E9AAB3B4F1E1');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //РедактироватьДоговоры
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '36767A2E-4DF5-43B5-9813-893BF6F65A7F');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //СоздаватьНоменклатуру
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '83A6772E-4DDE-4668-9318-BDF82BFDE445');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //РедактироватьНоменклатуру
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '3ABCD996-1632-46F6-8855-CB25759BC304');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьХарактеристики
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '6E9470DB-C618-4BF8-B510-D1E39E2217F6');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ВыборРеквизитовДокументаИзСписка
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '34A8F1B3-08C1-48BB-B812-F962A651E74A');
  NodeITEM.SetAttribute('Value', 1);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтсрочкаДоставки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'B0FDDB94-CAF7-4003-B2FD-DF15BD2F1F1B');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ЗапрашиватьПодтверждениеОПересчетеЦен
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '6D4C184B-810D-4C23-BA6E-FB7E03B48812');
  NodeITEM.SetAttribute('Value', 1);//возможно 0
  NodeELEMENTS.AppendChild(NodeITEM);
  //НеИзменятьОстаткиПроведением
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '072EC906-BD0B-4B75-AFA8-BECE1434F1EB');
  NodeITEM.SetAttribute('Value', 0);//возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ЗапретитьОтрицательныеОстатки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '711587ED-1589-4E69-A7F7-09ADE3FB5888');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьОграничениеСкидки
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '5C0BE27D-7B90-4E9C-89FD-1D1E5C42C944');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //D7ABF0CF-93FC-4403-A157-65AECB03A557 //ИспользоватьПоиск
  //ИспользоватьСканирование
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'ED0274E1-3B90-4DB9-951F-3037260B80AC');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //B1BEE583-CBC4-4D2D-BD2C-71E4FA6F4492 //ИмяСканера
  //РедактироватьПодтвержденныеДокументы
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '8DEB5086-FB67-436E-A5F7-5118CE0DC09E');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //CF41BA05-A4EE-4492-9A2C-C96394C4864A //КодЗапросаОбновления - не нужна
  //A369D2CA-9192-4CA3-9FFB-14F5A0A4CEAD //ИдентификаторОтчетаДляОбновления
  //C186C395-658C-4B42-B007-F50DA543A9D8 //ИзмененнаяНумерация
  //16D90B81-6BA0-4E72-A471-4350213B934E //ИспользоватьКомментарииКФото
  //ОтображатьКодНоменклатуры
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'D902C64A-9A7A-40D1-8067-E4BB6B309534');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(VarAsBool(AndroidSettingsDict.ОтображатьКодТовара))));
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтображатьВесВЖурнале
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '0DE4A49F-691B-4910-95BF-6F25A281D9E1');
  NodeITEM.SetAttribute('Value', 0);//возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ПересчитыватьВБазовыеЕдиницы
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '0D0B118F-A77D-4A90-ADFB-C79E5EB08CDB');
  NodeITEM.SetAttribute('Value', 1);
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтображатьЕдИзмОстатков
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'BC87AA0F-17C7-45E1-9838-5089FF44D809');
  NodeITEM.SetAttribute('Value', 0);//возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьРасширеннуюФормуВводаКоличества
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '619D132F-4A21-4DB6-99CB-240F254E218D');
  NodeITEM.SetAttribute('Value', 0);//возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьИсториюПродаж
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '0270B3D5-4213-419B-9E3A-48CBA4CAEC04');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(VarAsBool(AndroidSettingsDict.ИспользоватьИсториюПродаж))));
  NodeELEMENTS.AppendChild(NodeITEM);
  //CA319084-FE48-42DD-B5E1-9A3182F62B9C //ЦветАкции
  //9C60A778-7DB0-4B3A-89D5-EBE6B56B1D7F //ЦветПросроченныхДолгов
  //CCD3F25E-A29B-419F-B8A2-D58E380EFAE2 //УказыватьДокументОплаты
  //EF7C73D2-D745-4E04-A5F1-AFCBBCB72F05 //ПроверятьCуммуОплаты
  //EC1C050F-9183-4CF8-9A40-8546C8617EBB //ЗапрашиватьКоличество
  //AEDDB719-EB7A-493E-B80E-EE2D63E76FE5 //ЗапрашиватьЦену
  //68524BCF-B992-4896-8A91-44EE31498831 //ИзменятьРежимПодбораВМерчендайзинге
  //D2DD4509-E164-4E6C-A0B2-C46B5CA0397D //РедактируемыйМерчендайзинг
  //32CD846C-CAFA-4006-BC05-EF2CD135E2EA //ЗапрашиватьКоличествоМерчендайзинга
  //138F9A6C-7F96-4136-9FBC-0663476BC094 //КоличествоМерчВОдномОкне
  //ИзменятьРежимПодбора
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'C64DAC8A-2FBC-40BF-BF49-143398AAAC9A');
  NodeITEM.SetAttribute('Value', 0);// возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //A86959B3-ED83-44D8-B457-DF8DFEA9EFDD //СоздаватьМерчендайзингАвтоматически
  //4280AE75-B17C-48C2-9140-4FC09853A4AD //СозданиеЗаданий
  //РаботаСМаршрутами
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '99EEEEF3-015A-4727-8166-65F2DCCEAB29');
  NodeITEM.SetAttribute('Value', 1);// возможно 0
  NodeELEMENTS.AppendChild(NodeITEM);
  //ПриоритетПоМаршрутам
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '8E0A70A1-476C-4C7B-A8A7-0C9CE334FC68');
  NodeITEM.SetAttribute('Value', 0);// возможно 1
  NodeELEMENTS.AppendChild(NodeITEM);
  //ИспользоватьGPS
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'E8DCA437-FA0D-4F92-B7B8-4A7A162638C5');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //E41A7026-551C-44F9-997F-51A8B68B88AC //НеЖдатьGPSКоординатыДокумента
  //6E7183CC-ABF6-4B18-AF75-F4D851551FD4 //ЗаписьТрека
  //E38FE34E-F36A-44C9-9DBD-A29F7C925940 //ПериодЗаписиТрека
  //DD7CDE5E-3B09-4FA5-809B-529E8BBFB929 //ЗаписыватьСкорость
  //C6B9563F-947A-46C2-82DD-D375E103317D //ИспользоватьДатуГПС
  //DF297AD7-E2CE-478A-974E-FB399239E23E //ДатаНачалаТрека
  //1DE1DAE1-A088-4C5B-A68E-4D233B49683A //РабочееВремя
  //428F867C-0BF1-45B2-B812-EF1D284D3E3F //РабочиеДни
  //6517DA49-A145-43A7-8730-A3E9978E437B //ФоноваяПередача
  //54E2A0B0-4F94-499D-875A-9D2EE7634DA9 //ИнтервалПередачи
  //F4F9EA70-D4F9-4F21-AC4A-F073C5D08B95 //ОсновнаяОнлайнКарта
  //ИспользоватьПечать
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', 'B1945151-4055-4BC4-A9A0-9E1D39BABE99');
  NodeITEM.SetAttribute('Value', 0);
  NodeELEMENTS.AppendChild(NodeITEM);
  //934815D4-DF31-4A58-88DB-3135FFEBC1F1 //ТипПринтера
  //449752D2-571A-4FAC-B879-F9A26B482670 //АдресПринтера
  //87A4B70A-16DB-481B-82D0-7A7612BFDDCE //ПортПринтера
  //619FABE8-6CB7-41CA-9C74-2F448552D408 //ИмяУстройства
  //E3383A28-6219-4FBC-A6C2-A498F2E2A47B //ТипСоединения
  //4371A5E3-8C6C-4F81-9C54-0D48EBA7385E //Кодировка
  //1E67E2A1-4BBB-4098-A670-537106455667 //РазделятьСтраницы
  //ECD4CE0A-E608-4D03-992C-B4131780AA1B //КоличествоОтступов
  //CBFCB5A0-D805-4793-80BE-FEEEF999CEE9 //ПечатьЧерезТекстовыйДокумент

  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportAndroidConstantsForAgent(Mean : ISProcessing; CommercialAgents : ISDictionary; var Success : Boolean);
var
  Constants : IS4VPAConst;
  XMLDoc, NodeDATA, NodeCONSTANTS, NodeELEMENTS, NodeITEM, pi : OLEVariant;
  XMLDocPath, XMLDocFullName : String;
  Employee : ISDictionary;
  CommercialAgentsSuffix : String;
begin
  Constants := GetConstants;
  XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
  CommercialAgentsSuffix := '';
  if IsObjFocused(CommercialAgents) then
   CommercialAgentsSuffix := AgentSuffix + VarAsStr(CommercialAgents.Код);
  XMLDocFullName := XMLDocPath + AndroidExportFileName + CommercialAgentsSuffix + XMLExt;
  if FileExists(XMLDocFullName) then
    begin
      XMLDoc := LoadXMLFromFileByVersion(XMLDocFullName, XMLVersion6);
      NodeDATA := XMLDoc.SelectSingleNode('/DATA');
    end
  else
    begin
      XMLDoc := CreateDOMDocumentByVersion(XMLVersion6);
      pi := XMLDoc.createProcessingInstruction(XmlWord, XmlVersionCodeUTF8);
      XMLDoc.AppendChild(pi);
      NodeDATA := XMLDoc.CreateElement('DATA');
      NodeDATA.SetAttribute('DBVERSION', DBVERSION);
      XMLDoc.AppendChild(NodeDATA);
    end;
  NodeCONSTANTS := XMLDoc.CreateElement('CONSTANTS');
  NodeDATA.AppendChild(NodeCONSTANTS);

  NodeELEMENTS := XMLDoc.CreateElement('ELEMENTS');
  NodeCONSTANTS.AppendChild(NodeELEMENTS);

  // НаименованиеАгента
  if VarAsBool(CommercialAgents.@Служащий.IsFocused) then
    begin
      Employee := CommercialAgents.Служащий;
      NodeITEM := XMLDoc.CreateElement('ITEM');
      NodeITEM.SetAttribute('GUID', 'A2E1CC68-0624-45A6-8057-EFD35259B9FE');
      NodeITEM.SetAttribute('Value', Employee.ПолноеНазвание);
      NodeELEMENTS.AppendChild(NodeITEM);
    end;
  //РедактироватьСкидкиВДокументах
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '4A6B2C4C-445B-4985-A509-10FB1A2D57CE');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(CommercialAgents.НастройкаТипаЦеныИСкидок)));
  NodeELEMENTS.AppendChild(NodeITEM);
  //РедактироватьЦеныВДокументах
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '690B5736-E1B9-41EF-A132-807ACAD31687');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(CommercialAgents.НастройкаЦены)));
  NodeELEMENTS.AppendChild(NodeITEM);
  //ЗапретитьИзменятьТипЦеныВДокументе
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '0DEEF076-FF1F-4E4D-ACB5-8344BE0281A1');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(not VarAsBool(CommercialAgents.НастройкаТипаЦеныИСкидок))));
  NodeELEMENTS.AppendChild(NodeITEM);
  //ОтображатьИсходнуюЦену
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '5DC7AEA9-E9DA-4AA4-BABB-DF5A43AF1AD5');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(VarAsBool(CommercialAgents.ОтображатьВхЦену))));
  NodeELEMENTS.AppendChild(NodeITEM);
  //УказаниеСкидкиВТЧПродаж
  NodeITEM := XMLDoc.CreateElement('ITEM');
  NodeITEM.SetAttribute('GUID', '4838F24A-FFAA-48F3-98F8-7863125944C8');
  NodeITEM.SetAttribute('Value', AbsD(VarAsInt(CommercialAgents.НастройкаТипаЦеныИСкидок)));
  NodeELEMENTS.AppendChild(NodeITEM);

  XMLDoc.save(XMLDocFullName);
  Success := True;
end;

procedure ExportDataForGroup(Mean : ISProcessing; Constants : IS4VPAConst; CommercialAgentGroup : ISDictionary; GroupType : Integer; var Success : Boolean);
var
  XMLDocPath, XMLDocFullName : String;
  GroupPrefix : string;
begin
  case GroupType of
    grItem :
      GroupPrefix := ItemSuffix;
    grPartner :
      GroupPrefix := PartnerSuffix;
  end;
  CommercialAgentGroup.SetRangeByField('Тип', GroupType, GroupType);
  CommercialAgentGroup.Select;
  while CommercialAgentGroup.SelectNext do
    begin
      XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
      XMLDocFullName := XMLDocPath + AndroidExportFileName + GroupPrefix + VarAsStr(CommercialAgentGroup.Код) + XMLExt;
      if FileExists(XMLDocFullName) then
        DeleteFile(XMLDocFullName);
      case GroupType of
        grItem :
          ExportAndroidItems(Mean, CommercialAgentGroup, Success);
        grPartner :
          ExportAndroidCustomers(Mean, CommercialAgentGroup, Success);
      end;
    end;
end;


procedure ExportDataForGroupNew(Mean : ISProcessing; Constants : IS4VPAConst; CommercialAgentTbl : ISValueTable; GroupType : Integer; var Success : Boolean);
var
  XMLDocPath, XMLDocFullName : String;
  GroupPrefix : string;
  CommercialAgentDicTmp : IsDictionary;
begin
  case GroupType of
    grItem :
      GroupPrefix := ItemSuffix;
    grPartner :
      GroupPrefix := PartnerSuffix;
  end;
  CommercialAgentDicTmp := CreateObject('Справочники.ТорговыеАгенты');
  CommercialAgentDicTmp.Select;
  CommercialAgentTbl.Select;
  while CommercialAgentTbl.SelectNext do
    if CommercialAgentDicTmp.Find(CommercialAgentTbl.@Агент) then
      begin
        XMLDocPath := VarAsStr(Constants.ПутьКПапкеОбменаДляКПК);
        XMLDocFullName := XMLDocPath + AndroidExportFileName + GroupPrefix + VarAsStr(CommercialAgentDicTmp.Код) + XMLExt;
        if FileExists(XMLDocFullName) then
          DeleteFile(XMLDocFullName);
        case GroupType of
          grItem :
            ExportAndroidItemsNew(Mean, CommercialAgentDicTmp, Success);
          grPartner :
            ExportAndroidCustomersNew(Mean, CommercialAgentDicTmp, Success);
        end;
      end;
end;


procedure EPExportAndroidData(Mean : ISProcessing; var Success : Boolean); server;
var
  Constants : IS4VPAConst;
  CommercialAgentGroup, CommercialAgents : ISDictionary;
begin
  Success := False;
  Constants := GetConstants;
  ExportAndroidContactInformationTypes(Mean, Success);
  UnionPartnerDict := VarAsBool(Constants.ПартнерыДляКПК);
  CommercialAgentGroup := CreateObject('Справочники.ГруппыТА');
  if VarAsBool(UnionPartnerDict) then
    ExportAndroidCustomers(Mean, CommercialAgentGroup, Success)
  else
    ExportDataForGroup(Mean, Constants, CommercialAgentGroup, grPartner, Success);
  ExportAndroidPriceTypes(Mean, Success);

  UnionItemsDict := VarAsBool(Constants.ТоварыДляКПК);
  if VarAsBool(UnionItemsDict) then
    ExportAndroidItems(Mean, CommercialAgentGroup, Success)
  else
    ExportDataForGroup(Mean, Constants, CommercialAgentGroup, grItem, Success);
//  ExportAndroidPriceTypes(Mean, Success);
  ExportAndroidFirms(Mean, Success);
  ExportAndroidConstants(Mean, Success);
  CommercialAgents := CreateObject('Справочники.ТорговыеАгенты');
  CommercialAgents.SetRangeByField('ОперационнаяСистема', osAndroid, osAndroid);
  CommercialAgents.Select;
  while CommercialAgents.SelectNext do
    begin
      ExportAndroidOrders(Mean, CommercialAgents, Success);
      ExportAndroidConstantsForAgent(Mean, CommercialAgents, Success);
      ExportAndroidRoute(Mean, CommercialAgents, Success);
    end;
  Success := True;
end;
 
procedure EPExportAndroidDataNew(Mean : ISProcessing; var Success : Boolean); server;
var
  Constants : IS4VPAConst;
  CommercialAgentGroup, CommercialAgents : ISDictionary;
begin
  Success := False;
  Constants := GetConstants;
  ExportAndroidContactInformationTypes(Mean, Success);
  UnionPartnerDict := VarAsBool(Constants.ПартнерыДляКПК);
  CommercialAgentGroup := CreateObject('Справочники.ГруппыТА');
  if VarAsBool(UnionPartnerDict) then
//    ExportAndroidCustomers(Mean, CommercialAgentGroup, Success)
    ExportAndroidCustomersNew(Mean, Null, Success)
  else
    ExportDataForGroupNew(Mean, Constants, AgentsTable, grPartner, Success);

  ExportAndroidPriceTypes(Mean, Success);

  UnionItemsDict := VarAsBool(Constants.ТоварыДляКПК);
  if VarAsBool(UnionItemsDict) then
//    ExportAndroidItems(Mean, CommercialAgentGroup, Success)
    ExportAndroidItemsNew(Mean, Null, Success)
  else
    ExportDataForGroupNew(Mean, Constants, AgentsTable, grItem, Success);
//  ExportAndroidPriceTypes(Mean, Success);
  ExportAndroidFirms(Mean, Success);
  ExportAndroidConstants(Mean, Success);
  CommercialAgents := CreateObject('Справочники.ТорговыеАгенты');
  CommercialAgents.SetRangeByField('ОперационнаяСистема', osAndroid, osAndroid);
  CommercialAgents.Select;
  AgentsTable.Select;

  while AgentsTable.SelectNext do
    if CommercialAgents.Find(AgentsTable.@Агент) then
      begin
        ExportAndroidOrders(Mean, CommercialAgents, Success);
        ExportAndroidConstantsForAgent(Mean, CommercialAgents, Success);
        ExportAndroidRoute(Mean, CommercialAgents, Success);
      end;
  Success := True;
end;

function ExportAndroidData(AConfType : integer; APhotoTbl : ISValueTable) : Variant; server;
begin
  ConfType := AConfType;
  PhotoTbl := APhotoTbl;
  Result := EntryPoint(EPExportAndroidData);
end;

function ExportAndroidDataNew(AConfType : integer; AAgentsTable,APhotoTbl : ISValueTable) : Variant; server;
begin
  ConfType := AConfType;
  PhotoTbl := APhotoTbl;
  AgentsTable := AAgentsTable;
  Result := EntryPoint(EPExportAndroidDataNew);
end;


procedure GetMyGoodCount(tmpCtx : ISValueTable; Date : DateTime; AccsGoods, AccsReserv : ISAccs); server;
begin
  GetGoodCount(tmpCtx, Date, AccsGoods, AccsReserv);
end;

end.
