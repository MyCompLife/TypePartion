interface

uses
  System, DispIntf, ConstNames, РаботаСПеременными, РаботаСОбъектами,
  РаботаСКомпонентамиVCL, РаботаСоСправочникамиCL, Пользователи;

implementation

var
  MasterData : ICDictionary;
  Opt : ICOptions;
  UseLevels, LockPost : Boolean;
  AccsGoodCurrent, AccsGoodRes : ICAccs;
  FieldName: String; 
  ManufacturerTbl, GroupTbl: ICValueTable;
  UseConst : IC4VPAConst;

//*****************************************************
procedure GoodsFilter(FieldName: String; Tbl: ICValueTable);
begin
  MasterData.DisableControls;
  if VarAsBool(Tbl._Default[FieldName + 'Товара'].IsFocused) then
    begin
      MasterData.SetFieldFilter(FieldName,'=',Tbl._Default[FieldName + 'Товара'],'','',Null);
      MasterData.Select;
    end
  else
    begin
      MasterData.CancelFieldFilter(FieldName);
      MasterData.Select;
    end;
  MasterData.EnableControls;
end;

procedure TVS_VPAAfterScroll(Sender: TObject);
var
  FieldName: String;
begin
  case (Sender as TO4TableValueSource).Name of
    'TVSManufacturer': GoodsFilter('Производитель', ManufacturerTbl);
    'TVSGroup': GoodsFilter('Группа', GroupTbl);
  end;
end;

{$D-}
procedure dbgManufacturer_GetRowParams(Sender: TObject; DrawFont: TFont; var BackColor: TColor; Highlight: boolean);
begin
  if ManufacturerTbl.Order = 0 then
    begin
      if not Highlight then
        BackColor := 10942461
      else
        begin
          BackColor := 703486;
          DrawFont.Color := clBlack;
        end;
    end;
end;

procedure dbgGroup_GetRowParams(Sender: TObject; DrawFont: TFont; var BackColor: TColor; Highlight: boolean);
begin
  if GroupTbl.Order = 0 then
    begin
      if not Highlight then
        BackColor := 10942461
      else
        begin
          BackColor := 703486;
          DrawFont.Color := clBlack;
        end;
    end;
end;
{$D+}
//*****************************************************

procedure TVS_VPATimedAfterScroll(Sender: TObject);
begin
  if VarAsBool(GroupTbl.@ГруппаТовара.IsFocused) then
    begin
      MasterData.SetFieldFilter('Производитель','=',GroupTbl.ГруппаТовара,'','',Null);
      MasterData.Select;
    end
  else
    begin
      MasterData.CancelFieldFilter('Производитель');
      MasterData.Select;
    end;
end;

{$D-}
procedure dbgGrouop_GetRowParams(Sender: TObject; DrawFont: TFont; var BackColor: TColor; Highlight: boolean);
begin
  if not VarAsBool(GroupTbl.@ГруппаТовара.IsFocused) then
    begin
      if not Highlight then
        BackColor := 10942461
      else
        begin
          BackColor := 703486;
          DrawFont.Color := clBlack;
        end;
    end;
end;
{$D+}
//*****************************************************


procedure SetCalcField;
begin
  MasterData.ClearCalcFieldInDBServer;
  MasterData.SetCalcFieldInDBServer('КоличествоНаСкладах', AccsGoodCurrent,
    RoundDate(CurrentDate, rdDay, True), ArrayOf('Товар'), 'КолОбщ', amtBoth, '');
  MasterData.SetCalcFieldInDBServer('КолВРез', AccsGoodRes,
    RoundDate(CurrentDate, rdDay, True), ('Товар'), 'КолОбщ', amtBoth, '');
end;

procedure MDS_VPABeforeOpen(Sender : TObject);
begin
  MasterData := MDS.GetMean;
  Masterdata.SetFieldFilter('ПометкаУдаление','<>',-1,'','',Null);
  if IsNil(Opt) then
    Opt := CreateObject('ОпцииКлиента');
  UseLevels := VarAsBool(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption));
  AccsGoodRes := CreateObject('Аккумуляторы.ТоварыВРезерве');
  AccsGoodCurrent := CreateObject('Аккумуляторы.ОстаткиТоваровНаСегодня');
  UseConst := GetConstants;
  if VarAsBool(UseConst.ПоказыватьЦеныГрн) then
    MasterData.SetSrvOnCalcFields(server.SrvCalcFieldsEP);
  SetCalcField;       
end;

procedure MDS_VPABeforeMove(Source : Variant; IsGroup : Boolean; var Accept : Boolean);
begin
  Accept := VarAsBool(Source.IsFocused);
end;

procedure miCopy_VPABeforeActionClick(Sender : TObject);
var
  CopyFrom : ICDictionary;
begin
  CopyFrom := CreateObject('Справочники.Товары');
  if CopyFrom.Find(MasterData) then
    MasterData.Params['CopyFrom'] := CopyFrom
  else
    MasterData.Params['CopyFrom'] := Null;
end;

procedure miAdd_VPABeforeActionClick(Sender : TObject);
begin
  MasterData.Params['CopyFrom'] := Null;
end;



procedure tbOption_Click(Sender : TObject);
begin
  MasterData.CancelFieldFilter('Услуга');
 MasterData.Refresh;
end;

procedure MDS_VPAAfterScroll(Sender : TObject);
begin
  MasterData.InteractiveUseLevels := UseLevels;
end;

procedure pmiDontUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := False;
end;

procedure pmiUseLevel_VPABeforeActionClick(Sender : TObject);
begin
  UseLevels := True;
end;

procedure Form_Close(Sender : TObject);
begin
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption, UseLevels);
  Opt.SetServerPrm(GetUserID + MasterData.GetSign + Form.Caption+'panel1', Panel1.Height);

end;

procedure miProperty_Click(Sender : TObject);
var
  dialog : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      dialog := CreateObject('Обработки.СвойстваТовара');
      dialog.Execute('СвойстваТовара', MasterData);
    end;
end;


procedure miRefresh_Click(Sender : TObject);
begin
  MasterData.Refresh;
end;

procedure Form_Open(Sender : TObject);
begin
  MasterData.Params[prmInterfaceType] := itInPlaceForMain;
  MakeCnfgInterface(MasterData, Form, ManufacturerTbl, GroupTbl);
  MakeStandartInterface(MasterData, Form, '', 'dbgData');
  tsFilter.Down := GetFilterPanel(MasterData.GetSign);
  pFilter.Visible := tsFilter.Down;

  Panel1.Height := VarAsInt(Opt.GetServerPrm(GetUserID + MasterData.GetSign + Form.Caption+'panel1'),184);
  Panel1.Visible :=  dbgGroup.Visible or dbgManufacturer.Visible;
end;

procedure miEditPrice_Click(Sender: TObject);
var
  dialog : ICProcessing;
begin
  if MasterData.IsFocused then
    begin
      dialog := CreateObject('Обработки.ИзменениеЦеныТовара');
      dialog.Execute('ИсторияИзмененияСправочныхЦен', MasterData);
    end;
end;

procedure Form_Execute(Sender: TObject; Mean: Variant; Params: Variant);
begin
  try
    MasterData.Params['CardType'] := 0;
    MasterData.SetFieldFilter('ТипКарточки','=',0,'','',Null);
    if IsObjFocused(Params) then
      MasterData.UseParent(Params);
    MasterData.Refresh;
  finally
  end;
end;

procedure eGoodsFilter_KeyDown(Sender: TObject; var Key: Integer);
begin
  if key=13 then
    begin
      Case eFieldFilter.Text of
        'Название' : FieldName := 'НазвТовара';
      else
        FieldName := eFieldFilter.Text;
      end;
      MasterData.SetFieldFilter(FieldName,'Like', '%' + eGoodsFilter.Text + '%','','',Null);
      MasterData.Refresh;
      form.ActiveControl := dbgData;
    end;
end;

procedure tbGoodsFilterClear_Click(Sender: TObject);
begin
  MasterData.CancelFieldFilter(FieldName);
  MasterData.Refresh;
  eGoodsFilter.Text := '';
end;

procedure miFocusOnFilter_Click(Sender: TObject);
begin
  form.ActiveControl := eGoodsFilter;
end;

procedure tbFilterApply_Click(Sender: TObject);
begin
  Case eFieldFilter.Text of
    'Название' : FieldName := 'НазвТовара';
  else
    FieldName := eFieldFilter.Text;
  end;
  MasterData.SetFieldFilter(FieldName,'Like', '%' + eGoodsFilter.Text + '%','','',Null);
  MasterData.Refresh;
  form.ActiveControl := dbgData;
end;

procedure tsFilter_Click(Sender: TObject);
begin
  pFilter.Visible := tsFilter.Down;
  MasterData.CancelFieldFilter(FieldName);    
  MasterData.Refresh;
  eGoodsFilter.Text := '';
  SetFilterPanel(MasterData.GetSign, tsFilter.Down);
end;

procedure Form_ExecProc(Self, Caller: Variant; ProcID: string; InParams: Variant; var OutParams: Variant);
begin
if ProcID='setparent' then
  begin
    MasterData.UseParent(InParams);
    MasterData.Refresh;
  end;
end;

{$D-}
procedure dbgData_GetImageIndex(Sender: TObject; var Index1, Index2: integer);
begin
  if MasterData.IsFocused then
    begin
      if VarAsBool(MasterData.ПометкаУдаление) then
       Index2 := 51;
    end;
end;
{$D+}

procedure miAllGoods_Click(Sender: TObject);
begin
 (Sender as TO4MenuItem).Checked := true;
 case (Sender as TO4MenuItem).Tag of
  0: MasterData.CancelFieldFilter('ПометкаУдаление');
  1: Masterdata.SetFieldFilter('ПометкаУдаление','=',-1,'','',Null);
  2: Masterdata.SetFieldFilter('ПометкаУдаление','<>',-1,'','',Null);
 end;
 Masterdata.Refresh;
end;

procedure tbGoodToDel_Click(Sender: TObject);
var x,y : integer;
begin
 tbGoodToDel.GetScreenPos(x,y);
 pmGoodsToDel.Popup(x,y+tbGoodToDel.Height);
end;


procedure MDS_VPAAfterPost(Sender: TObject);
Var
  CatDic : ICDictionary;
begin
 if LockPost then exit;
 CatDic := CreateObject('Справочники.Товары');
 CatDic.IncludeLevels(true);
 CatDic.IncludeOnlyLevels(true);
 if CatDic.Find(MasterData.@Категория) and not IsObjEQ(MasterData.GetParent,CatDic)  then
   begin
     LockPost := true;
     MasterData.Edit;
     MasterData.Категория := MasterData.GetParent;
     MasterData.POst;
     MasterData.ApplyUpdates;
     LockPost := False;
   end;


end;

end.
_VPA_COMPONENTTLIST_DELIMITER_Form:TO4DataForm
Splitter1:TO4Splitter
Panel1:TO4Panel
dbgManufacturer:TO4DBGrid
dbgGroup:TO4DBGrid
Panel2:TO4Panel
Splitter2:TO4Splitter
tbrData:TO4ToolBar
tbAdd:TO4ToolButton
tbEdit:TO4ToolButton
tbDelete:TO4ToolButton
tbDelimiter2:TO4ToolButton
tbRefresh:TO4ToolButton
tbGoodToDel:TO4ToolButton
tbSettings:TO4ToolButton
ToolButton2:TO4ToolButton
tsFilter:TO4ToolButton
dbgData:TO4DBGrid
Panel3:TO4Panel
DBMemo1:TO4DBMemo
pFilter:TO4Panel
CodePanel:TO4Panel
eGoodsFilter:TO4Edit
eFieldFilter:TO4Edit
ToolBar1:TO4ToolBar
tbFilterApply:TO4ToolButton
ToolButton4:TO4ToolButton
tbGoodsFilterClear:TO4ToolButton
MDS:TO4DataSource
pmData:TO4PopupMenu
miAdd:TO4MenuItem
miCopy:TO4MenuItem
miEdit:TO4MenuItem
miDelete:TO4MenuItem
miDelimiter1:TO4MenuItem
miSort:TO4MenuItem
miDelimiter3:TO4MenuItem
miRefresh:TO4MenuItem
miSettings:TO4MenuItem
miDelimiter4:TO4MenuItem
miEditPrice:TO4MenuItem
miFocusOnFilter:TO4MenuItem
TVSManufacturer:TO4TableValueSource
TVSGroup:TO4TableValueSource
pmGoodsToDel:TO4PopupMenu
miAllGoods:TO4MenuItem
miGoodsToDel:TO4MenuItem
miWithoutGoodsToDel:TO4MenuItem
